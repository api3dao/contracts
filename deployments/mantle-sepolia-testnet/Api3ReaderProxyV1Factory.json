{
  "address": "0x0e9F462117EddE5fEfFC674E556b5464013881DD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "api3ServerV1OevExtension_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dappId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "DeployedApi3ReaderProxyV1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "api3ServerV1OevExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "dappId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "computeApi3ReaderProxyV1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "dappId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "deployApi3ReaderProxyV1",
      "outputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a73871ab8a2c9fe683280187c77c94e6e93d64d88aa7f6befd470c6ecced5e6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "8312895708",
    "logsBloom": "0x
    "blockHash": "0x1c93945df906bdcfd1b331778555c98c13b54279bab0a3c44f62910b10f9cb69",
    "transactionHash": "0x7a73871ab8a2c9fe683280187c77c94e6e93d64d88aa7f6befd470c6ecced5e6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 14249010,
        "transactionHash": "0x7a73871ab8a2c9fe683280187c77c94e6e93d64d88aa7f6befd470c6ecced5e6",
        "address": "0x0e9F462117EddE5fEfFC674E556b5464013881DD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001dce40dc2afa7131c4838c8bff635ae9d198d1ce"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1c93945df906bdcfd1b331778555c98c13b54279bab0a3c44f62910b10f9cb69"
      }
    ],
    "blockNumber": 14249010,
    "cumulativeGasUsed": "8312942573",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x1DCE40DC2AfA7131C4838c8BFf635ae9d198d1cE", "0x4cC805D920dCA57d1199552C67DF50582bff8207"],
  "numDeployments": 1,
  "solcInputHash": "de732d772112aad69480d1de96d03ebc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"api3ServerV1OevExtension_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dappId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"DeployedApi3ReaderProxyV1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"api3ServerV1OevExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dappId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"computeApi3ReaderProxyV1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dappId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"deployApi3ReaderProxyV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"computeApi3ReaderProxyV1Address(bytes32,uint256,bytes)\":{\"params\":{\"dapiName\":\"dAPI name as a bytes32 string\",\"dappId\":\"dApp ID\",\"metadata\":\"Metadata\"},\"returns\":{\"proxy\":\"Proxy address\"}},\"constructor\":{\"params\":{\"api3ServerV1OevExtension_\":\"Api3ServerV1OevExtension contract address\",\"initialOwner\":\"Initial owner\"}},\"deployApi3ReaderProxyV1(bytes32,uint256,bytes)\":{\"details\":\"As noted in Api3ReaderProxyV1, an implementation is deployed for each proxy to be able to use immutable variables\",\"params\":{\"dapiName\":\"dAPI name as a bytes32 string\",\"dappId\":\"dApp ID\",\"metadata\":\"Metadata\"},\"returns\":{\"proxy\":\"Proxy address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Factory contract that deploys Api3ReaderProxyV1 implementations and their upgradeable proxies\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"api3ServerV1OevExtension()\":{\"notice\":\"Api3ServerV1OevExtension contract address\"},\"computeApi3ReaderProxyV1Address(bytes32,uint256,bytes)\":{\"notice\":\"Computes the address of the Api3ReaderProxyV1\"},\"deployApi3ReaderProxyV1(bytes32,uint256,bytes)\":{\"notice\":\"Deterministically deploys the Api3ReaderProxyV1\"}},\"notice\":\"The owner of this contract at the time that it deploys a proxy is set as the owner of the proxy, which is allowed to upgrade it\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/api3-server-v1/proxies/Api3ReaderProxyV1Factory.sol\":\"Api3ReaderProxyV1Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/access/interfaces/IAccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is ISelfMulticall {\\n    function accessControlRegistry() external view returns (address);\\n\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd71aae2566c019a9b2da5e1ec51421a62898495fa6fd08e2cc39451511dda334\",\"license\":\"MIT\"},\"contracts/access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IAccessControlRegistryAdminnedWithManager is\\n    IAccessControlRegistryAdminned\\n{\\n    function manager() external view returns (address);\\n\\n    function adminRole() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x8a8e1756fca81175305755b7a311536132e88173f60b2ac0fdeef92a6236afc5\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IApi3ServerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDapiServer.sol\\\";\\nimport \\\"./IBeaconUpdatesWithSignedData.sol\\\";\\n\\ninterface IApi3ServerV1 is IOevDapiServer, IBeaconUpdatesWithSignedData {\\n    function readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHash(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithIdAsOevProxy(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHashAsOevProxy(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function dataFeeds(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function oevProxyToIdToDataFeed(\\n        address proxy,\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n}\\n\",\"keccak256\":\"0xea2c05eaf2a19c93a9c9b08243fcabd8d7fcf0e4d422f7c687aef693126c1809\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IApi3ServerV1OevExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"../interfaces/IDataFeedServer.sol\\\";\\n\\ninterface IApi3ServerV1OevExtension is\\n    IAccessControlRegistryAdminnedWithManager,\\n    IDataFeedServer\\n{\\n    event Withdrew(address recipient, uint256 amount, address sender);\\n\\n    event PaidOevBid(\\n        uint256 indexed dappId,\\n        address indexed updater,\\n        uint256 bidAmount,\\n        uint256 signedDataTimestampCutoff,\\n        address auctioneer\\n    );\\n\\n    event UpdatedDappOevDataFeed(\\n        uint256 indexed dappId,\\n        address indexed updater,\\n        bytes32 dataFeedId,\\n        int224 updatedValue,\\n        uint32 updatedTimestamp\\n    );\\n\\n    function withdraw(address recipient, uint256 amount) external;\\n\\n    function payOevBid(\\n        uint256 dappId,\\n        uint256 bidAmount,\\n        uint32 signedDataTimestampCutoff,\\n        bytes calldata signature,\\n        bytes calldata data\\n    ) external;\\n\\n    function updateDappOevDataFeed(\\n        uint256 dappId,\\n        bytes[] calldata signedData\\n    )\\n        external\\n        returns (\\n            bytes32 baseDataFeedId,\\n            int224 updatedValue,\\n            uint32 updatedTimestamp\\n        );\\n\\n    function simulateDappOevDataFeedUpdate(\\n        uint256 dappId,\\n        bytes[] calldata signedData\\n    )\\n        external\\n        returns (\\n            bytes32 baseDataFeedId,\\n            int224 updatedValue,\\n            uint32 updatedTimestamp\\n        );\\n\\n    function simulateExternalCall(\\n        address target,\\n        bytes calldata data\\n    ) external returns (bytes memory);\\n\\n    function oevDataFeed(\\n        uint256 dappId,\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WITHDRAWER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function AUCTIONEER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    function withdrawerRole() external view returns (bytes32);\\n\\n    function auctioneerRole() external view returns (bytes32);\\n\\n    function api3ServerV1() external view returns (address);\\n\\n    function dappIdToLastPaidBid(\\n        uint256 dappId\\n    ) external view returns (address updater, uint32 endTimestamp);\\n}\\n\",\"keccak256\":\"0x57b8f2e759130c7f87520b44903c727b42b3fbc89663b8954c6b3f12213f5de1\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IBeaconUpdatesWithSignedData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IBeaconUpdatesWithSignedData is IDataFeedServer {\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 templateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bytes32 beaconId);\\n}\\n\",\"keccak256\":\"0xe2b2530081508baf1323d4c145a688ffd548cf318a8cb67c9ccb4abe1ac81c6e\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IDapiServer is\\n    IAccessControlRegistryAdminnedWithManager,\\n    IDataFeedServer\\n{\\n    event SetDapiName(\\n        bytes32 indexed dataFeedId,\\n        bytes32 indexed dapiName,\\n        address sender\\n    );\\n\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\\n\\n    function dapiNameToDataFeedId(\\n        bytes32 dapiName\\n    ) external view returns (bytes32);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    function dapiNameSetterRole() external view returns (bytes32);\\n\\n    function dapiNameHashToDataFeedId(\\n        bytes32 dapiNameHash\\n    ) external view returns (bytes32 dataFeedId);\\n}\\n\",\"keccak256\":\"0x1cf1d7637e2ee1b4f5b99345730183447db78ceb8ce2117cf145d4d375194e71\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IDataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/IExtendedSelfMulticall.sol\\\";\\n\\ninterface IDataFeedServer is IExtendedSelfMulticall {\\n    event UpdatedBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithBeacons(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    function updateBeaconSetWithBeacons(\\n        bytes32[] memory beaconIds\\n    ) external returns (bytes32 beaconSetId);\\n}\\n\",\"keccak256\":\"0x208f751f71b16d454cafd9188095178fdc776ee0376a85362f6022e7a4f010a3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IOevDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDataFeedServer.sol\\\";\\nimport \\\"./IDapiServer.sol\\\";\\n\\ninterface IOevDapiServer is IOevDataFeedServer, IDapiServer {}\\n\",\"keccak256\":\"0xf4082c33979785131358a217a8c5cf498a53c04318868eb1cb68e934c33226e3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IOevDataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IOevDataFeedServer is IDataFeedServer {\\n    event UpdatedOevProxyBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedOevProxyBeaconSetWithSignedData(\\n        bytes32 indexed beaconSetId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event Withdrew(\\n        address indexed oevProxy,\\n        address oevBeneficiary,\\n        uint256 amount\\n    );\\n\\n    function updateOevProxyDataFeedWithSignedData(\\n        address oevProxy,\\n        bytes32 dataFeedId,\\n        bytes32 updateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes[] calldata packedOevUpdateSignatures\\n    ) external payable;\\n\\n    function withdraw(address oevProxy) external;\\n\\n    function oevProxyToBalance(\\n        address oevProxy\\n    ) external view returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x2d162c576bfe5554767bb48758314c3e6f2c509f73203f0e166d1ac5168a1218\",\"license\":\"MIT\"},\"contracts/api3-server-v1/proxies/Api3ReaderProxyV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\nimport \\\"../../vendor/@openzeppelin/contracts@5.0.2/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../../vendor/@openzeppelin/contracts-upgradeable@5.0.2/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../vendor/@chainlink/contracts@1.2.0/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport \\\"./interfaces/IApi3ReaderProxyV1.sol\\\";\\nimport \\\"../interfaces/IApi3ServerV1.sol\\\";\\nimport \\\"../interfaces/IApi3ServerV1OevExtension.sol\\\";\\n\\n/// @title UUPS-upgradeable IApi3ReaderProxy and AggregatorV2V3Interface\\n/// implementation that is designed to be deployed by Api3ReaderProxyV1Factory\\n/// @notice The owner of this contract is allowed to upgrade it. In the case\\n/// that it is deployed by Api3ReaderProxyV1Factory, the owner will be the\\n/// owner of Api3ReaderProxyV1Factory at the time of deployment.\\n/// @dev For a gas-cheap `read()` implementation, this upgradeable contract\\n/// uses immutable variables (rather than initializable ones). To enable this,\\n/// an Api3ReaderProxyV1 needs to be deployed for each unique combination of\\n/// variables. The end user does not need to concern themselves with this, as\\n/// Api3ReaderProxyV1Factory abstracts this detail away.\\n/// Refer to https://github.com/api3dao/migrate-from-chainlink-to-api3 for more\\n/// information about the Chainlink interface implementation.\\ncontract Api3ReaderProxyV1 is\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    AggregatorV2V3Interface,\\n    IApi3ReaderProxyV1\\n{\\n    /// @notice Api3ServerV1 contract address\\n    address public immutable override api3ServerV1;\\n\\n    /// @notice Api3ServerV1OevExtension contract address\\n    address public immutable override api3ServerV1OevExtension;\\n\\n    /// @notice dAPI name as a bytes32 string\\n    bytes32 public immutable override dapiName;\\n\\n    /// @notice dApp ID\\n    uint256 public immutable override dappId;\\n\\n    // Api3ServerV1 interface expects the dAPI name hash. keccak256 is\\n    // typically expensive on ZK roll-ups, so we compute it once and store it\\n    // to use during reads.\\n    bytes32 private immutable dapiNameHash;\\n\\n    /// @dev Parameters are validated by Api3ReaderProxyV1Factory\\n    /// @param api3ServerV1OevExtension_ Api3ServerV1OevExtension contract\\n    /// address\\n    /// @param dapiName_ dAPI name as a bytes32 string\\n    /// @param dappId_ dApp ID\\n    constructor(\\n        address api3ServerV1OevExtension_,\\n        bytes32 dapiName_,\\n        uint256 dappId_\\n    ) {\\n        api3ServerV1OevExtension = api3ServerV1OevExtension_;\\n        api3ServerV1 = IApi3ServerV1OevExtension(api3ServerV1OevExtension_)\\n            .api3ServerV1();\\n        dapiName = dapiName_;\\n        dappId = dappId_;\\n        dapiNameHash = keccak256(abi.encodePacked(dapiName));\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract with the initial owner\\n    /// @param initialOwner Initial owner\\n    function initialize(address initialOwner) external override initializer {\\n        __Ownable_init(initialOwner);\\n    }\\n\\n    /// @notice Returns the current value and timestamp of the API3 data feed\\n    /// associated with the proxy contract\\n    /// @dev Reads the base feed that is associated to the dAPI and the OEV\\n    /// feed that is associated to the dApp\\u2013dAPI pair, and returns the value\\n    /// that is updated more recently\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function read()\\n        public\\n        view\\n        override\\n        returns (int224 value, uint32 timestamp)\\n    {\\n        bytes32 dataFeedId = IApi3ServerV1(api3ServerV1)\\n            .dapiNameHashToDataFeedId(dapiNameHash);\\n        if (dataFeedId == bytes32(0)) {\\n            revert DapiNameIsNotSet();\\n        }\\n        (int224 baseDapiValue, uint32 baseDapiTimestamp) = IApi3ServerV1(\\n            api3ServerV1\\n        ).dataFeeds(dataFeedId);\\n        (\\n            int224 oevDapiValue,\\n            uint32 oevDapiTimestamp\\n        ) = IApi3ServerV1OevExtension(api3ServerV1OevExtension).oevDataFeed(\\n                dappId,\\n                dataFeedId\\n            );\\n        if (oevDapiTimestamp > baseDapiTimestamp) {\\n            (value, timestamp) = (oevDapiValue, oevDapiTimestamp);\\n        } else {\\n            (value, timestamp) = (baseDapiValue, baseDapiTimestamp);\\n        }\\n        if (timestamp == 0) {\\n            revert DataFeedIsNotInitialized();\\n        }\\n    }\\n\\n    /// @dev AggregatorV2V3Interface users are already responsible with\\n    /// validating the values that they receive (e.g., revert if the spot price\\n    /// of an asset is negative). Therefore, this contract omits validation.\\n    function latestAnswer() external view override returns (int256 value) {\\n        (value, ) = read();\\n    }\\n\\n    /// @dev A Chainlink feed contract returns the block timestamp at which the\\n    /// feed was last updated. On the other hand, an API3 feed timestamp\\n    /// denotes the point in time at which the first-party oracles signed the\\n    /// data used to do the last update. We find this to be a reasonable\\n    /// approximation, considering that usually the timestamp is only used to\\n    /// check if the last update is stale.\\n    function latestTimestamp()\\n        external\\n        view\\n        override\\n        returns (uint256 timestamp)\\n    {\\n        (, timestamp) = read();\\n    }\\n\\n    /// @dev API3 feeds are updated asynchronously and not in rounds\\n    function latestRound() external pure override returns (uint256) {\\n        revert FunctionIsNotSupported();\\n    }\\n\\n    /// @dev Functions that use the round ID as an argument are not supported\\n    function getAnswer(uint256) external pure override returns (int256) {\\n        revert FunctionIsNotSupported();\\n    }\\n\\n    /// @dev Functions that use the round ID as an argument are not supported\\n    function getTimestamp(uint256) external pure override returns (uint256) {\\n        revert FunctionIsNotSupported();\\n    }\\n\\n    /// @dev API3 feeds always use 18 decimals\\n    function decimals() external pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @dev The dApp ID and dAPI name act as the description, and this is left\\n    /// empty to save gas on contract deployment\\n    function description() external pure override returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @dev A unique version is chosen to easily check if an unverified\\n    /// contract that acts as a Chainlink feed is an Api3ReaderProxyV1\\n    function version() external pure override returns (uint256) {\\n        return 4913;\\n    }\\n\\n    /// @dev Functions that use the round ID as an argument are not supported\\n    function getRoundData(\\n        uint80\\n    )\\n        external\\n        pure\\n        override\\n        returns (uint80, int256, uint256, uint256, uint80)\\n    {\\n        revert FunctionIsNotSupported();\\n    }\\n\\n    /// @dev Rounds IDs are returned as `0` as invalid values.\\n    /// Similar to `latestAnswer()`, we leave the validation of the returned\\n    /// value to the caller.\\n    function latestRoundData()\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        roundId = answeredInRound = 0;\\n        (answer, startedAt) = read();\\n        updatedAt = startedAt;\\n    }\\n\\n    /// @param newImplementation New implementation contract address\\n    /// @dev Only the owner can upgrade this contract\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal virtual override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xaea9835537e218237c6e6b98875e2501337e1cb1913ca74de8cad47c6c9c2b58\",\"license\":\"MIT\"},\"contracts/api3-server-v1/proxies/Api3ReaderProxyV1Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\nimport \\\"../../vendor/@openzeppelin/contracts@5.0.2/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IApi3ReaderProxyV1Factory.sol\\\";\\nimport \\\"../../vendor/@openzeppelin/contracts@5.0.2/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"../../vendor/@openzeppelin/contracts@5.0.2/utils/Create2.sol\\\";\\nimport \\\"./Api3ReaderProxyV1.sol\\\";\\n\\n/// @title Factory contract that deploys Api3ReaderProxyV1 implementations and\\n/// their upgradeable proxies\\n/// @notice The owner of this contract at the time that it deploys a proxy is\\n/// set as the owner of the proxy, which is allowed to upgrade it\\ncontract Api3ReaderProxyV1Factory is Ownable, IApi3ReaderProxyV1Factory {\\n    /// @notice Api3ServerV1OevExtension contract address\\n    address public immutable override api3ServerV1OevExtension;\\n\\n    /// @param initialOwner Initial owner\\n    /// @param api3ServerV1OevExtension_ Api3ServerV1OevExtension contract\\n    /// address\\n    constructor(\\n        address initialOwner,\\n        address api3ServerV1OevExtension_\\n    ) Ownable(initialOwner) {\\n        require(\\n            api3ServerV1OevExtension_ != address(0),\\n            \\\"Api3ServerV1OevExtension address zero\\\"\\n        );\\n        api3ServerV1OevExtension = api3ServerV1OevExtension_;\\n    }\\n\\n    /// @notice Deterministically deploys the Api3ReaderProxyV1\\n    /// @dev As noted in Api3ReaderProxyV1, an implementation is deployed for\\n    /// each proxy to be able to use immutable variables\\n    /// @param dapiName dAPI name as a bytes32 string\\n    /// @param dappId dApp ID\\n    /// @param metadata Metadata\\n    /// @return proxy Proxy address\\n    function deployApi3ReaderProxyV1(\\n        bytes32 dapiName,\\n        uint256 dappId,\\n        bytes calldata metadata\\n    ) external override returns (address proxy) {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        require(dappId != 0, \\\"dApp ID zero\\\");\\n        // The implementation is guaranteed to not have been deployed earlier\\n        // if the proxy is not yet deployed. If the proxy is already deployed,\\n        // we want to revert anyway. Therefore, there is no need to check the\\n        // case where the implementation is already deployed.\\n        address implementation = address(\\n            new Api3ReaderProxyV1{salt: keccak256(metadata)}(\\n                api3ServerV1OevExtension,\\n                dapiName,\\n                dappId\\n            )\\n        );\\n        proxy = address(\\n            new ERC1967Proxy{salt: keccak256(metadata)}(implementation, \\\"\\\")\\n        );\\n        Api3ReaderProxyV1(proxy).initialize(owner());\\n        emit DeployedApi3ReaderProxyV1(proxy, dapiName, dappId, metadata);\\n    }\\n\\n    /// @notice Computes the address of the Api3ReaderProxyV1\\n    /// @param dapiName dAPI name as a bytes32 string\\n    /// @param dappId dApp ID\\n    /// @param metadata Metadata\\n    /// @return proxy Proxy address\\n    function computeApi3ReaderProxyV1Address(\\n        bytes32 dapiName,\\n        uint256 dappId,\\n        bytes calldata metadata\\n    ) external view override returns (address proxy) {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        require(dappId != 0, \\\"dApp ID zero\\\");\\n        address implementation = Create2.computeAddress(\\n            keccak256(metadata),\\n            keccak256(\\n                abi.encodePacked(\\n                    type(Api3ReaderProxyV1).creationCode,\\n                    abi.encode(api3ServerV1OevExtension, dapiName, dappId)\\n                )\\n            )\\n        );\\n        proxy = Create2.computeAddress(\\n            keccak256(metadata),\\n            keccak256(\\n                abi.encodePacked(\\n                    type(ERC1967Proxy).creationCode,\\n                    abi.encode(implementation, bytes(\\\"\\\"))\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6acff22a800e0d31ad51972b8d028c70218d4a627681dfc56ca989d0eb883269\",\"license\":\"MIT\"},\"contracts/api3-server-v1/proxies/interfaces/IApi3ReaderProxyV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../../interfaces/IApi3ReaderProxy.sol\\\";\\n\\ninterface IApi3ReaderProxyV1 is IApi3ReaderProxy {\\n    error DapiNameIsNotSet();\\n\\n    error DataFeedIsNotInitialized();\\n\\n    error FunctionIsNotSupported();\\n\\n    function initialize(address initialOwner) external;\\n\\n    function api3ServerV1() external returns (address);\\n\\n    function api3ServerV1OevExtension() external returns (address);\\n\\n    function dapiName() external returns (bytes32);\\n\\n    function dappId() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x2dbe485305e8ea4f6b44c8059cbd17caa81bd6149eb97c69972eabc0db9c2f42\",\"license\":\"MIT\"},\"contracts/api3-server-v1/proxies/interfaces/IApi3ReaderProxyV1Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IApi3ReaderProxyV1Factory {\\n    event DeployedApi3ReaderProxyV1(\\n        address indexed proxy,\\n        bytes32 dapiName,\\n        uint256 dappId,\\n        bytes metadata\\n    );\\n\\n    function deployApi3ReaderProxyV1(\\n        bytes32 dapiName,\\n        uint256 dappId,\\n        bytes calldata metadata\\n    ) external returns (address proxy);\\n\\n    function computeApi3ReaderProxyV1Address(\\n        bytes32 dapiName,\\n        uint256 dappId,\\n        bytes calldata metadata\\n    ) external view returns (address proxy);\\n\\n    function api3ServerV1OevExtension() external returns (address);\\n}\\n\",\"keccak256\":\"0x5b467c0e92810c99febcf06be1e0e50b2ef04d17aa8490f85b12ff5eea1d745e\",\"license\":\"MIT\"},\"contracts/interfaces/IApi3ReaderProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Interface of the proxy contract that is used to read a specific API3\\n/// data feed\\n/// @notice While reading API3 data feeds, users are strongly recommended to\\n/// use this interface to interact with data feed-specific proxy contracts,\\n/// rather than accessing the underlying contracts directly\\ninterface IApi3ReaderProxy {\\n    /// @notice Returns the current value and timestamp of the API3 data feed\\n    /// associated with the proxy contract\\n    /// @dev The user is responsible for validating the returned data. For\\n    /// example, if `value` is the spot price of an asset, it would be\\n    /// reasonable to reject values that are not positive.\\n    /// `timestamp` does not necessarily refer to a timestamp of the chain that\\n    /// the read proxy is deployed on. Considering that it may refer to an\\n    /// off-chain time (such as the system time of the data sources, or the\\n    /// timestamp of another chain), the user should not expect it to be\\n    /// strictly bounded by `block.timestamp`.\\n    /// Considering that the read proxy contract may be upgradeable, the user\\n    /// should not assume any hard guarantees about the behavior in general.\\n    /// For example, even though it may sound reasonable to expect `timestamp`\\n    /// to never decrease over time and the current implementation of the proxy\\n    /// contract guarantees it, technically, an upgrade can cause `timestamp`\\n    /// to decrease. Therefore, the user should be able to handle any change in\\n    /// behavior, which may include reverting gracefully.\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function read() external view returns (int224 value, uint32 timestamp);\\n}\\n\",\"keccak256\":\"0xecea274b41d1c164517f1eb11a2979d6c5ff5cab78afc9a3f073214799d0ddf0\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISelfMulticall.sol\\\";\\n\\ninterface IExtendedSelfMulticall is ISelfMulticall {\\n    function getChainId() external view returns (uint256);\\n\\n    function getBalance(address account) external view returns (uint256);\\n\\n    function containsBytecode(address account) external view returns (bool);\\n\\n    function getBlockNumber() external view returns (uint256);\\n\\n    function getBlockTimestamp() external view returns (uint256);\\n\\n    function getBlockBasefee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaefe61a623c920d3e39c4779535e280378b44202d11c29a2c96f46f2fe5f420d\",\"license\":\"MIT\"},\"contracts/utils/interfaces/ISelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISelfMulticall {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory returndata);\\n\\n    function tryMulticall(\\n        bytes[] calldata data\\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\\n}\\n\",\"keccak256\":\"0x50b27284f0d5acd8b340836c09d252138ebf059f426e5d90d3f7221e1b7d0817\",\"license\":\"MIT\"},\"contracts/vendor/@chainlink/contracts@1.2.0/src/v0.8/shared/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x2450923d9bc223f53bcbbd50a17405929ce5322200e8ce053c7918030cbb7844\",\"license\":\"MIT\"},\"contracts/vendor/@chainlink/contracts@1.2.0/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorInterface} from \\\"./AggregatorInterface.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./AggregatorV3Interface.sol\\\";\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xd5e222c5dd223490b766da8e45266101dd3635b1ba31d9b7a3a80d49f7640f85\",\"license\":\"MIT\"},\"contracts/vendor/@chainlink/contracts@1.2.0/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts-upgradeable@5.0.2/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts-upgradeable@5.0.2/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts-upgradeable@5.0.2/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"./ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address implementation, bytes memory _data) payable {\\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return ERC1967Utils.getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xbfb6695731de677140fbf76c772ab08c4233a122fb51ac28ac120fc49bbbc4ec\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ffb56bcb175984a10b1167e2eba560876bfe96a435f5d62ffed8b1bb4ebc4c7\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161231338038061231383398101604081905261002f9161014b565b816001600160a01b03811661005f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610068816100df565b506001600160a01b0381166100cd5760405162461bcd60e51b815260206004820152602560248201527f4170693353657276657256314f6576457874656e73696f6e2061646472657373604482015264207a65726f60d81b6064820152608401610056565b6001600160a01b03166080525061017e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461014657600080fd5b919050565b6000806040838503121561015e57600080fd5b6101678361012f565b91506101756020840161012f565b90509250929050565b60805161216d6101a66000396000818160c2015281816101cd0152610453015261216d6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063ce7ebd6d11610050578063ce7ebd6d146100bd578063d893c1b3146100e4578063f2fde38b146100f757600080fd5b8063715018a6146100775780638da5cb5b14610081578063c3002760146100aa575b600080fd5b61007f61010a565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61008e6100b8366004610688565b61011e565b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b61008e6100f2366004610688565b610383565b61007f61010536600461070b565b61052b565b610112610582565b61011c60006105c8565b565b6000846101725760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f00000000000000000000000000000000000060448201526064015b60405180910390fd5b836000036101b15760405162461bcd60e51b815260206004820152600c60248201526b64417070204944207a65726f60a01b6044820152606401610169565b600083836040516101c3929190610734565b60405180910390207f000000000000000000000000000000000000000000000000000000000000000087876040516101fa9061066e565b6001600160a01b039093168352602083019190915260408201526060018190604051809103906000f5905080158015610237573d6000803e3d6000fd5b509050838360405161024a929190610734565b60405180910390208160405161025f9061067b565b6001600160a01b0390911681526040602082018190526000908201526060018190604051809103906000f590508015801561029e573d6000803e3d6000fd5b509150816001600160a01b031663c4d66de86102c26000546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b50505050816001600160a01b03167fb40b92c78b80aed539d9115cb84458be5e6cf0450738ae6c8645efd8e25975c2878787876040516103729493929190610744565b60405180910390a250949350505050565b6000846103d25760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f0000000000000000000000000000000000006044820152606401610169565b836000036104115760405162461bcd60e51b815260206004820152600c60248201526b64417070204944207a65726f60a01b6044820152606401610169565b60006104c98484604051610426929190610734565b6040519081900381209061043c6020820161066e565b601f1982820381018352601f9091011660408181527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602083015281018a9052606081018990526080015b60408051601f19818403018152908290526104ae92916020016107a5565b60405160208183030381529060405280519060200120610630565b905061052184846040516104de929190610734565b604051908190038120906104f46020820161067b565b601f1982820381018352601f909101166020818101604090815260008352516104909287929091016107d4565b9695505050505050565b610533610582565b6001600160a01b038116610576576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610169565b61057f816105c8565b50565b6000546001600160a01b0316331461011c576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610169565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061063d838330610644565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6115038061081883390190565b61041d80611d1b83390190565b6000806000806060858703121561069e57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156106c357600080fd5b8501601f810187136106d457600080fd5b803567ffffffffffffffff8111156106eb57600080fd5b8760208284010111156106fd57600080fd5b949793965060200194505050565b60006020828403121561071d57600080fd5b81356001600160a01b038116811461063d57600080fd5b8183823760009101908152919050565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b60005b8381101561079c578181015183820152602001610784565b50506000910152565b600083516107b7818460208801610781565b8351908301906107cb818360208801610781565b01949350505050565b6001600160a01b03831681526040602082015260008251806040840152610802816060850160208701610781565b601f01601f191691909101606001939250505056fe6101406040523060805234801561001557600080fd5b50604051611503380380611503833981016040819052610034916101bf565b6001600160a01b03831660c0819052604080516316b53a2760e11b81529051632d6a744e916004808201926020929091908290030181865afa15801561007e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a291906101f4565b6001600160a01b031660a05260e082905261010081905260408051602081018490520160408051601f198184030181529190528051602090910120610120526100e96100f1565b505050610216565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156101415760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101a05780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b80516001600160a01b03811681146101ba57600080fd5b919050565b6000806000606084860312156101d457600080fd5b6101dd846101a3565b925060208401519150604084015190509250925092565b60006020828403121561020657600080fd5b61020f826101a3565b9392505050565b60805160a05160c05160e051610100516101205161127461028f600039600061055d0152600081816103c00152610704015260006102f801526000818161047d015261074301526000818161018c015281816105920152610672015260008181610a5601528181610a7f0152610c0201526112746000f3fe6080604052600436106101755760003560e01c8063868fa88c116100cb578063b5ab58dc1161007f578063ce7ebd6d11610059578063ce7ebd6d1461046b578063f2fde38b1461049f578063feaf968c146104bf57600080fd5b8063b5ab58dc1461042b578063b633620c1461042b578063c4d66de81461044b57600080fd5b80639a6fc8f5116100b05780639a6fc8f5146103575780639de0eb04146103ae578063ad3cb1cc146103e257600080fd5b8063868fa88c146102e65780638da5cb5b1461031a57600080fd5b806354fd4d501161012d578063715018a611610107578063715018a6146102925780637284e416146102a75780638205bf6a146102d157600080fd5b806354fd4d501461023457806357de26a414610249578063668a0f021461027d57600080fd5b80634f1ef2861161015e5780634f1ef286146101e757806350d25bcd146101fc57806352d1902d1461021f57600080fd5b80632d6a744e1461017a578063313ce567146101cb575b600080fd5b34801561018657600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101d757600080fd5b50604051601281526020016101c2565b6101fa6101f536600461103f565b6104d4565b005b34801561020857600080fd5b506102116104f3565b6040519081526020016101c2565b34801561022b57600080fd5b50610211610506565b34801561024057600080fd5b50611331610211565b34801561025557600080fd5b5061025e610535565b60408051601b9390930b835263ffffffff9091166020830152016101c2565b34801561028957600080fd5b50610211610825565b34801561029e57600080fd5b506101fa610840565b3480156102b357600080fd5b506040805160208101909152600081525b6040516101c2919061112d565b3480156102dd57600080fd5b50610211610854565b3480156102f257600080fd5b506102117f000000000000000000000000000000000000000000000000000000000000000081565b34801561032657600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166101ae565b34801561036357600080fd5b50610377610372366004611160565b61086a565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016101c2565b3480156103ba57600080fd5b506102117f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ee57600080fd5b506102c46040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b34801561043757600080fd5b5061021161044636600461118c565b610825565b34801561045757600080fd5b506101fa6104663660046111a5565b61088b565b34801561047757600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ab57600080fd5b506101fa6104ba3660046111a5565b6109c8565b3480156104cb57600080fd5b50610377610a24565b6104dc610a4b565b6104e582610b02565b6104ef8282610b0a565b5050565b60006104fd610535565b50601b0b919050565b6000610510610bf7565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040517f472c22f10000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063472c22f190602401602060405180830381865afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd91906111c0565b905080610636576040517f8086c76400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f67a7cfb70000000000000000000000000000000000000000000000000000000081526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906367a7cfb7906024016040805180830381865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc91906111d9565b6040517f91526c360000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015260248101869052919350915060009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906391526c36906044016040805180830381865afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad91906111d9565b915091508263ffffffff168163ffffffff1611156107d157909550935084846107dc565b838380975081985050505b8563ffffffff1660000361081c576040517f2bb59f0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050509091565b6000604051631fc30cb960e01b815260040160405180910390fd5b610848610c40565b6108526000610cb4565b565b600061085e610535565b63ffffffff1692915050565b6000806000806000604051631fc30cb960e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156108d65750825b905060008267ffffffffffffffff1660011480156108f35750303b155b905081158015610901575080155b15610938576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561096c57845468ff00000000000000001916680100000000000000001785555b61097586610d32565b83156109c057845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6109d0610c40565b6001600160a01b038116610a18576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b610a2181610cb4565b50565b600080808080610a32610535565b9596601b9190910b9563ffffffff169450849350909150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610ae457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ad87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b156108525760405163703e46dd60e11b815260040160405180910390fd5b610a21610c40565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b64575060408051601f3d908101601f19168201909252610b61918101906111c0565b60015b610b8c57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a0f565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610be8576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401610a0f565b610bf28383610d43565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108525760405163703e46dd60e11b815260040160405180910390fd5b33610c727f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610852576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610a0f565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b610d3a610d99565b610a2181610e00565b610d4c82610e08565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115610d9157610bf28282610e8c565b6104ef610f02565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16610852576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109d0610d99565b806001600160a01b03163b600003610e3e57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a0f565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051610ea99190611222565b600060405180830381855af49150503d8060008114610ee4576040519150601f19603f3d011682016040523d82523d6000602084013e610ee9565b606091505b5091509150610ef9858383610f3a565b95945050505050565b3415610852576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082610f4f57610f4a82610fb2565b610fab565b8151158015610f6657506001600160a01b0384163b155b15610fa8576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610a0f565b50805b9392505050565b805115610fc25780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80356001600160a01b038116811461100b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561105257600080fd5b61105b83610ff4565b9150602083013567ffffffffffffffff81111561107757600080fd5b8301601f8101851361108857600080fd5b803567ffffffffffffffff8111156110a2576110a2611010565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156110d1576110d1611010565b6040528181528282016020018710156110e957600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b8381101561112457818101518382015260200161110c565b50506000910152565b602081526000825180602084015261114c816040850160208701611109565b601f01601f19169190910160400192915050565b60006020828403121561117257600080fd5b813569ffffffffffffffffffff81168114610fab57600080fd5b60006020828403121561119e57600080fd5b5035919050565b6000602082840312156111b757600080fd5b610fab82610ff4565b6000602082840312156111d257600080fd5b5051919050565b600080604083850312156111ec57600080fd5b825180601b0b81146111fd57600080fd5b602084015190925063ffffffff8116811461121757600080fd5b809150509250929050565b60008251611234818460208701611109565b919091019291505056fea26469706673582212200ce1fb76af7a7f07e054a40f569323f46509052cccbd884ed6811664ec0b0ec164736f6c634300081b0033608060405260405161041d38038061041d83398101604081905261002291610268565b61002c8282610033565b5050610358565b61003c82610092565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561008657610081828261010e565b505050565b61008e610185565b5050565b806001600160a01b03163b6000036100cd57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161012b919061033c565b600060405180830381855af49150503d8060008114610166576040519150601f19603f3d011682016040523d82523d6000602084013e61016b565b606091505b50909250905061017c8583836101a6565b95945050505050565b34156101a45760405163b398979f60e01b815260040160405180910390fd5b565b6060826101bb576101b682610205565b6101fe565b81511580156101d257506001600160a01b0384163b155b156101fb57604051639996b31560e01b81526001600160a01b03851660048201526024016100c4565b50805b9392505050565b8051156102155780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60005b8381101561025f578181015183820152602001610247565b50506000910152565b6000806040838503121561027b57600080fd5b82516001600160a01b038116811461029257600080fd5b60208401519092506001600160401b038111156102ae57600080fd5b8301601f810185136102bf57600080fd5b80516001600160401b038111156102d8576102d861022e565b604051601f8201601f19908116603f011681016001600160401b03811182821017156103065761030661022e565b60405281815282820160200187101561031e57600080fd5b61032f826020830160208601610244565b8093505050509250929050565b6000825161034e818460208701610244565b9190910192915050565b60b7806103666000396000f3fe6080604052600a600c565b005b60186014601a565b605e565b565b600060597f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e808015607c573d6000f35b3d6000fdfea2646970667358221220105a39e5344dce7a120ffb84aa65102e325f7cbbc088cef866e9f0a2b2bc33c964736f6c634300081b0033a2646970667358221220527f9301ed8ca010207313bfc1761e64088affd67a1cbfdff9f781c351ee7b7564736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063ce7ebd6d11610050578063ce7ebd6d146100bd578063d893c1b3146100e4578063f2fde38b146100f757600080fd5b8063715018a6146100775780638da5cb5b14610081578063c3002760146100aa575b600080fd5b61007f61010a565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61008e6100b8366004610688565b61011e565b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b61008e6100f2366004610688565b610383565b61007f61010536600461070b565b61052b565b610112610582565b61011c60006105c8565b565b6000846101725760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f00000000000000000000000000000000000060448201526064015b60405180910390fd5b836000036101b15760405162461bcd60e51b815260206004820152600c60248201526b64417070204944207a65726f60a01b6044820152606401610169565b600083836040516101c3929190610734565b60405180910390207f000000000000000000000000000000000000000000000000000000000000000087876040516101fa9061066e565b6001600160a01b039093168352602083019190915260408201526060018190604051809103906000f5905080158015610237573d6000803e3d6000fd5b509050838360405161024a929190610734565b60405180910390208160405161025f9061067b565b6001600160a01b0390911681526040602082018190526000908201526060018190604051809103906000f590508015801561029e573d6000803e3d6000fd5b509150816001600160a01b031663c4d66de86102c26000546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b50505050816001600160a01b03167fb40b92c78b80aed539d9115cb84458be5e6cf0450738ae6c8645efd8e25975c2878787876040516103729493929190610744565b60405180910390a250949350505050565b6000846103d25760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f0000000000000000000000000000000000006044820152606401610169565b836000036104115760405162461bcd60e51b815260206004820152600c60248201526b64417070204944207a65726f60a01b6044820152606401610169565b60006104c98484604051610426929190610734565b6040519081900381209061043c6020820161066e565b601f1982820381018352601f9091011660408181527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602083015281018a9052606081018990526080015b60408051601f19818403018152908290526104ae92916020016107a5565b60405160208183030381529060405280519060200120610630565b905061052184846040516104de929190610734565b604051908190038120906104f46020820161067b565b601f1982820381018352601f909101166020818101604090815260008352516104909287929091016107d4565b9695505050505050565b610533610582565b6001600160a01b038116610576576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610169565b61057f816105c8565b50565b6000546001600160a01b0316331461011c576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610169565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061063d838330610644565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6115038061081883390190565b61041d80611d1b83390190565b6000806000806060858703121561069e57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156106c357600080fd5b8501601f810187136106d457600080fd5b803567ffffffffffffffff8111156106eb57600080fd5b8760208284010111156106fd57600080fd5b949793965060200194505050565b60006020828403121561071d57600080fd5b81356001600160a01b038116811461063d57600080fd5b8183823760009101908152919050565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b60005b8381101561079c578181015183820152602001610784565b50506000910152565b600083516107b7818460208801610781565b8351908301906107cb818360208801610781565b01949350505050565b6001600160a01b03831681526040602082015260008251806040840152610802816060850160208701610781565b601f01601f191691909101606001939250505056fe6101406040523060805234801561001557600080fd5b50604051611503380380611503833981016040819052610034916101bf565b6001600160a01b03831660c0819052604080516316b53a2760e11b81529051632d6a744e916004808201926020929091908290030181865afa15801561007e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a291906101f4565b6001600160a01b031660a05260e082905261010081905260408051602081018490520160408051601f198184030181529190528051602090910120610120526100e96100f1565b505050610216565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156101415760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101a05780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b80516001600160a01b03811681146101ba57600080fd5b919050565b6000806000606084860312156101d457600080fd5b6101dd846101a3565b925060208401519150604084015190509250925092565b60006020828403121561020657600080fd5b61020f826101a3565b9392505050565b60805160a05160c05160e051610100516101205161127461028f600039600061055d0152600081816103c00152610704015260006102f801526000818161047d015261074301526000818161018c015281816105920152610672015260008181610a5601528181610a7f0152610c0201526112746000f3fe6080604052600436106101755760003560e01c8063868fa88c116100cb578063b5ab58dc1161007f578063ce7ebd6d11610059578063ce7ebd6d1461046b578063f2fde38b1461049f578063feaf968c146104bf57600080fd5b8063b5ab58dc1461042b578063b633620c1461042b578063c4d66de81461044b57600080fd5b80639a6fc8f5116100b05780639a6fc8f5146103575780639de0eb04146103ae578063ad3cb1cc146103e257600080fd5b8063868fa88c146102e65780638da5cb5b1461031a57600080fd5b806354fd4d501161012d578063715018a611610107578063715018a6146102925780637284e416146102a75780638205bf6a146102d157600080fd5b806354fd4d501461023457806357de26a414610249578063668a0f021461027d57600080fd5b80634f1ef2861161015e5780634f1ef286146101e757806350d25bcd146101fc57806352d1902d1461021f57600080fd5b80632d6a744e1461017a578063313ce567146101cb575b600080fd5b34801561018657600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101d757600080fd5b50604051601281526020016101c2565b6101fa6101f536600461103f565b6104d4565b005b34801561020857600080fd5b506102116104f3565b6040519081526020016101c2565b34801561022b57600080fd5b50610211610506565b34801561024057600080fd5b50611331610211565b34801561025557600080fd5b5061025e610535565b60408051601b9390930b835263ffffffff9091166020830152016101c2565b34801561028957600080fd5b50610211610825565b34801561029e57600080fd5b506101fa610840565b3480156102b357600080fd5b506040805160208101909152600081525b6040516101c2919061112d565b3480156102dd57600080fd5b50610211610854565b3480156102f257600080fd5b506102117f000000000000000000000000000000000000000000000000000000000000000081565b34801561032657600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166101ae565b34801561036357600080fd5b50610377610372366004611160565b61086a565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016101c2565b3480156103ba57600080fd5b506102117f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ee57600080fd5b506102c46040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b34801561043757600080fd5b5061021161044636600461118c565b610825565b34801561045757600080fd5b506101fa6104663660046111a5565b61088b565b34801561047757600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ab57600080fd5b506101fa6104ba3660046111a5565b6109c8565b3480156104cb57600080fd5b50610377610a24565b6104dc610a4b565b6104e582610b02565b6104ef8282610b0a565b5050565b60006104fd610535565b50601b0b919050565b6000610510610bf7565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040517f472c22f10000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063472c22f190602401602060405180830381865afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd91906111c0565b905080610636576040517f8086c76400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f67a7cfb70000000000000000000000000000000000000000000000000000000081526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906367a7cfb7906024016040805180830381865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc91906111d9565b6040517f91526c360000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015260248101869052919350915060009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906391526c36906044016040805180830381865afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad91906111d9565b915091508263ffffffff168163ffffffff1611156107d157909550935084846107dc565b838380975081985050505b8563ffffffff1660000361081c576040517f2bb59f0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050509091565b6000604051631fc30cb960e01b815260040160405180910390fd5b610848610c40565b6108526000610cb4565b565b600061085e610535565b63ffffffff1692915050565b6000806000806000604051631fc30cb960e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156108d65750825b905060008267ffffffffffffffff1660011480156108f35750303b155b905081158015610901575080155b15610938576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561096c57845468ff00000000000000001916680100000000000000001785555b61097586610d32565b83156109c057845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6109d0610c40565b6001600160a01b038116610a18576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b610a2181610cb4565b50565b600080808080610a32610535565b9596601b9190910b9563ffffffff169450849350909150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610ae457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ad87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b156108525760405163703e46dd60e11b815260040160405180910390fd5b610a21610c40565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b64575060408051601f3d908101601f19168201909252610b61918101906111c0565b60015b610b8c57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a0f565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610be8576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401610a0f565b610bf28383610d43565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108525760405163703e46dd60e11b815260040160405180910390fd5b33610c727f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610852576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610a0f565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b610d3a610d99565b610a2181610e00565b610d4c82610e08565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115610d9157610bf28282610e8c565b6104ef610f02565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16610852576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109d0610d99565b806001600160a01b03163b600003610e3e57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a0f565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051610ea99190611222565b600060405180830381855af49150503d8060008114610ee4576040519150601f19603f3d011682016040523d82523d6000602084013e610ee9565b606091505b5091509150610ef9858383610f3a565b95945050505050565b3415610852576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082610f4f57610f4a82610fb2565b610fab565b8151158015610f6657506001600160a01b0384163b155b15610fa8576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610a0f565b50805b9392505050565b805115610fc25780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80356001600160a01b038116811461100b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561105257600080fd5b61105b83610ff4565b9150602083013567ffffffffffffffff81111561107757600080fd5b8301601f8101851361108857600080fd5b803567ffffffffffffffff8111156110a2576110a2611010565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156110d1576110d1611010565b6040528181528282016020018710156110e957600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b8381101561112457818101518382015260200161110c565b50506000910152565b602081526000825180602084015261114c816040850160208701611109565b601f01601f19169190910160400192915050565b60006020828403121561117257600080fd5b813569ffffffffffffffffffff81168114610fab57600080fd5b60006020828403121561119e57600080fd5b5035919050565b6000602082840312156111b757600080fd5b610fab82610ff4565b6000602082840312156111d257600080fd5b5051919050565b600080604083850312156111ec57600080fd5b825180601b0b81146111fd57600080fd5b602084015190925063ffffffff8116811461121757600080fd5b809150509250929050565b60008251611234818460208701611109565b919091019291505056fea26469706673582212200ce1fb76af7a7f07e054a40f569323f46509052cccbd884ed6811664ec0b0ec164736f6c634300081b0033608060405260405161041d38038061041d83398101604081905261002291610268565b61002c8282610033565b5050610358565b61003c82610092565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561008657610081828261010e565b505050565b61008e610185565b5050565b806001600160a01b03163b6000036100cd57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161012b919061033c565b600060405180830381855af49150503d8060008114610166576040519150601f19603f3d011682016040523d82523d6000602084013e61016b565b606091505b50909250905061017c8583836101a6565b95945050505050565b34156101a45760405163b398979f60e01b815260040160405180910390fd5b565b6060826101bb576101b682610205565b6101fe565b81511580156101d257506001600160a01b0384163b155b156101fb57604051639996b31560e01b81526001600160a01b03851660048201526024016100c4565b50805b9392505050565b8051156102155780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60005b8381101561025f578181015183820152602001610247565b50506000910152565b6000806040838503121561027b57600080fd5b82516001600160a01b038116811461029257600080fd5b60208401519092506001600160401b038111156102ae57600080fd5b8301601f810185136102bf57600080fd5b80516001600160401b038111156102d8576102d861022e565b604051601f8201601f19908116603f011681016001600160401b03811182821017156103065761030661022e565b60405281815282820160200187101561031e57600080fd5b61032f826020830160208601610244565b8093505050509250929050565b6000825161034e818460208701610244565b9190910192915050565b60b7806103666000396000f3fe6080604052600a600c565b005b60186014601a565b605e565b565b600060597f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e808015607c573d6000f35b3d6000fdfea2646970667358221220105a39e5344dce7a120ffb84aa65102e325f7cbbc088cef866e9f0a2b2bc33c964736f6c634300081b0033a2646970667358221220527f9301ed8ca010207313bfc1761e64088affd67a1cbfdff9f781c351ee7b7564736f6c634300081b0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "computeApi3ReaderProxyV1Address(bytes32,uint256,bytes)": {
        "params": {
          "dapiName": "dAPI name as a bytes32 string",
          "dappId": "dApp ID",
          "metadata": "Metadata"
        },
        "returns": {
          "proxy": "Proxy address"
        }
      },
      "constructor": {
        "params": {
          "api3ServerV1OevExtension_": "Api3ServerV1OevExtension contract address",
          "initialOwner": "Initial owner"
        }
      },
      "deployApi3ReaderProxyV1(bytes32,uint256,bytes)": {
        "details": "As noted in Api3ReaderProxyV1, an implementation is deployed for each proxy to be able to use immutable variables",
        "params": {
          "dapiName": "dAPI name as a bytes32 string",
          "dappId": "dApp ID",
          "metadata": "Metadata"
        },
        "returns": {
          "proxy": "Proxy address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Factory contract that deploys Api3ReaderProxyV1 implementations and their upgradeable proxies",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "api3ServerV1OevExtension()": {
        "notice": "Api3ServerV1OevExtension contract address"
      },
      "computeApi3ReaderProxyV1Address(bytes32,uint256,bytes)": {
        "notice": "Computes the address of the Api3ReaderProxyV1"
      },
      "deployApi3ReaderProxyV1(bytes32,uint256,bytes)": {
        "notice": "Deterministically deploys the Api3ReaderProxyV1"
      }
    },
    "notice": "The owner of this contract at the time that it deploys a proxy is set as the owner of the proxy, which is allowed to upgrade it",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13488,
        "contract": "contracts/api3-server-v1/proxies/Api3ReaderProxyV1Factory.sol:Api3ReaderProxyV1Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
