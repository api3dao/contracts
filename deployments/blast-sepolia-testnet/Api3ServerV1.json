{
  "address": "0x709944a48cAf83535e43471680fDA4905FB3920a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminRoleDescription",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SetDapiName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconSetWithBeacons",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconWithSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "updateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedOevProxyBeaconSetWithSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "updateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedOevProxyBeaconWithSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oevProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oevBeneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrew",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAPI_NAME_SETTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRoleDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "containsBytecode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "dapiNameHashToDataFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dapiNameSetterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "dapiNameToDataFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "dataFeeds",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockBasefee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oevProxyToBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "oevProxyToIdToDataFeed",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiNameHash",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithDapiNameHash",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiNameHash",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithDapiNameHashAsOevProxy",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithId",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithIdAsOevProxy",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "setDapiName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "tryMulticall",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "beaconIds",
          "type": "bytes32[]"
        }
      ],
      "name": "updateBeaconSetWithBeacons",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "updateBeaconWithSignedData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oevProxy",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "updateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "packedOevUpdateSignatures",
          "type": "bytes[]"
        }
      ],
      "name": "updateOevProxyDataFeedWithSignedData",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oevProxy",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x235d34ca38705c3fbc776166d40834aec72120ad58d813af2c52e9f35e4f52fc",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "2961690",
    "logsBloom": "0x
    "blockHash": "0xae955b7dbd00c459ce9a46d953e5a8f054637f047b461b9bf05a1bc7fbe0657e",
    "transactionHash": "0x235d34ca38705c3fbc776166d40834aec72120ad58d813af2c52e9f35e4f52fc",
    "logs": [],
    "blockNumber": 1693147,
    "cumulativeGasUsed": "3173307",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcD7Df573B0F0bb4F2f8dFFF6650cDe8C77431730",
    "Api3ServerV1 admin",
    "0x81bc85f329cDB28936FbB239f734AE495121F9A6"
  ],
  "numDeployments": 1,
  "solcInputHash": "9a9784f0166e92dcfa54df2d2c909051",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminRoleDescription\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SetDapiName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconSetWithBeacons\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconWithSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"updateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedOevProxyBeaconSetWithSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"updateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedOevProxyBeaconWithSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oevProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oevBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAPI_NAME_SETTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRoleDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"containsBytecode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dapiNameHashToDataFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dapiNameSetterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"dapiNameToDataFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"dataFeeds\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oevProxyToBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"oevProxyToIdToDataFeed\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiNameHash\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithDapiNameHash\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiNameHash\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithDapiNameHashAsOevProxy\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithId\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithIdAsOevProxy\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"setDapiName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"tryMulticall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"beaconIds\",\"type\":\"bytes32[]\"}],\"name\":\"updateBeaconSetWithBeacons\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"updateBeaconWithSignedData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oevProxy\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"updateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"packedOevUpdateSignatures\",\"type\":\"bytes[]\"}],\"name\":\"updateOevProxyDataFeedWithSignedData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oevProxy\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_accessControlRegistry\":\"AccessControlRegistry contract address\",\"_adminRoleDescription\":\"Admin role description\",\"_manager\":\"Manager address\"}},\"containsBytecode(address)\":{\"details\":\"An account not containing any bytecode does not indicate that it is an EOA or it will not contain any bytecode in the future. Contract construction and `SELFDESTRUCT` updates the bytecode at the end of the transaction.\",\"returns\":{\"_0\":\"If the account contains bytecode\"}},\"dapiNameToDataFeedId(bytes32)\":{\"params\":{\"dapiName\":\"dAPI name\"},\"returns\":{\"_0\":\"Data feed ID\"}},\"getBalance(address)\":{\"params\":{\"account\":\"Account address\"},\"returns\":{\"_0\":\"Account balance\"}},\"getBlockBasefee()\":{\"returns\":{\"_0\":\"Current block basefee\"}},\"getBlockNumber()\":{\"returns\":{\"_0\":\"Current block number\"}},\"getBlockTimestamp()\":{\"returns\":{\"_0\":\"Current block timestamp\"}},\"getChainId()\":{\"returns\":{\"_0\":\"Chain ID\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\"}},\"readDataFeedWithDapiNameHash(bytes32)\":{\"params\":{\"dapiNameHash\":\"dAPI name hash\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"readDataFeedWithDapiNameHashAsOevProxy(bytes32)\":{\"params\":{\"dapiNameHash\":\"dAPI name hash\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"readDataFeedWithId(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"readDataFeedWithIdAsOevProxy(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"setDapiName(bytes32,bytes32)\":{\"details\":\"While a data feed ID refers to a specific Beacon or Beacon set, dAPI names provide a more abstract interface for convenience. This means a dAPI name that was pointing to a Beacon can be pointed to a Beacon set, then another Beacon set, etc.\",\"params\":{\"dapiName\":\"Human-readable dAPI name\",\"dataFeedId\":\"Data feed ID the dAPI name will point to\"}},\"tryMulticall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\",\"successes\":\"Array of success conditions of batched calls\"}},\"updateBeaconSetWithBeacons(bytes32[])\":{\"details\":\"As an oddity, this function still works if some of the IDs in `beaconIds` belong to Beacon sets rather than Beacons. This can be used to implement hierarchical Beacon sets.\",\"params\":{\"beaconIds\":\"Beacon IDs\"},\"returns\":{\"beaconSetId\":\"Beacon set ID\"}},\"updateBeaconWithSignedData(address,bytes32,uint256,bytes,bytes)\":{\"details\":\"The signed data here is intentionally very general for practical reasons. It is less demanding on the signer to have data signed once and use that everywhere.\",\"params\":{\"airnode\":\"Airnode address\",\"data\":\"Update data (an `int256` encoded in contract ABI)\",\"signature\":\"Template ID, timestamp and the update data signed by the Airnode\",\"templateId\":\"Template ID\",\"timestamp\":\"Signature timestamp\"},\"returns\":{\"beaconId\":\"Updated Beacon ID\"}},\"updateOevProxyDataFeedWithSignedData(address,bytes32,bytes32,uint256,bytes,bytes[])\":{\"details\":\"For when the data feed being updated is a Beacon set, an absolute majority of the Airnodes that power the respective Beacons must sign the aggregated value and timestamp. While doing so, the Airnodes should refer to data signed to update an absolute majority of the respective Beacons. The Airnodes should require the data to be fresh enough (e.g., at most 2 minutes-old), and tightly distributed around the resulting aggregation (e.g., within 1% deviation), and reject to provide an OEV proxy data feed update signature if these are not satisfied.\",\"params\":{\"data\":\"Update data (an `int256` encoded in contract ABI)\",\"dataFeedId\":\"Data feed ID\",\"oevProxy\":\"OEV proxy that reads the data feed\",\"packedOevUpdateSignatures\":\"Packed OEV update signatures, which include the Airnode address, template ID and these signed with the OEV update hash\",\"timestamp\":\"Signature timestamp\",\"updateId\":\"Update ID\"}},\"withdraw(address)\":{\"details\":\"This does not require the caller to be the beneficiary because we expect that in most cases, the OEV beneficiary will be a contract that will not be able to make arbitrary calls. Our choice can be worked around by implementing a beneficiary proxy.\",\"params\":{\"oevProxy\":\"OEV proxy\"}}},\"title\":\"First version of the contract that API3 uses to serve data feeds\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DAPI_NAME_SETTER_ROLE_DESCRIPTION()\":{\"notice\":\"dAPI name setter role description\"},\"accessControlRegistry()\":{\"notice\":\"AccessControlRegistry contract address\"},\"adminRole()\":{\"notice\":\"Admin role\"},\"adminRoleDescription()\":{\"notice\":\"Admin role description\"},\"containsBytecode(address)\":{\"notice\":\"Returns if the account contains bytecode\"},\"dapiNameHashToDataFeedId(bytes32)\":{\"notice\":\"dAPI name hash mapped to the data feed ID\"},\"dapiNameSetterRole()\":{\"notice\":\"dAPI name setter role\"},\"dapiNameToDataFeedId(bytes32)\":{\"notice\":\"Returns the data feed ID the dAPI name is set to\"},\"getBalance(address)\":{\"notice\":\"Returns the account balance\"},\"getBlockBasefee()\":{\"notice\":\"Returns the current block basefee\"},\"getBlockNumber()\":{\"notice\":\"Returns the current block number\"},\"getBlockTimestamp()\":{\"notice\":\"Returns the current block timestamp\"},\"getChainId()\":{\"notice\":\"Returns the chain ID\"},\"manager()\":{\"notice\":\"Address of the manager that manages the related AccessControlRegistry roles\"},\"multicall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts\"},\"oevProxyToBalance(address)\":{\"notice\":\"Accumulated OEV auction proceeds for the specific proxy\"},\"readDataFeedWithDapiNameHash(bytes32)\":{\"notice\":\"Reads the data feed with dAPI name hash\"},\"readDataFeedWithDapiNameHashAsOevProxy(bytes32)\":{\"notice\":\"Reads the data feed as the OEV proxy with dAPI name hash\"},\"readDataFeedWithId(bytes32)\":{\"notice\":\"Reads the data feed with ID\"},\"readDataFeedWithIdAsOevProxy(bytes32)\":{\"notice\":\"Reads the data feed as the OEV proxy with ID\"},\"setDapiName(bytes32,bytes32)\":{\"notice\":\"Sets the data feed ID the dAPI name points to\"},\"tryMulticall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract but does not revert if any of the batched calls reverts\"},\"updateBeaconSetWithBeacons(bytes32[])\":{\"notice\":\"Updates the Beacon set using the current values of its Beacons\"},\"updateBeaconWithSignedData(address,bytes32,uint256,bytes,bytes)\":{\"notice\":\"Updates a Beacon using data signed by the Airnode\"},\"updateOevProxyDataFeedWithSignedData(address,bytes32,bytes32,uint256,bytes,bytes[])\":{\"notice\":\"Updates a data feed that the OEV proxy reads using the aggregation signed by the absolute majority of the respective Airnodes for the specific bid\"},\"withdraw(address)\":{\"notice\":\"Withdraws the balance of the OEV proxy to the respective beneficiary account\"}},\"notice\":\"Api3ServerV1 serves data feeds in the form of Beacons, Beacon sets, dAPIs, with optional OEV support for all of these. The base Beacons are only updateable using signed data, and the Beacon sets are updateable based on the Beacons, optionally using PSP. OEV proxy Beacons and Beacon sets are updateable using OEV-signed data. Api3ServerV1 does not support Beacons to be updated using RRP or PSP.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/api3-server-v1/Api3ServerV1.sol\":\"Api3ServerV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/access/AccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/SelfMulticall.sol\\\";\\nimport \\\"./RoleDeriver.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistry.sol\\\";\\n\\n/// @title Contract to be inherited by contracts whose adminship functionality\\n/// will be implemented using AccessControlRegistry\\ncontract AccessControlRegistryAdminned is\\n    SelfMulticall,\\n    RoleDeriver,\\n    IAccessControlRegistryAdminned\\n{\\n    /// @notice AccessControlRegistry contract address\\n    address public immutable override accessControlRegistry;\\n\\n    /// @notice Admin role description\\n    string public override adminRoleDescription;\\n\\n    bytes32 internal immutable adminRoleDescriptionHash;\\n\\n    /// @dev Contracts deployed with the same admin role descriptions will have\\n    /// the same roles, meaning that granting an account a role will authorize\\n    /// it in multiple contracts. Unless you want your deployed contract to\\n    /// share the role configuration of another contract, use a unique admin\\n    /// role description.\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) {\\n        require(_accessControlRegistry != address(0), \\\"ACR address zero\\\");\\n        require(\\n            bytes(_adminRoleDescription).length > 0,\\n            \\\"Admin role description empty\\\"\\n        );\\n        accessControlRegistry = _accessControlRegistry;\\n        adminRoleDescription = _adminRoleDescription;\\n        adminRoleDescriptionHash = keccak256(\\n            abi.encodePacked(_adminRoleDescription)\\n        );\\n    }\\n\\n    /// @notice Derives the admin role for the specific manager address\\n    /// @param manager Manager address\\n    /// @return adminRole Admin role\\n    function _deriveAdminRole(\\n        address manager\\n    ) internal view returns (bytes32 adminRole) {\\n        adminRole = _deriveRole(\\n            _deriveRootRole(manager),\\n            adminRoleDescriptionHash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x813755d99a9d8dd6298720da68fb5a6dd69329ea2dec91da1d09f715d4543c15\",\"license\":\"MIT\"},\"contracts/access/AccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\n\\n/// @title Contract to be inherited by contracts with manager whose adminship\\n/// functionality will be implemented using AccessControlRegistry\\n/// @notice The manager address here is expected to belong to an\\n/// AccessControlRegistry user that is a multisig/DAO\\ncontract AccessControlRegistryAdminnedWithManager is\\n    AccessControlRegistryAdminned,\\n    IAccessControlRegistryAdminnedWithManager\\n{\\n    /// @notice Address of the manager that manages the related\\n    /// AccessControlRegistry roles\\n    /// @dev The mutability of the manager role can be implemented by\\n    /// designating an OwnableCallForwarder contract as the manager. The\\n    /// ownership of this contract can then be transferred, effectively\\n    /// transferring managership.\\n    address public immutable override manager;\\n\\n    /// @notice Admin role\\n    /// @dev Since `manager` is immutable, so is `adminRole`\\n    bytes32 public immutable override adminRole;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager\\n    )\\n        AccessControlRegistryAdminned(\\n            _accessControlRegistry,\\n            _adminRoleDescription\\n        )\\n    {\\n        require(_manager != address(0), \\\"Manager address zero\\\");\\n        manager = _manager;\\n        adminRole = _deriveAdminRole(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xbe5df884327dd7d4e236c105b6ef52cc6db20b452f4cdbe6c50fa506ed66cace\",\"license\":\"MIT\"},\"contracts/access/RoleDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will derive\\n/// AccessControlRegistry roles\\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\\n/// derive roles, it should inherit this contract instead of re-implementing\\n/// the logic\\ncontract RoleDeriver {\\n    /// @notice Derives the root role of the manager\\n    /// @param manager Manager address\\n    /// @return rootRole Root role\\n    function _deriveRootRole(\\n        address manager\\n    ) internal pure returns (bytes32 rootRole) {\\n        rootRole = keccak256(abi.encodePacked(manager));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param description Human-readable description of the role\\n    /// @return role Role\\n    function _deriveRole(\\n        bytes32 adminRole,\\n        string memory description\\n    ) internal pure returns (bytes32 role) {\\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description hash\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param descriptionHash Hash of the human-readable description of the\\n    /// role\\n    /// @return role Role\\n    function _deriveRole(\\n        bytes32 adminRole,\\n        bytes32 descriptionHash\\n    ) internal pure returns (bytes32 role) {\\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\\n    }\\n}\\n\",\"keccak256\":\"0x488adb3cb7031415d4a195230753a0ac8f9f610e6db7a571529a350e29c97ed6\",\"license\":\"MIT\"},\"contracts/access/interfaces/IAccessControlRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../vendor/@openzeppelin/contracts@4.8.2/access/IAccessControl.sol\\\";\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistry is IAccessControl, ISelfMulticall {\\n    event InitializedManager(\\n        bytes32 indexed rootRole,\\n        address indexed manager,\\n        address sender\\n    );\\n\\n    event InitializedRole(\\n        bytes32 indexed role,\\n        bytes32 indexed adminRole,\\n        string description,\\n        address sender\\n    );\\n\\n    function initializeManager(address manager) external;\\n\\n    function initializeRoleAndGrantToSender(\\n        bytes32 adminRole,\\n        string calldata description\\n    ) external returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0x87066db894a24118df39a557d00c0a6529c39196011c03f809ca8cce1644e027\",\"license\":\"MIT\"},\"contracts/access/interfaces/IAccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is ISelfMulticall {\\n    function accessControlRegistry() external view returns (address);\\n\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd71aae2566c019a9b2da5e1ec51421a62898495fa6fd08e2cc39451511dda334\",\"license\":\"MIT\"},\"contracts/access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IAccessControlRegistryAdminnedWithManager is\\n    IAccessControlRegistryAdminned\\n{\\n    function manager() external view returns (address);\\n\\n    function adminRole() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x8a8e1756fca81175305755b7a311536132e88173f60b2ac0fdeef92a6236afc5\",\"license\":\"MIT\"},\"contracts/api3-server-v1/Api3ServerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./OevDapiServer.sol\\\";\\nimport \\\"./BeaconUpdatesWithSignedData.sol\\\";\\nimport \\\"./interfaces/IApi3ServerV1.sol\\\";\\n\\n/// @title First version of the contract that API3 uses to serve data feeds\\n/// @notice Api3ServerV1 serves data feeds in the form of Beacons, Beacon sets,\\n/// dAPIs, with optional OEV support for all of these.\\n/// The base Beacons are only updateable using signed data, and the Beacon sets\\n/// are updateable based on the Beacons, optionally using PSP. OEV proxy\\n/// Beacons and Beacon sets are updateable using OEV-signed data.\\n/// Api3ServerV1 does not support Beacons to be updated using RRP or PSP.\\ncontract Api3ServerV1 is\\n    OevDapiServer,\\n    BeaconUpdatesWithSignedData,\\n    IApi3ServerV1\\n{\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager\\n    ) OevDapiServer(_accessControlRegistry, _adminRoleDescription, _manager) {}\\n\\n    /// @notice Reads the data feed with ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        return _readDataFeedWithId(dataFeedId);\\n    }\\n\\n    /// @notice Reads the data feed with dAPI name hash\\n    /// @param dapiNameHash dAPI name hash\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithDapiNameHash(\\n        bytes32 dapiNameHash\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        return _readDataFeedWithDapiNameHash(dapiNameHash);\\n    }\\n\\n    /// @notice Reads the data feed as the OEV proxy with ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithIdAsOevProxy(\\n        bytes32 dataFeedId\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        return _readDataFeedWithIdAsOevProxy(dataFeedId);\\n    }\\n\\n    /// @notice Reads the data feed as the OEV proxy with dAPI name hash\\n    /// @param dapiNameHash dAPI name hash\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithDapiNameHashAsOevProxy(\\n        bytes32 dapiNameHash\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        return _readDataFeedWithDapiNameHashAsOevProxy(dapiNameHash);\\n    }\\n\\n    function dataFeeds(\\n        bytes32 dataFeedId\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n    }\\n\\n    function oevProxyToIdToDataFeed(\\n        address proxy,\\n        bytes32 dataFeedId\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        DataFeed storage dataFeed = _oevProxyToIdToDataFeed[proxy][dataFeedId];\\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xa9100269a781dbc267a1de630d333b475efc13cc87bf906de23c21a972a03f41\",\"license\":\"MIT\"},\"contracts/api3-server-v1/BeaconUpdatesWithSignedData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./DataFeedServer.sol\\\";\\nimport \\\"./interfaces/IBeaconUpdatesWithSignedData.sol\\\";\\nimport \\\"../vendor/@openzeppelin/contracts@4.8.2/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title Contract that updates Beacons using signed data\\ncontract BeaconUpdatesWithSignedData is\\n    DataFeedServer,\\n    IBeaconUpdatesWithSignedData\\n{\\n    using ECDSA for bytes32;\\n\\n    /// @notice Updates a Beacon using data signed by the Airnode\\n    /// @dev The signed data here is intentionally very general for practical\\n    /// reasons. It is less demanding on the signer to have data signed once\\n    /// and use that everywhere.\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @param timestamp Signature timestamp\\n    /// @param data Update data (an `int256` encoded in contract ABI)\\n    /// @param signature Template ID, timestamp and the update data signed by\\n    /// the Airnode\\n    /// @return beaconId Updated Beacon ID\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 templateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external override returns (bytes32 beaconId) {\\n        require(\\n            (\\n                keccak256(abi.encodePacked(templateId, timestamp, data))\\n                    .toEthSignedMessageHash()\\n            ).recover(signature) == airnode,\\n            \\\"Signature mismatch\\\"\\n        );\\n        beaconId = deriveBeaconId(airnode, templateId);\\n        int224 updatedValue = processBeaconUpdate(beaconId, timestamp, data);\\n        emit UpdatedBeaconWithSignedData(\\n            beaconId,\\n            updatedValue,\\n            uint32(timestamp)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc5caacfa234d89c20a1e4493acbe6256c684558deb5a57a25cfb6314e99895be\",\"license\":\"MIT\"},\"contracts/api3-server-v1/DapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../access/AccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"./DataFeedServer.sol\\\";\\nimport \\\"./interfaces/IDapiServer.sol\\\";\\n\\n/// @title Contract that serves dAPIs mapped to Beacons and Beacon sets\\n/// @notice Beacons and Beacon sets are addressed by immutable IDs. Although\\n/// this is trust-minimized, it requires users to manage the ID of the data\\n/// feed they are using. For when the user does not want to do this, dAPIs can\\n/// be used as an abstraction layer. By using a dAPI, the user delegates this\\n/// responsibility to dAPI management. It is important for dAPI management to\\n/// be restricted by consensus rules (by using a multisig or a DAO) and similar\\n/// trustless security mechanisms.\\ncontract DapiServer is\\n    AccessControlRegistryAdminnedWithManager,\\n    DataFeedServer,\\n    IDapiServer\\n{\\n    /// @notice dAPI name setter role description\\n    string public constant override DAPI_NAME_SETTER_ROLE_DESCRIPTION =\\n        \\\"dAPI name setter\\\";\\n\\n    /// @notice dAPI name setter role\\n    bytes32 public immutable override dapiNameSetterRole;\\n\\n    /// @notice dAPI name hash mapped to the data feed ID\\n    mapping(bytes32 => bytes32) public override dapiNameHashToDataFeedId;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager\\n    )\\n        AccessControlRegistryAdminnedWithManager(\\n            _accessControlRegistry,\\n            _adminRoleDescription,\\n            _manager\\n        )\\n    {\\n        dapiNameSetterRole = _deriveRole(\\n            _deriveAdminRole(manager),\\n            DAPI_NAME_SETTER_ROLE_DESCRIPTION\\n        );\\n    }\\n\\n    /// @notice Sets the data feed ID the dAPI name points to\\n    /// @dev While a data feed ID refers to a specific Beacon or Beacon set,\\n    /// dAPI names provide a more abstract interface for convenience. This\\n    /// means a dAPI name that was pointing to a Beacon can be pointed to a\\n    /// Beacon set, then another Beacon set, etc.\\n    /// @param dapiName Human-readable dAPI name\\n    /// @param dataFeedId Data feed ID the dAPI name will point to\\n    function setDapiName(\\n        bytes32 dapiName,\\n        bytes32 dataFeedId\\n    ) external override {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        require(\\n            msg.sender == manager ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    dapiNameSetterRole,\\n                    msg.sender\\n                ),\\n            \\\"Sender cannot set dAPI name\\\"\\n        );\\n        dapiNameHashToDataFeedId[\\n            keccak256(abi.encodePacked(dapiName))\\n        ] = dataFeedId;\\n        emit SetDapiName(dataFeedId, dapiName, msg.sender);\\n    }\\n\\n    /// @notice Returns the data feed ID the dAPI name is set to\\n    /// @param dapiName dAPI name\\n    /// @return Data feed ID\\n    function dapiNameToDataFeedId(\\n        bytes32 dapiName\\n    ) external view override returns (bytes32) {\\n        return dapiNameHashToDataFeedId[keccak256(abi.encodePacked(dapiName))];\\n    }\\n\\n    /// @notice Reads the data feed with dAPI name hash\\n    /// @param dapiNameHash dAPI name hash\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function _readDataFeedWithDapiNameHash(\\n        bytes32 dapiNameHash\\n    ) internal view returns (int224 value, uint32 timestamp) {\\n        bytes32 dataFeedId = dapiNameHashToDataFeedId[dapiNameHash];\\n        require(dataFeedId != bytes32(0), \\\"dAPI name not set\\\");\\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n        require(timestamp > 0, \\\"Data feed not initialized\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x20e4e9b35f34df76875cc2cdc1524f98aaf7002022ea248d5dd7b8c8640716f4\",\"license\":\"MIT\"},\"contracts/api3-server-v1/DataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../utils/ExtendedSelfMulticall.sol\\\";\\nimport \\\"./aggregation/Median.sol\\\";\\nimport \\\"./interfaces/IDataFeedServer.sol\\\";\\nimport \\\"../vendor/@openzeppelin/contracts@4.8.2/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title Contract that serves Beacons and Beacon sets\\n/// @notice A Beacon is a live data feed addressed by an ID, which is derived\\n/// from an Airnode address and a template ID. This is suitable where the more\\n/// recent data point is always more favorable, e.g., in the context of an\\n/// asset price data feed. Beacons can also be seen as one-Airnode data feeds\\n/// that can be used individually or combined to build Beacon sets.\\ncontract DataFeedServer is ExtendedSelfMulticall, Median, IDataFeedServer {\\n    using ECDSA for bytes32;\\n\\n    // Airnodes serve their fulfillment data along with timestamps. This\\n    // contract casts the reported data to `int224` and the timestamp to\\n    // `uint32`, which works until year 2106.\\n    struct DataFeed {\\n        int224 value;\\n        uint32 timestamp;\\n    }\\n\\n    /// @notice Data feed with ID\\n    mapping(bytes32 => DataFeed) internal _dataFeeds;\\n\\n    /// @dev Reverts if the timestamp is from more than 1 hour in the future\\n    modifier onlyValidTimestamp(uint256 timestamp) virtual {\\n        unchecked {\\n            require(\\n                timestamp < block.timestamp + 1 hours,\\n                \\\"Timestamp not valid\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Updates the Beacon set using the current values of its Beacons\\n    /// @dev As an oddity, this function still works if some of the IDs in\\n    /// `beaconIds` belong to Beacon sets rather than Beacons. This can be used\\n    /// to implement hierarchical Beacon sets.\\n    /// @param beaconIds Beacon IDs\\n    /// @return beaconSetId Beacon set ID\\n    function updateBeaconSetWithBeacons(\\n        bytes32[] memory beaconIds\\n    ) public override returns (bytes32 beaconSetId) {\\n        (int224 updatedValue, uint32 updatedTimestamp) = aggregateBeacons(\\n            beaconIds\\n        );\\n        beaconSetId = deriveBeaconSetId(beaconIds);\\n        DataFeed storage beaconSet = _dataFeeds[beaconSetId];\\n        if (beaconSet.timestamp == updatedTimestamp) {\\n            require(\\n                beaconSet.value != updatedValue,\\n                \\\"Does not update Beacon set\\\"\\n            );\\n        }\\n        _dataFeeds[beaconSetId] = DataFeed({\\n            value: updatedValue,\\n            timestamp: updatedTimestamp\\n        });\\n        emit UpdatedBeaconSetWithBeacons(\\n            beaconSetId,\\n            updatedValue,\\n            updatedTimestamp\\n        );\\n    }\\n\\n    /// @notice Reads the data feed with ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function _readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) internal view returns (int224 value, uint32 timestamp) {\\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n        require(timestamp > 0, \\\"Data feed not initialized\\\");\\n    }\\n\\n    /// @notice Derives the Beacon ID from the Airnode address and template ID\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @return beaconId Beacon ID\\n    function deriveBeaconId(\\n        address airnode,\\n        bytes32 templateId\\n    ) internal pure returns (bytes32 beaconId) {\\n        beaconId = keccak256(abi.encodePacked(airnode, templateId));\\n    }\\n\\n    /// @notice Derives the Beacon set ID from the Beacon IDs\\n    /// @dev Notice that `abi.encode()` is used over `abi.encodePacked()`\\n    /// @param beaconIds Beacon IDs\\n    /// @return beaconSetId Beacon set ID\\n    function deriveBeaconSetId(\\n        bytes32[] memory beaconIds\\n    ) internal pure returns (bytes32 beaconSetId) {\\n        beaconSetId = keccak256(abi.encode(beaconIds));\\n    }\\n\\n    /// @notice Called privately to process the Beacon update\\n    /// @param beaconId Beacon ID\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @return updatedBeaconValue Updated Beacon value\\n    function processBeaconUpdate(\\n        bytes32 beaconId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    )\\n        internal\\n        onlyValidTimestamp(timestamp)\\n        returns (int224 updatedBeaconValue)\\n    {\\n        updatedBeaconValue = decodeFulfillmentData(data);\\n        require(\\n            timestamp > _dataFeeds[beaconId].timestamp,\\n            \\\"Does not update timestamp\\\"\\n        );\\n        _dataFeeds[beaconId] = DataFeed({\\n            value: updatedBeaconValue,\\n            timestamp: uint32(timestamp)\\n        });\\n    }\\n\\n    /// @notice Called privately to decode the fulfillment data\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @return decodedData Decoded fulfillment data\\n    function decodeFulfillmentData(\\n        bytes memory data\\n    ) internal pure returns (int224) {\\n        require(data.length == 32, \\\"Data length not correct\\\");\\n        int256 decodedData = abi.decode(data, (int256));\\n        require(\\n            decodedData >= type(int224).min && decodedData <= type(int224).max,\\n            \\\"Value typecasting error\\\"\\n        );\\n        return int224(decodedData);\\n    }\\n\\n    /// @notice Called privately to aggregate the Beacons and return the result\\n    /// @param beaconIds Beacon IDs\\n    /// @return value Aggregation value\\n    /// @return timestamp Aggregation timestamp\\n    function aggregateBeacons(\\n        bytes32[] memory beaconIds\\n    ) internal view returns (int224 value, uint32 timestamp) {\\n        uint256 beaconCount = beaconIds.length;\\n        require(beaconCount > 1, \\\"Specified less than two Beacons\\\");\\n        int256[] memory values = new int256[](beaconCount);\\n        int256[] memory timestamps = new int256[](beaconCount);\\n        for (uint256 ind = 0; ind < beaconCount; ) {\\n            DataFeed storage dataFeed = _dataFeeds[beaconIds[ind]];\\n            values[ind] = dataFeed.value;\\n            timestamps[ind] = int256(uint256(dataFeed.timestamp));\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n        value = int224(median(values));\\n        timestamp = uint32(uint256(median(timestamps)));\\n    }\\n}\\n\",\"keccak256\":\"0xff3172da608fcaa59f17557ff06f8355a90d8cf87c3b3a91b8405ec122a064e3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/OevDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./OevDataFeedServer.sol\\\";\\nimport \\\"./DapiServer.sol\\\";\\nimport \\\"./interfaces/IOevDapiServer.sol\\\";\\n\\n/// @title Contract that serves OEV dAPIs\\ncontract OevDapiServer is OevDataFeedServer, DapiServer, IOevDapiServer {\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager\\n    ) DapiServer(_accessControlRegistry, _adminRoleDescription, _manager) {}\\n\\n    /// @notice Reads the data feed as the OEV proxy with dAPI name hash\\n    /// @param dapiNameHash dAPI name hash\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function _readDataFeedWithDapiNameHashAsOevProxy(\\n        bytes32 dapiNameHash\\n    ) internal view returns (int224 value, uint32 timestamp) {\\n        bytes32 dataFeedId = dapiNameHashToDataFeedId[dapiNameHash];\\n        require(dataFeedId != bytes32(0), \\\"dAPI name not set\\\");\\n        DataFeed storage oevDataFeed = _oevProxyToIdToDataFeed[msg.sender][\\n            dataFeedId\\n        ];\\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\\n        if (oevDataFeed.timestamp > dataFeed.timestamp) {\\n            (value, timestamp) = (oevDataFeed.value, oevDataFeed.timestamp);\\n        } else {\\n            (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n        }\\n        require(timestamp > 0, \\\"Data feed not initialized\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7e506b1a9248563d4873159a40e5c2ce46ad0e24ad833d62610669a7dea8f137\",\"license\":\"MIT\"},\"contracts/api3-server-v1/OevDataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./DataFeedServer.sol\\\";\\nimport \\\"./interfaces/IOevDataFeedServer.sol\\\";\\nimport \\\"../vendor/@openzeppelin/contracts@4.8.2/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./proxies/interfaces/IOevProxy.sol\\\";\\n\\n/// @title Contract that serves OEV Beacons and Beacon sets\\n/// @notice OEV Beacons and Beacon sets can be updated by the winner of the\\n/// respective OEV auctions. The beneficiary can withdraw the proceeds from\\n/// this contract.\\ncontract OevDataFeedServer is DataFeedServer, IOevDataFeedServer {\\n    using ECDSA for bytes32;\\n\\n    /// @notice Data feed with ID specific to the OEV proxy\\n    /// @dev This implies that an update as a result of an OEV auction only\\n    /// affects contracts that read through the respective proxy that the\\n    /// auction was being held for\\n    mapping(address => mapping(bytes32 => DataFeed))\\n        internal _oevProxyToIdToDataFeed;\\n\\n    /// @notice Accumulated OEV auction proceeds for the specific proxy\\n    mapping(address => uint256) public override oevProxyToBalance;\\n\\n    /// @notice Updates a data feed that the OEV proxy reads using the\\n    /// aggregation signed by the absolute majority of the respective Airnodes\\n    /// for the specific bid\\n    /// @dev For when the data feed being updated is a Beacon set, an absolute\\n    /// majority of the Airnodes that power the respective Beacons must sign\\n    /// the aggregated value and timestamp. While doing so, the Airnodes should\\n    /// refer to data signed to update an absolute majority of the respective\\n    /// Beacons. The Airnodes should require the data to be fresh enough (e.g.,\\n    /// at most 2 minutes-old), and tightly distributed around the resulting\\n    /// aggregation (e.g., within 1% deviation), and reject to provide an OEV\\n    /// proxy data feed update signature if these are not satisfied.\\n    /// @param oevProxy OEV proxy that reads the data feed\\n    /// @param dataFeedId Data feed ID\\n    /// @param updateId Update ID\\n    /// @param timestamp Signature timestamp\\n    /// @param data Update data (an `int256` encoded in contract ABI)\\n    /// @param packedOevUpdateSignatures Packed OEV update signatures, which\\n    /// include the Airnode address, template ID and these signed with the OEV\\n    /// update hash\\n    function updateOevProxyDataFeedWithSignedData(\\n        address oevProxy,\\n        bytes32 dataFeedId,\\n        bytes32 updateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes[] calldata packedOevUpdateSignatures\\n    ) external payable override onlyValidTimestamp(timestamp) {\\n        require(\\n            timestamp > _oevProxyToIdToDataFeed[oevProxy][dataFeedId].timestamp,\\n            \\\"Does not update timestamp\\\"\\n        );\\n        bytes32 oevUpdateHash = keccak256(\\n            abi.encodePacked(\\n                block.chainid,\\n                address(this),\\n                oevProxy,\\n                dataFeedId,\\n                updateId,\\n                timestamp,\\n                data,\\n                msg.sender,\\n                msg.value\\n            )\\n        );\\n        int224 updatedValue = decodeFulfillmentData(data);\\n        uint32 updatedTimestamp = uint32(timestamp);\\n        uint256 beaconCount = packedOevUpdateSignatures.length;\\n        if (beaconCount > 1) {\\n            bytes32[] memory beaconIds = new bytes32[](beaconCount);\\n            uint256 validSignatureCount;\\n            for (uint256 ind = 0; ind < beaconCount; ) {\\n                bool signatureIsNotOmitted;\\n                (\\n                    signatureIsNotOmitted,\\n                    beaconIds[ind]\\n                ) = unpackAndValidateOevUpdateSignature(\\n                    oevUpdateHash,\\n                    packedOevUpdateSignatures[ind]\\n                );\\n                if (signatureIsNotOmitted) {\\n                    unchecked {\\n                        validSignatureCount++;\\n                    }\\n                }\\n                unchecked {\\n                    ind++;\\n                }\\n            }\\n            // \\\"Greater than or equal to\\\" is not enough because full control\\n            // of aggregation requires an absolute majority\\n            require(\\n                validSignatureCount > beaconCount / 2,\\n                \\\"Not enough signatures\\\"\\n            );\\n            require(\\n                dataFeedId == deriveBeaconSetId(beaconIds),\\n                \\\"Beacon set ID mismatch\\\"\\n            );\\n            emit UpdatedOevProxyBeaconSetWithSignedData(\\n                dataFeedId,\\n                oevProxy,\\n                updateId,\\n                updatedValue,\\n                updatedTimestamp\\n            );\\n        } else if (beaconCount == 1) {\\n            {\\n                (\\n                    bool signatureIsNotOmitted,\\n                    bytes32 beaconId\\n                ) = unpackAndValidateOevUpdateSignature(\\n                        oevUpdateHash,\\n                        packedOevUpdateSignatures[0]\\n                    );\\n                require(signatureIsNotOmitted, \\\"Missing signature\\\");\\n                require(dataFeedId == beaconId, \\\"Beacon ID mismatch\\\");\\n            }\\n            emit UpdatedOevProxyBeaconWithSignedData(\\n                dataFeedId,\\n                oevProxy,\\n                updateId,\\n                updatedValue,\\n                updatedTimestamp\\n            );\\n        } else {\\n            revert(\\\"Did not specify any Beacons\\\");\\n        }\\n        _oevProxyToIdToDataFeed[oevProxy][dataFeedId] = DataFeed({\\n            value: updatedValue,\\n            timestamp: updatedTimestamp\\n        });\\n        oevProxyToBalance[oevProxy] += msg.value;\\n    }\\n\\n    /// @notice Withdraws the balance of the OEV proxy to the respective\\n    /// beneficiary account\\n    /// @dev This does not require the caller to be the beneficiary because we\\n    /// expect that in most cases, the OEV beneficiary will be a contract that\\n    /// will not be able to make arbitrary calls. Our choice can be worked\\n    /// around by implementing a beneficiary proxy.\\n    /// @param oevProxy OEV proxy\\n    function withdraw(address oevProxy) external override {\\n        address oevBeneficiary = IOevProxy(oevProxy).oevBeneficiary();\\n        require(oevBeneficiary != address(0), \\\"Beneficiary address zero\\\");\\n        uint256 balance = oevProxyToBalance[oevProxy];\\n        require(balance != 0, \\\"OEV proxy balance zero\\\");\\n        oevProxyToBalance[oevProxy] = 0;\\n        emit Withdrew(oevProxy, oevBeneficiary, balance);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = oevBeneficiary.call{value: balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal reverted\\\");\\n    }\\n\\n    /// @notice Reads the data feed as the OEV proxy with ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function _readDataFeedWithIdAsOevProxy(\\n        bytes32 dataFeedId\\n    ) internal view returns (int224 value, uint32 timestamp) {\\n        DataFeed storage oevDataFeed = _oevProxyToIdToDataFeed[msg.sender][\\n            dataFeedId\\n        ];\\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\\n        if (oevDataFeed.timestamp > dataFeed.timestamp) {\\n            (value, timestamp) = (oevDataFeed.value, oevDataFeed.timestamp);\\n        } else {\\n            (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n        }\\n        require(timestamp > 0, \\\"Data feed not initialized\\\");\\n    }\\n\\n    /// @notice Called privately to unpack and validate the OEV update\\n    /// signature\\n    /// @param oevUpdateHash OEV update hash\\n    /// @param packedOevUpdateSignature Packed OEV update signature, which\\n    /// includes the Airnode address, template ID and these signed with the OEV\\n    /// update hash\\n    /// @return signatureIsNotOmitted If the signature is omitted in\\n    /// `packedOevUpdateSignature`\\n    /// @return beaconId Beacon ID\\n    function unpackAndValidateOevUpdateSignature(\\n        bytes32 oevUpdateHash,\\n        bytes calldata packedOevUpdateSignature\\n    ) private pure returns (bool signatureIsNotOmitted, bytes32 beaconId) {\\n        (address airnode, bytes32 templateId, bytes memory signature) = abi\\n            .decode(packedOevUpdateSignature, (address, bytes32, bytes));\\n        beaconId = deriveBeaconId(airnode, templateId);\\n        if (signature.length != 0) {\\n            require(\\n                (\\n                    keccak256(abi.encodePacked(oevUpdateHash, templateId))\\n                        .toEthSignedMessageHash()\\n                ).recover(signature) == airnode,\\n                \\\"Signature mismatch\\\"\\n            );\\n            signatureIsNotOmitted = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e8557b0ab232ac721adfedecedb5e182548e04f64794854330d6251d98c538b\",\"license\":\"MIT\"},\"contracts/api3-server-v1/aggregation/Median.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Sort.sol\\\";\\nimport \\\"./QuickSelect.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will calculate the median\\n/// of an array\\n/// @notice The operation will be in-place, i.e., the array provided as the\\n/// argument will be modified.\\ncontract Median is Sort, Quickselect {\\n    /// @notice Returns the median of the array\\n    /// @dev Uses an unrolled sorting implementation for shorter arrays and\\n    /// quickselect for longer arrays for gas cost efficiency\\n    /// @param array Array whose median is to be calculated\\n    /// @return Median of the array\\n    function median(int256[] memory array) internal pure returns (int256) {\\n        uint256 arrayLength = array.length;\\n        if (arrayLength <= MAX_SORT_LENGTH) {\\n            sort(array);\\n            if (arrayLength % 2 == 1) {\\n                return array[arrayLength / 2];\\n            } else {\\n                assert(arrayLength != 0);\\n                unchecked {\\n                    return\\n                        average(\\n                            array[arrayLength / 2 - 1],\\n                            array[arrayLength / 2]\\n                        );\\n                }\\n            }\\n        } else {\\n            if (arrayLength % 2 == 1) {\\n                return array[quickselectK(array, arrayLength / 2)];\\n            } else {\\n                uint256 mid1;\\n                uint256 mid2;\\n                unchecked {\\n                    (mid1, mid2) = quickselectKPlusOne(\\n                        array,\\n                        arrayLength / 2 - 1\\n                    );\\n                }\\n                return average(array[mid1], array[mid2]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Averages two signed integers without overflowing\\n    /// @param x Integer x\\n    /// @param y Integer y\\n    /// @return Average of integers x and y\\n    function average(int256 x, int256 y) private pure returns (int256) {\\n        unchecked {\\n            int256 averageRoundedDownToNegativeInfinity = (x >> 1) +\\n                (y >> 1) +\\n                (x & y & 1);\\n            // If the average rounded down to negative infinity is negative\\n            // (i.e., its 256th sign bit is set), and one of (x, y) is even and\\n            // the other one is odd (i.e., the 1st bit of their xor is set),\\n            // add 1 to round the average down to zero instead.\\n            // We will typecast the signed integer to unsigned to logical-shift\\n            // int256(uint256(signedInt)) >> 255 ~= signedInt >>> 255\\n            return\\n                averageRoundedDownToNegativeInfinity +\\n                (int256(\\n                    (uint256(averageRoundedDownToNegativeInfinity) >> 255)\\n                ) & (x ^ y));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84912d10ad5fa4848f2dfbbac40431ccdeb5250c263718b5fbdfeceeb0946524\",\"license\":\"MIT\"},\"contracts/api3-server-v1/aggregation/QuickSelect.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will calculate the index\\n/// of the k-th and optionally (k+1)-th largest elements in the array\\n/// @notice Uses quickselect, which operates in-place, i.e., the array provided\\n/// as the argument will be modified.\\ncontract Quickselect {\\n    /// @notice Returns the index of the k-th largest element in the array\\n    /// @param array Array in which k-th largest element will be searched\\n    /// @param k K\\n    /// @return indK Index of the k-th largest element\\n    function quickselectK(\\n        int256[] memory array,\\n        uint256 k\\n    ) internal pure returns (uint256 indK) {\\n        uint256 arrayLength = array.length;\\n        assert(arrayLength > 0);\\n        unchecked {\\n            (indK, ) = quickselect(array, 0, arrayLength - 1, k, false);\\n        }\\n    }\\n\\n    /// @notice Returns the index of the k-th and (k+1)-th largest elements in\\n    /// the array\\n    /// @param array Array in which k-th and (k+1)-th largest elements will be\\n    /// searched\\n    /// @param k K\\n    /// @return indK Index of the k-th largest element\\n    /// @return indKPlusOne Index of the (k+1)-th largest element\\n    function quickselectKPlusOne(\\n        int256[] memory array,\\n        uint256 k\\n    ) internal pure returns (uint256 indK, uint256 indKPlusOne) {\\n        uint256 arrayLength = array.length;\\n        assert(arrayLength > 1);\\n        unchecked {\\n            (indK, indKPlusOne) = quickselect(\\n                array,\\n                0,\\n                arrayLength - 1,\\n                k,\\n                true\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the index of the k-th largest element in the specified\\n    /// section of the (potentially unsorted) array\\n    /// @param array Array in which K will be searched for\\n    /// @param lo Starting index of the section of the array that K will be\\n    /// searched in\\n    /// @param hi Last index of the section of the array that K will be\\n    /// searched in\\n    /// @param k K\\n    /// @param selectKPlusOne If the index of the (k+1)-th largest element is\\n    /// to be returned\\n    /// @return indK Index of the k-th largest element\\n    /// @return indKPlusOne Index of the (k+1)-th largest element (only set if\\n    /// `selectKPlusOne` is `true`)\\n    function quickselect(\\n        int256[] memory array,\\n        uint256 lo,\\n        uint256 hi,\\n        uint256 k,\\n        bool selectKPlusOne\\n    ) private pure returns (uint256 indK, uint256 indKPlusOne) {\\n        if (lo == hi) {\\n            return (k, 0);\\n        }\\n        uint256 indPivot = partition(array, lo, hi);\\n        if (k < indPivot) {\\n            unchecked {\\n                (indK, ) = quickselect(array, lo, indPivot - 1, k, false);\\n            }\\n        } else if (k > indPivot) {\\n            unchecked {\\n                (indK, ) = quickselect(array, indPivot + 1, hi, k, false);\\n            }\\n        } else {\\n            indK = indPivot;\\n        }\\n        // Since Quickselect ends in the array being partitioned around the\\n        // k-th largest element, we can continue searching towards right for\\n        // the (k+1)-th largest element, which is useful in calculating the\\n        // median of an array with even length\\n        if (selectKPlusOne) {\\n            unchecked {\\n                indKPlusOne = indK + 1;\\n            }\\n            uint256 i;\\n            unchecked {\\n                i = indKPlusOne + 1;\\n            }\\n            uint256 arrayLength = array.length;\\n            for (; i < arrayLength; ) {\\n                if (array[i] < array[indKPlusOne]) {\\n                    indKPlusOne = i;\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Partitions the array into two around a pivot\\n    /// @param array Array that will be partitioned\\n    /// @param lo Starting index of the section of the array that will be\\n    /// partitioned\\n    /// @param hi Last index of the section of the array that will be\\n    /// partitioned\\n    /// @return pivotInd Pivot index\\n    function partition(\\n        int256[] memory array,\\n        uint256 lo,\\n        uint256 hi\\n    ) private pure returns (uint256 pivotInd) {\\n        if (lo == hi) {\\n            return lo;\\n        }\\n        int256 pivot = array[lo];\\n        uint256 i = lo;\\n        unchecked {\\n            pivotInd = hi + 1;\\n        }\\n        while (true) {\\n            do {\\n                unchecked {\\n                    i++;\\n                }\\n            } while (i < array.length && array[i] < pivot);\\n            do {\\n                unchecked {\\n                    pivotInd--;\\n                }\\n            } while (array[pivotInd] > pivot);\\n            if (i >= pivotInd) {\\n                (array[lo], array[pivotInd]) = (array[pivotInd], array[lo]);\\n                return pivotInd;\\n            }\\n            (array[i], array[pivotInd]) = (array[pivotInd], array[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f458dd165fed89866c5fe626e3df3c9bf6884498ec1233f4083615084521d6e\",\"license\":\"MIT\"},\"contracts/api3-server-v1/aggregation/Sort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will sort an array using\\n/// an unrolled implementation\\n/// @notice The operation will be in-place, i.e., the array provided as the\\n/// argument will be modified.\\ncontract Sort {\\n    uint256 internal constant MAX_SORT_LENGTH = 9;\\n\\n    /// @notice Sorts the array\\n    /// @param array Array to be sorted\\n    function sort(int256[] memory array) internal pure {\\n        uint256 arrayLength = array.length;\\n        require(arrayLength <= MAX_SORT_LENGTH, \\\"Array too long to sort\\\");\\n        // Do a binary search\\n        if (arrayLength < 6) {\\n            // Possible lengths: 1, 2, 3, 4, 5\\n            if (arrayLength < 4) {\\n                // Possible lengths: 1, 2, 3\\n                if (arrayLength == 3) {\\n                    // Length: 3\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                } else if (arrayLength == 2) {\\n                    // Length: 2\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                }\\n                // Do nothing for Length: 1\\n            } else {\\n                // Possible lengths: 4, 5\\n                if (arrayLength == 5) {\\n                    // Length: 5\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                } else {\\n                    // Length: 4\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                }\\n            }\\n        } else {\\n            // Possible lengths: 6, 7, 8, 9\\n            if (arrayLength < 8) {\\n                // Possible lengths: 6, 7\\n                if (arrayLength == 7) {\\n                    // Length: 7\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 4, 6);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 2, 6);\\n                    swapIfFirstIsLarger(array, 1, 5);\\n                    swapIfFirstIsLarger(array, 0, 4);\\n                    swapIfFirstIsLarger(array, 2, 5);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                } else {\\n                    // Length: 6\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                }\\n            } else {\\n                // Possible lengths: 8, 9\\n                if (arrayLength == 9) {\\n                    // Length: 9\\n                    swapIfFirstIsLarger(array, 1, 8);\\n                    swapIfFirstIsLarger(array, 2, 7);\\n                    swapIfFirstIsLarger(array, 3, 6);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 1, 4);\\n                    swapIfFirstIsLarger(array, 5, 8);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 2, 6);\\n                    swapIfFirstIsLarger(array, 7, 8);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 5, 7);\\n                    swapIfFirstIsLarger(array, 4, 6);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 7, 8);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                } else {\\n                    // Length: 8\\n                    swapIfFirstIsLarger(array, 0, 7);\\n                    swapIfFirstIsLarger(array, 1, 6);\\n                    swapIfFirstIsLarger(array, 2, 5);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 4, 7);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Swaps two elements of an array if the first element is greater\\n    /// than the second\\n    /// @param array Array whose elements are to be swapped\\n    /// @param ind1 Index of the first element\\n    /// @param ind2 Index of the second element\\n    function swapIfFirstIsLarger(\\n        int256[] memory array,\\n        uint256 ind1,\\n        uint256 ind2\\n    ) private pure {\\n        if (array[ind1] > array[ind2]) {\\n            (array[ind1], array[ind2]) = (array[ind2], array[ind1]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81e3790f7964b0169e60022f00f988a136e37a043053d8b07c794cc1c9b6c510\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IApi3ServerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDapiServer.sol\\\";\\nimport \\\"./IBeaconUpdatesWithSignedData.sol\\\";\\n\\ninterface IApi3ServerV1 is IOevDapiServer, IBeaconUpdatesWithSignedData {\\n    function readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHash(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithIdAsOevProxy(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHashAsOevProxy(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function dataFeeds(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function oevProxyToIdToDataFeed(\\n        address proxy,\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n}\\n\",\"keccak256\":\"0xea2c05eaf2a19c93a9c9b08243fcabd8d7fcf0e4d422f7c687aef693126c1809\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IBeaconUpdatesWithSignedData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IBeaconUpdatesWithSignedData is IDataFeedServer {\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 templateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bytes32 beaconId);\\n}\\n\",\"keccak256\":\"0xe2b2530081508baf1323d4c145a688ffd548cf318a8cb67c9ccb4abe1ac81c6e\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IDapiServer is\\n    IAccessControlRegistryAdminnedWithManager,\\n    IDataFeedServer\\n{\\n    event SetDapiName(\\n        bytes32 indexed dataFeedId,\\n        bytes32 indexed dapiName,\\n        address sender\\n    );\\n\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\\n\\n    function dapiNameToDataFeedId(\\n        bytes32 dapiName\\n    ) external view returns (bytes32);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    function dapiNameSetterRole() external view returns (bytes32);\\n\\n    function dapiNameHashToDataFeedId(\\n        bytes32 dapiNameHash\\n    ) external view returns (bytes32 dataFeedId);\\n}\\n\",\"keccak256\":\"0x1cf1d7637e2ee1b4f5b99345730183447db78ceb8ce2117cf145d4d375194e71\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IDataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/IExtendedSelfMulticall.sol\\\";\\n\\ninterface IDataFeedServer is IExtendedSelfMulticall {\\n    event UpdatedBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithBeacons(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    function updateBeaconSetWithBeacons(\\n        bytes32[] memory beaconIds\\n    ) external returns (bytes32 beaconSetId);\\n}\\n\",\"keccak256\":\"0x208f751f71b16d454cafd9188095178fdc776ee0376a85362f6022e7a4f010a3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IOevDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDataFeedServer.sol\\\";\\nimport \\\"./IDapiServer.sol\\\";\\n\\ninterface IOevDapiServer is IOevDataFeedServer, IDapiServer {}\\n\",\"keccak256\":\"0xf4082c33979785131358a217a8c5cf498a53c04318868eb1cb68e934c33226e3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IOevDataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IOevDataFeedServer is IDataFeedServer {\\n    event UpdatedOevProxyBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedOevProxyBeaconSetWithSignedData(\\n        bytes32 indexed beaconSetId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event Withdrew(\\n        address indexed oevProxy,\\n        address oevBeneficiary,\\n        uint256 amount\\n    );\\n\\n    function updateOevProxyDataFeedWithSignedData(\\n        address oevProxy,\\n        bytes32 dataFeedId,\\n        bytes32 updateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes[] calldata packedOevUpdateSignatures\\n    ) external payable;\\n\\n    function withdraw(address oevProxy) external;\\n\\n    function oevProxyToBalance(\\n        address oevProxy\\n    ) external view returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x2d162c576bfe5554767bb48758314c3e6f2c509f73203f0e166d1ac5168a1218\",\"license\":\"MIT\"},\"contracts/api3-server-v1/proxies/interfaces/IOevProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOevProxy {\\n    function oevBeneficiary() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcd9962a465c96e85638eb40775da008f9c86a0ea0c50c7c5fcbb11c55f48fc22\",\"license\":\"MIT\"},\"contracts/utils/ExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./SelfMulticall.sol\\\";\\nimport \\\"./interfaces/IExtendedSelfMulticall.sol\\\";\\n\\n/// @title Contract that extends SelfMulticall to fetch some of the global\\n/// variables\\n/// @notice Available global variables are limited to the ones that Airnode\\n/// tends to need\\ncontract ExtendedSelfMulticall is SelfMulticall, IExtendedSelfMulticall {\\n    /// @notice Returns the chain ID\\n    /// @return Chain ID\\n    function getChainId() external view override returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /// @notice Returns the account balance\\n    /// @param account Account address\\n    /// @return Account balance\\n    function getBalance(\\n        address account\\n    ) external view override returns (uint256) {\\n        return account.balance;\\n    }\\n\\n    /// @notice Returns if the account contains bytecode\\n    /// @dev An account not containing any bytecode does not indicate that it\\n    /// is an EOA or it will not contain any bytecode in the future.\\n    /// Contract construction and `SELFDESTRUCT` updates the bytecode at the\\n    /// end of the transaction.\\n    /// @return If the account contains bytecode\\n    function containsBytecode(\\n        address account\\n    ) external view override returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    /// @notice Returns the current block number\\n    /// @return Current block number\\n    function getBlockNumber() external view override returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @notice Returns the current block timestamp\\n    /// @return Current block timestamp\\n    function getBlockTimestamp() external view override returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice Returns the current block basefee\\n    /// @return Current block basefee\\n    function getBlockBasefee() external view override returns (uint256) {\\n        return block.basefee;\\n    }\\n}\\n\",\"keccak256\":\"0xada4020386f51e076953a110accf21efc53b82858bb88fc6725591556d86574b\",\"license\":\"MIT\"},\"contracts/utils/SelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISelfMulticall.sol\\\";\\n\\n/// @title Contract that enables calls to the inheriting contract to be batched\\n/// @notice Implements two ways of batching, one requires none of the calls to\\n/// revert and the other tolerates individual calls reverting\\n/// @dev This implementation uses delegatecall for individual function calls.\\n/// Since delegatecall is a message call, it can only be made to functions that\\n/// are externally visible. This means that a contract cannot multicall its own\\n/// functions that use internal/private visibility modifiers.\\n/// Refer to OpenZeppelin's Multicall.sol for a similar implementation.\\ncontract SelfMulticall is ISelfMulticall {\\n    /// @notice Batches calls to the inheriting contract and reverts as soon as\\n    /// one of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function multicall(\\n        bytes[] calldata data\\n    ) external override returns (bytes[] memory returndata) {\\n        uint256 callCount = data.length;\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            bool success;\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (success, returndata[ind]) = address(this).delegatecall(data[ind]);\\n            if (!success) {\\n                bytes memory returndataWithRevertData = returndata[ind];\\n                if (returndataWithRevertData.length > 0) {\\n                    // Adapted from OpenZeppelin's Address.sol\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        let returndata_size := mload(returndataWithRevertData)\\n                        revert(\\n                            add(32, returndataWithRevertData),\\n                            returndata_size\\n                        )\\n                    }\\n                } else {\\n                    revert(\\\"Multicall: No revert string\\\");\\n                }\\n            }\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Batches calls to the inheriting contract but does not revert if\\n    /// any of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return successes Array of success conditions of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function tryMulticall(\\n        bytes[] calldata data\\n    )\\n        external\\n        override\\n        returns (bool[] memory successes, bytes[] memory returndata)\\n    {\\n        uint256 callCount = data.length;\\n        successes = new bool[](callCount);\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (successes[ind], returndata[ind]) = address(this).delegatecall(\\n                data[ind]\\n            );\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb466760f7b5d05a91fb168224952f29db9aa3308f0b83535fd697f3c30281740\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISelfMulticall.sol\\\";\\n\\ninterface IExtendedSelfMulticall is ISelfMulticall {\\n    function getChainId() external view returns (uint256);\\n\\n    function getBalance(address account) external view returns (uint256);\\n\\n    function containsBytecode(address account) external view returns (bool);\\n\\n    function getBlockNumber() external view returns (uint256);\\n\\n    function getBlockTimestamp() external view returns (uint256);\\n\\n    function getBlockBasefee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaefe61a623c920d3e39c4779535e280378b44202d11c29a2c96f46f2fe5f420d\",\"license\":\"MIT\"},\"contracts/utils/interfaces/ISelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISelfMulticall {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory returndata);\\n\\n    function tryMulticall(\\n        bytes[] calldata data\\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\\n}\\n\",\"keccak256\":\"0x50b27284f0d5acd8b340836c09d252138ebf059f426e5d90d3f7221e1b7d0817\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.8.2/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.8.2/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.8.2/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.8.2/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620039a2380380620039a283398101604081905262000035916200033a565b82828282828282828282826001600160a01b0382166200008f5760405162461bcd60e51b815260206004820152601060248201526f4143522061646472657373207a65726f60801b60448201526064015b60405180910390fd5b6000815111620000e25760405162461bcd60e51b815260206004820152601c60248201527f41646d696e20726f6c65206465736372697074696f6e20656d70747900000000604482015260640162000086565b6001600160a01b0382166080526000620000fd8282620004a9565b508060405160200162000111919062000575565b60408051601f19818403018152919052805160209091012060a05250506001600160a01b038116620001865760405162461bcd60e51b815260206004820152601460248201527f4d616e616765722061646472657373207a65726f000000000000000000000000604482015260640162000086565b6001600160a01b03811660c0526200019e81620001f8565b60e052505060c051620001e49150620001b790620001f8565b60408051808201909152601081526f3220a824903730b6b29039b2ba3a32b960811b602082015262000272565b610100525062000593975050505050505050565b60006200026c6200023d836040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b60a051604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b92915050565b6000620002ae83836040516020016200028c919062000575565b60405160208183030381529060405280519060200120620002b560201b60201c565b9392505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b80516001600160a01b0381168114620002f957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200033157818101518382015260200162000317565b50506000910152565b6000806000606084860312156200035057600080fd5b6200035b84620002e1565b60208501519093506001600160401b03808211156200037957600080fd5b818601915086601f8301126200038e57600080fd5b815181811115620003a357620003a3620002fe565b604051601f8201601f19908116603f01168101908382118183101715620003ce57620003ce620002fe565b81604052828152896020848701011115620003e857600080fd5b620003fb83602083016020880162000314565b80965050505050506200041160408501620002e1565b90509250925092565b600181811c908216806200042f57607f821691505b6020821081036200045057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004a457600081815260208120601f850160051c810160208610156200047f5750805b601f850160051c820191505b81811015620004a0578281556001016200048b565b5050505b505050565b81516001600160401b03811115620004c557620004c5620002fe565b620004dd81620004d684546200041a565b8462000456565b602080601f831160018114620005155760008415620004fc5750858301515b600019600386901b1c1916600185901b178555620004a0565b600085815260208120601f198616915b82811015620005465788860151825594840194600190910190840162000525565b5085821015620005655787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516200058981846020870162000314565b9190910192915050565b60805160a05160c05160e051610100516133b8620005ea600039600081816104650152610e31015260006101cc01526000818161035f0152610de2015260005050600081816102530152610e5d01526133b86000f3fe6080604052600436106101b55760003560e01c806367a7cfb7116100ec578063ac9650d81161008a578063e6ec76ac11610064578063e6ec76ac14610594578063f83ea108146105a7578063f8b2cb4f146105fe578063fce90be81461062657600080fd5b8063ac9650d814610527578063b62408a314610554578063cfaf49711461057457600080fd5b80638e6ddc27116100c65780638e6ddc271461049a5780638fca9ab9146104c757806391eed085146104e7578063a5fc076f1461050757600080fd5b806367a7cfb7146104125780637512449b14610453578063796b89b91461048757600080fd5b8063437b9116116101595780634c8f1d8d116101335780634c8f1d8d146103815780634dcc19fe146103a357806351cff8d9146103b65780635989eaeb146103d857600080fd5b8063437b9116146102f2578063472c22f114610320578063481c6a751461034d57600080fd5b80631ce9ae07116101955780631ce9ae071461024157806332be8f0b1461028d5780633408e470146102cc57806342cbb15c146102df57600080fd5b80629f2f3c146101ba578062aae33f146102015780631a0a0b3e14610221575b600080fd5b3480156101c657600080fd5b506101ee7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561020d57600080fd5b506101ee61021c366004612c34565b61066f565b34801561022d57600080fd5b506101ee61023c366004612d31565b61079c565b34801561024d57600080fd5b506102757f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f8565b34801561029957600080fd5b506102ad6102a8366004612dc7565b610915565b60408051601b9390930b835263ffffffff9091166020830152016101f8565b3480156102d857600080fd5b50466101ee565b3480156102eb57600080fd5b50436101ee565b3480156102fe57600080fd5b5061031261030d366004612e25565b61092a565b6040516101f8929190612ef6565b34801561032c57600080fd5b506101ee61033b366004612dc7565b60046020526000908152604090205481565b34801561035957600080fd5b506102757f000000000000000000000000000000000000000000000000000000000000000081565b34801561038d57600080fd5b50610396610a90565b6040516101f89190612f4f565b3480156103af57600080fd5b50486101ee565b3480156103c257600080fd5b506103d66103d1366004612f62565b610b1e565b005b3480156103e457600080fd5b506104026103f3366004612f62565b6001600160a01b03163b151590565b60405190151581526020016101f8565b34801561041e57600080fd5b506102ad61042d366004612dc7565b600090815260016020526040902054601b81900b91600160e01b90910463ffffffff1690565b34801561045f57600080fd5b506101ee7f000000000000000000000000000000000000000000000000000000000000000081565b34801561049357600080fd5b50426101ee565b3480156104a657600080fd5b506101ee6104b5366004612f62565b60036020526000908152604090205481565b3480156104d357600080fd5b506101ee6104e2366004612dc7565b610d45565b3480156104f357600080fd5b506103d6610502366004612f7f565b610d8a565b34801561051357600080fd5b506102ad610522366004612dc7565b610f96565b34801561053357600080fd5b50610547610542366004612e25565b610fa2565b6040516101f89190612fa1565b34801561056057600080fd5b506102ad61056f366004612dc7565b611123565b34801561058057600080fd5b506102ad61058f366004612dc7565b61112f565b6103d66105a2366004612fb4565b61113b565b3480156105b357600080fd5b506102ad6105c2366004613053565b6001600160a01b039190911660009081526002602090815260408083209383529290522054601b81900b91600160e01b90910463ffffffff1690565b34801561060a57600080fd5b506101ee610619366004612f62565b6001600160a01b03163190565b34801561063257600080fd5b506103966040518060400160405280601081526020017f64415049206e616d65207365747465720000000000000000000000000000000081525081565b600080600061067d846116c2565b9150915061068a84611864565b600081815260016020526040902080549194509063ffffffff808416600160e01b9092041603610710578054601b84810b91900b036107105760405162461bcd60e51b815260206004820152601a60248201527f446f6573206e6f742075706461746520426561636f6e2073657400000000000060448201526064015b60405180910390fd5b604080518082018252601b85900b80825263ffffffff858116602080850182815260008b81526001835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915285917fb7712be6248d021e8c56ac9613c09491354a4d0f4ad0b7db1a664b35be4b2349910160405180910390a2505050919050565b6000876001600160a01b031661081d84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161081792506107fc91508c908c908c908c9060200161307f565b60405160208183030381529060405280519060200120611894565b906118cf565b6001600160a01b0316146108735760405162461bcd60e51b815260206004820152601260248201527f5369676e6174757265206d69736d6174636800000000000000000000000000006044820152606401610707565b50604080516bffffffffffffffffffffffff1960608a901b1660208083019190915260348083018a9052835180840390910181526054909201909252805191012060006108c2828888886118f5565b60408051601b83900b815263ffffffff8a16602082015291925083917f1ffdb573afe7273932e253bc4b8a17b9da4d37d7219ba05e464358975b36efb7910160405180910390a250979650505050505050565b60008061092183611a4a565b91509150915091565b606080828067ffffffffffffffff81111561094757610947612bed565b604051908082528060200260200182016040528015610970578160200160208202803683370190505b5092508067ffffffffffffffff81111561098c5761098c612bed565b6040519080825280602002602001820160405280156109bf57816020015b60608152602001906001900390816109aa5790505b50915060005b81811015610a8757308686838181106109e0576109e06130a0565b90506020028101906109f291906130b6565b604051610a009291906130fd565b600060405180830381855af49150503d8060008114610a3b576040519150601f19603f3d011682016040523d82523d6000602084013e610a40565b606091505b50858381518110610a5357610a536130a0565b60200260200101858481518110610a6c57610a6c6130a0565b602090810291909101019190915290151590526001016109c5565b50509250929050565b60008054610a9d9061310d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac99061310d565b8015610b165780601f10610aeb57610100808354040283529160200191610b16565b820191906000526020600020905b815481529060010190602001808311610af957829003601f168201915b505050505081565b6000816001600160a01b0316630e15999d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b829190613141565b90506001600160a01b038116610bda5760405162461bcd60e51b815260206004820152601860248201527f42656e65666963696172792061646472657373207a65726f00000000000000006044820152606401610707565b6001600160a01b03821660009081526003602052604081205490819003610c435760405162461bcd60e51b815260206004820152601660248201527f4f45562070726f78792062616c616e6365207a65726f000000000000000000006044820152606401610707565b6001600160a01b0383811660008181526003602090815260408083209290925581519386168452830184905290917f0472be967f9a37138dfea1875af44784cafb79f92044ab33d7d6958eddd9ca6c910160405180910390a26000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610ce9576040519150601f19603f3d011682016040523d82523d6000602084013e610cee565b606091505b5050905080610d3f5760405162461bcd60e51b815260206004820152601360248201527f5769746864726177616c207265766572746564000000000000000000000000006044820152606401610707565b50505050565b60006004600083604051602001610d5e91815260200190565b604051602081830303815290604052805190602001208152602001908152602001600020549050919050565b81610dd75760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f0000000000000000000000000000000000006044820152606401610707565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610ed057506040517f91d148540000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed0919061315e565b610f1c5760405162461bcd60e51b815260206004820152601b60248201527f53656e6465722063616e6e6f74207365742064415049206e616d6500000000006044820152606401610707565b806004600084604051602001610f3491815260200190565b60408051601f1981840301815291815281516020928301208352828201939093529082016000209290925551338152839183917ff3a9aac9b6ac0f842cb5d9b3491cd5fc1b6a6778d97fd9529f587339865294f5910160405180910390a35050565b60008061092183611b7d565b6060818067ffffffffffffffff811115610fbe57610fbe612bed565b604051908082528060200260200182016040528015610ff157816020015b6060815260200190600190039081610fdc5790505b50915060005b8181101561111b57600030868684818110611014576110146130a0565b905060200281019061102691906130b6565b6040516110349291906130fd565b600060405180830381855af49150503d806000811461106f576040519150601f19603f3d011682016040523d82523d6000602084013e611074565b606091505b50858481518110611087576110876130a0565b60209081029190910101529050806111125760008483815181106110ad576110ad6130a0565b602002602001015190506000815111156110ca5780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e6700000000006044820152606401610707565b50600101610ff7565b505092915050565b60008061092183611bf5565b60008061092183611ccd565b8442610e1001811061118f5760405162461bcd60e51b815260206004820152601360248201527f54696d657374616d70206e6f742076616c6964000000000000000000000000006044820152606401610707565b6001600160a01b03891660009081526002602090815260408083208b8452909152902054600160e01b900463ffffffff16861161120e5760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f74207570646174652074696d657374616d70000000000000006044820152606401610707565b600046308b8b8b8b8b8b33346040516020016112339a99989796959493929190613180565b604051602081830303815290604052805190602001209050600061128c87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d9f92505050565b9050878460018111156114615760008167ffffffffffffffff8111156112b4576112b4612bed565b6040519080825280602002602001820160405280156112dd578160200160208202803683370190505b5090506000805b8381101561135057600061131b888c8c85818110611304576113046130a0565b905060200281019061131691906130b6565b611ea2565b85848151811061132d5761132d6130a0565b602090810291909101015290508015611347576001909201915b506001016112e4565b5061135c6002846131ff565b81116113aa5760405162461bcd60e51b815260206004820152601560248201527f4e6f7420656e6f756768207369676e61747572657300000000000000000000006044820152606401610707565b6113b382611864565b8e146114015760405162461bcd60e51b815260206004820152601660248201527f426561636f6e20736574204944206d69736d61746368000000000000000000006044820152606401610707565b8c8f6001600160a01b03168f7fdd29860e0772a39dea2ff0520d79f8efdffe48c903d6bbbc0c2cc65dc6568a7f8888604051611452929190601b9290920b825263ffffffff16602082015260400190565b60405180910390a450506115cb565b8060010361158357600080611483868a8a6000818110611304576113046130a0565b91509150816114d45760405162461bcd60e51b815260206004820152601160248201527f4d697373696e67207369676e61747572650000000000000000000000000000006044820152606401610707565b808e146115235760405162461bcd60e51b815260206004820152601260248201527f426561636f6e204944206d69736d6174636800000000000000000000000000006044820152606401610707565b50508a8d6001600160a01b03168d7fc856aaa4e639403f366ad68f07eb69bad4c044a35b0369c4ef1ea3a427a6a0ee8686604051611576929190601b9290920b825263ffffffff16602082015260400190565b60405180910390a46115cb565b60405162461bcd60e51b815260206004820152601b60248201527f446964206e6f74207370656369667920616e7920426561636f6e7300000000006044820152606401610707565b604051806040016040528084601b0b81526020018363ffffffff16815250600260008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060008201518160000160006101000a8154816001600160e01b030219169083601b0b6001600160e01b03160217905550602082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555090505034600360008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546116ae9190613213565b909155505050505050505050505050505050565b80516000908190600181116117195760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e73006044820152606401610707565b60008167ffffffffffffffff81111561173457611734612bed565b60405190808252806020026020018201604052801561175d578160200160208202803683370190505b50905060008267ffffffffffffffff81111561177b5761177b612bed565b6040519080825280602002602001820160405280156117a4578160200160208202803683370190505b50905060005b83811015611845576000600160008984815181106117ca576117ca6130a0565b602090810291909101810151825281019190915260400160002080548551919250601b0b90859084908110611801576118016130a0565b602090810291909101015280548351600160e01b90910463ffffffff1690849084908110611831576118316130a0565b6020908102919091010152506001016117aa565b5061184f82611fa4565b945061185a81611fa4565b9350505050915091565b6000816040516020016118779190613234565b604051602081830303815290604052805190602001209050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01611877565b60008060006118de85856120fd565b915091506118eb81612142565b5090505b92915050565b60008342610e1001811061194b5760405162461bcd60e51b815260206004820152601360248201527f54696d657374616d70206e6f742076616c6964000000000000000000000000006044820152606401610707565b61198a84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d9f92505050565b600087815260016020526040902054909250600160e01b900463ffffffff1685116119f75760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f74207570646174652074696d657374616d70000000000000006044820152606401610707565b50604080518082018252601b83900b815263ffffffff95861660208083019182526000988952600190529190962095519051909416600160e01b026001600160e01b039094169390931790935550919050565b600081815260046020526040812054819080611aa85760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f74207365740000000000000000000000000000006044820152606401610707565b336000908152600260209081526040808320848452825280832060019092529091208054825463ffffffff600160e01b92839004811692909104161115611b06578154601b81900b9550600160e01b900463ffffffff169350611b1f565b8054601b81900b9550600160e01b900463ffffffff1693505b60008463ffffffff1611611b755760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610707565b505050915091565b60008181526001602052604090208054601b81900b91600160e01b90910463ffffffff169081611bef5760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610707565b50915091565b600081815260046020526040812054819080611c535760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f74207365740000000000000000000000000000006044820152606401610707565b60008181526001602052604090208054601b81900b9450600160e01b900463ffffffff16925082611cc65760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610707565b5050915091565b336000908152600260209081526040808320848452825280832060019092528220805482548493929163ffffffff600160e01b918290048116919092049091161115611d30578154601b81900b9450600160e01b900463ffffffff169250611d49565b8054601b81900b9450600160e01b900463ffffffff1692505b60008363ffffffff1611611cc65760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610707565b60008151602014611df25760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f72726563740000000000000000006044820152606401610707565b600082806020019051810190611e089190613278565b90507fffffffff800000000000000000000000000000000000000000000000000000008112801590611e5657507b7fffffffffffffffffffffffffffffffffffffffffffffffffffffff8113155b6118ef5760405162461bcd60e51b815260206004820152601760248201527f56616c7565207479706563617374696e67206572726f720000000000000000006044820152606401610707565b600080808080611eb486880188613291565b925092509250611f0683836040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b93508051600014611f9957826001600160a01b0316611f3e826108178b866040516020016107fc929190918252602082015260400190565b6001600160a01b031614611f945760405162461bcd60e51b815260206004820152601260248201527f5369676e6174757265206d69736d6174636800000000000000000000000000006044820152606401610707565b600194505b505050935093915050565b80516000906009811161207d57611fba836122aa565b611fc5600282613342565b600103611ff85782611fd86002836131ff565b81518110611fe857611fe86130a0565b6020026020010151915050919050565b8060000361200857612008613356565b612076836001600284040381518110612023576120236130a0565b6020026020010151846002848161203c5761203c6131e9565b048151811061204d5761204d6130a0565b6020026020010151600182811d82821d01838316919091160160ff81901c838318160192915050565b9392505050565b612088600282613342565b6001036120a45782611fd88161209f6002856131ff565b6127bc565b6000806120b785600160028604036127e9565b80925081935050506120ee8583815181106120d4576120d46130a0565b602002602001015186838151811061204d5761204d6130a0565b95945050505050565b50919050565b60008082516041036121335760208301516040840151606085015160001a6121278782858561281e565b9450945050505061213b565b506000905060025b9250929050565b60008160048111156121565761215661336c565b0361215e5750565b60018160048111156121725761217261336c565b036121bf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610707565b60028160048111156121d3576121d361336c565b036122205760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610707565b60038160048111156122345761223461336c565b036122a75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610707565b50565b805160098111156122fd5760405162461bcd60e51b815260206004820152601660248201527f417272617920746f6f206c6f6e6720746f20736f7274000000000000000000006044820152606401610707565b600681101561240857600481101561235757806003036123425761232482600060016128e2565b61233182600160026128e2565b61233e82600060016128e2565b5050565b8060020361233e5761233e82600060016128e2565b806005036123d45761236c82600160026128e2565b61237982600360046128e2565b61238682600160036128e2565b61239382600060026128e2565b6123a082600260046128e2565b6123ad82600060036128e2565b6123ba82600060016128e2565b6123c782600260036128e2565b61233e82600160026128e2565b6123e182600060016128e2565b6123ee82600260036128e2565b6123fb82600160036128e2565b6123c782600060026128e2565b600881101561258557806007036124e95761242682600160026128e2565b61243382600360046128e2565b61244082600560066128e2565b61244d82600060026128e2565b61245a82600460066128e2565b61246782600360056128e2565b61247482600260066128e2565b61248182600160056128e2565b61248e82600060046128e2565b61249b82600260056128e2565b6124a882600060036128e2565b6124b582600260046128e2565b6124c282600160036128e2565b6124cf82600060016128e2565b6124dc82600260036128e2565b61233e82600460056128e2565b6124f682600060016128e2565b61250382600260036128e2565b61251082600460056128e2565b61251d82600160036128e2565b61252a82600360056128e2565b61253782600160036128e2565b61254482600260046128e2565b61255182600060026128e2565b61255e82600260046128e2565b61256b82600360046128e2565b61257882600160026128e2565b61233e82600260036128e2565b806009036126b85761259a82600160086128e2565b6125a782600260076128e2565b6125b482600360066128e2565b6125c182600460056128e2565b6125ce82600160046128e2565b6125db82600560086128e2565b6125e882600060026128e2565b6125f582600660076128e2565b61260282600260066128e2565b61260f82600760086128e2565b61261c82600060036128e2565b61262982600460056128e2565b61263682600060016128e2565b61264382600360056128e2565b61265082600660076128e2565b61265d82600260046128e2565b61266a82600160036128e2565b61267782600560076128e2565b61268482600460066128e2565b61269182600160026128e2565b61269e82600360046128e2565b6126ab82600560066128e2565b6124cf82600760086128e2565b6126c582600060076128e2565b6126d282600160066128e2565b6126df82600260056128e2565b6126ec82600360046128e2565b6126f982600060036128e2565b61270682600460076128e2565b61271382600160026128e2565b61272082600560066128e2565b61272d82600060016128e2565b61273a82600260036128e2565b61274782600460056128e2565b61275482600660076128e2565b61276182600360056128e2565b61276e82600260046128e2565b61277b82600160026128e2565b61278882600360046128e2565b61279582600560066128e2565b6127a282600260036128e2565b6127af82600460056128e2565b61233e82600360046128e2565b8151600090806127ce576127ce613356565b6127e084600060018403866000612990565b50949350505050565b815160009081906001811161280057612800613356565b61281285600060018403876001612990565b90969095509350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561285557506000905060036128d9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156128a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128d2576000600192509250506128d9565b9150600090505b94509492505050565b8281815181106128f4576128f46130a0565b602002602001015183838151811061290e5761290e6130a0565b6020026020010151131561298b5782818151811061292e5761292e6130a0565b6020026020010151838381518110612948576129486130a0565b6020026020010151848481518110612962576129626130a0565b6020026020010185848151811061297b5761297b6130a0565b6020908102919091010191909152525b505050565b6000808486036129a557508290506000612a5c565b60006129b2888888612a66565b9050808510156129d5576129cd888860018403886000612990565b5092506129f2565b808511156129ee576129cd888260010188886000612990565b8092505b8315612a5a57875160018401925060028401905b80821015612a5757898481518110612a2057612a206130a0565b60200260200101518a8381518110612a3a57612a3a6130a0565b60200260200101511215612a4c578193505b600190910190612a06565b50505b505b9550959350505050565b6000818303612a76575081612076565b6000848481518110612a8a57612a8a6130a0565b6020026020010151905060008490508360010192505b855160019091019081108015612ace575081868281518110612ac457612ac46130a0565b6020026020010151125b612aa0575b82806001900393505081868481518110612aef57612aef6130a0565b602002602001015113612ad357828110612b7a57858381518110612b1557612b156130a0565b6020026020010151868681518110612b2f57612b2f6130a0565b6020026020010151878781518110612b4957612b496130a0565b60200260200101888681518110612b6257612b626130a0565b60200260200101828152508281525050505050612076565b858381518110612b8c57612b8c6130a0565b6020026020010151868281518110612ba657612ba66130a0565b6020026020010151878381518110612bc057612bc06130a0565b60200260200101888681518110612bd957612bd96130a0565b602090810291909101019190915252612aa0565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c2c57612c2c612bed565b604052919050565b60006020808385031215612c4757600080fd5b823567ffffffffffffffff80821115612c5f57600080fd5b818501915085601f830112612c7357600080fd5b813581811115612c8557612c85612bed565b8060051b9150612c96848301612c03565b8181529183018401918481019088841115612cb057600080fd5b938501935b83851015612cce57843582529385019390850190612cb5565b98975050505050505050565b6001600160a01b03811681146122a757600080fd5b60008083601f840112612d0157600080fd5b50813567ffffffffffffffff811115612d1957600080fd5b60208301915083602082850101111561213b57600080fd5b600080600080600080600060a0888a031215612d4c57600080fd5b8735612d5781612cda565b96506020880135955060408801359450606088013567ffffffffffffffff80821115612d8257600080fd5b612d8e8b838c01612cef565b909650945060808a0135915080821115612da757600080fd5b50612db48a828b01612cef565b989b979a50959850939692959293505050565b600060208284031215612dd957600080fd5b5035919050565b60008083601f840112612df257600080fd5b50813567ffffffffffffffff811115612e0a57600080fd5b6020830191508360208260051b850101111561213b57600080fd5b60008060208385031215612e3857600080fd5b823567ffffffffffffffff811115612e4f57600080fd5b61281285828601612de0565b6000815180845260005b81811015612e8157602081850181015186830182015201612e65565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612ee9578284038952612ed7848351612e5b565b98850198935090840190600101612ebf565b5091979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612f31578151151584529284019290840190600101612f13565b50505083810382850152612f458186612ea1565b9695505050505050565b6020815260006120766020830184612e5b565b600060208284031215612f7457600080fd5b813561207681612cda565b60008060408385031215612f9257600080fd5b50508035926020909101359150565b6020815260006120766020830184612ea1565b60008060008060008060008060c0898b031215612fd057600080fd5b8835612fdb81612cda565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff8082111561300d57600080fd5b6130198c838d01612cef565b909650945060a08b013591508082111561303257600080fd5b5061303f8b828c01612de0565b999c989b5096995094979396929594505050565b6000806040838503121561306657600080fd5b823561307181612cda565b946020939093013593505050565b84815283602082015281836040830137600091016040019081529392505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126130cd57600080fd5b83018035915067ffffffffffffffff8211156130e857600080fd5b60200191503681900382131561213b57600080fd5b8183823760009101908152919050565b600181811c9082168061312157607f821691505b6020821081036120f757634e487b7160e01b600052602260045260246000fd5b60006020828403121561315357600080fd5b815161207681612cda565b60006020828403121561317057600080fd5b8151801515811461207657600080fd5b8a815260006bffffffffffffffffffffffff19808c60601b166020840152808b60601b166034840152896048840152886068840152876088840152858760a885013760609490941b909316930160a881019390935260bc8301525060dc01979650505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261320e5761320e6131e9565b500490565b808201808211156118ef57634e487b7160e01b600052601160045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561326c57835183529284019291840191600101613250565b50909695505050505050565b60006020828403121561328a57600080fd5b5051919050565b6000806000606084860312156132a657600080fd5b83356132b181612cda565b92506020848101359250604085013567ffffffffffffffff808211156132d657600080fd5b818701915087601f8301126132ea57600080fd5b8135818111156132fc576132fc612bed565b61330e601f8201601f19168501612c03565b9150808252888482850101111561332457600080fd5b80848401858401376000848284010152508093505050509250925092565b600082613351576133516131e9565b500690565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220693313c61a998d79d0e9b250367bd14ac439bd3d1d1f36bf50317fc99059456d64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101b55760003560e01c806367a7cfb7116100ec578063ac9650d81161008a578063e6ec76ac11610064578063e6ec76ac14610594578063f83ea108146105a7578063f8b2cb4f146105fe578063fce90be81461062657600080fd5b8063ac9650d814610527578063b62408a314610554578063cfaf49711461057457600080fd5b80638e6ddc27116100c65780638e6ddc271461049a5780638fca9ab9146104c757806391eed085146104e7578063a5fc076f1461050757600080fd5b806367a7cfb7146104125780637512449b14610453578063796b89b91461048757600080fd5b8063437b9116116101595780634c8f1d8d116101335780634c8f1d8d146103815780634dcc19fe146103a357806351cff8d9146103b65780635989eaeb146103d857600080fd5b8063437b9116146102f2578063472c22f114610320578063481c6a751461034d57600080fd5b80631ce9ae07116101955780631ce9ae071461024157806332be8f0b1461028d5780633408e470146102cc57806342cbb15c146102df57600080fd5b80629f2f3c146101ba578062aae33f146102015780631a0a0b3e14610221575b600080fd5b3480156101c657600080fd5b506101ee7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561020d57600080fd5b506101ee61021c366004612c34565b61066f565b34801561022d57600080fd5b506101ee61023c366004612d31565b61079c565b34801561024d57600080fd5b506102757f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f8565b34801561029957600080fd5b506102ad6102a8366004612dc7565b610915565b60408051601b9390930b835263ffffffff9091166020830152016101f8565b3480156102d857600080fd5b50466101ee565b3480156102eb57600080fd5b50436101ee565b3480156102fe57600080fd5b5061031261030d366004612e25565b61092a565b6040516101f8929190612ef6565b34801561032c57600080fd5b506101ee61033b366004612dc7565b60046020526000908152604090205481565b34801561035957600080fd5b506102757f000000000000000000000000000000000000000000000000000000000000000081565b34801561038d57600080fd5b50610396610a90565b6040516101f89190612f4f565b3480156103af57600080fd5b50486101ee565b3480156103c257600080fd5b506103d66103d1366004612f62565b610b1e565b005b3480156103e457600080fd5b506104026103f3366004612f62565b6001600160a01b03163b151590565b60405190151581526020016101f8565b34801561041e57600080fd5b506102ad61042d366004612dc7565b600090815260016020526040902054601b81900b91600160e01b90910463ffffffff1690565b34801561045f57600080fd5b506101ee7f000000000000000000000000000000000000000000000000000000000000000081565b34801561049357600080fd5b50426101ee565b3480156104a657600080fd5b506101ee6104b5366004612f62565b60036020526000908152604090205481565b3480156104d357600080fd5b506101ee6104e2366004612dc7565b610d45565b3480156104f357600080fd5b506103d6610502366004612f7f565b610d8a565b34801561051357600080fd5b506102ad610522366004612dc7565b610f96565b34801561053357600080fd5b50610547610542366004612e25565b610fa2565b6040516101f89190612fa1565b34801561056057600080fd5b506102ad61056f366004612dc7565b611123565b34801561058057600080fd5b506102ad61058f366004612dc7565b61112f565b6103d66105a2366004612fb4565b61113b565b3480156105b357600080fd5b506102ad6105c2366004613053565b6001600160a01b039190911660009081526002602090815260408083209383529290522054601b81900b91600160e01b90910463ffffffff1690565b34801561060a57600080fd5b506101ee610619366004612f62565b6001600160a01b03163190565b34801561063257600080fd5b506103966040518060400160405280601081526020017f64415049206e616d65207365747465720000000000000000000000000000000081525081565b600080600061067d846116c2565b9150915061068a84611864565b600081815260016020526040902080549194509063ffffffff808416600160e01b9092041603610710578054601b84810b91900b036107105760405162461bcd60e51b815260206004820152601a60248201527f446f6573206e6f742075706461746520426561636f6e2073657400000000000060448201526064015b60405180910390fd5b604080518082018252601b85900b80825263ffffffff858116602080850182815260008b81526001835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915285917fb7712be6248d021e8c56ac9613c09491354a4d0f4ad0b7db1a664b35be4b2349910160405180910390a2505050919050565b6000876001600160a01b031661081d84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161081792506107fc91508c908c908c908c9060200161307f565b60405160208183030381529060405280519060200120611894565b906118cf565b6001600160a01b0316146108735760405162461bcd60e51b815260206004820152601260248201527f5369676e6174757265206d69736d6174636800000000000000000000000000006044820152606401610707565b50604080516bffffffffffffffffffffffff1960608a901b1660208083019190915260348083018a9052835180840390910181526054909201909252805191012060006108c2828888886118f5565b60408051601b83900b815263ffffffff8a16602082015291925083917f1ffdb573afe7273932e253bc4b8a17b9da4d37d7219ba05e464358975b36efb7910160405180910390a250979650505050505050565b60008061092183611a4a565b91509150915091565b606080828067ffffffffffffffff81111561094757610947612bed565b604051908082528060200260200182016040528015610970578160200160208202803683370190505b5092508067ffffffffffffffff81111561098c5761098c612bed565b6040519080825280602002602001820160405280156109bf57816020015b60608152602001906001900390816109aa5790505b50915060005b81811015610a8757308686838181106109e0576109e06130a0565b90506020028101906109f291906130b6565b604051610a009291906130fd565b600060405180830381855af49150503d8060008114610a3b576040519150601f19603f3d011682016040523d82523d6000602084013e610a40565b606091505b50858381518110610a5357610a536130a0565b60200260200101858481518110610a6c57610a6c6130a0565b602090810291909101019190915290151590526001016109c5565b50509250929050565b60008054610a9d9061310d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac99061310d565b8015610b165780601f10610aeb57610100808354040283529160200191610b16565b820191906000526020600020905b815481529060010190602001808311610af957829003601f168201915b505050505081565b6000816001600160a01b0316630e15999d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b829190613141565b90506001600160a01b038116610bda5760405162461bcd60e51b815260206004820152601860248201527f42656e65666963696172792061646472657373207a65726f00000000000000006044820152606401610707565b6001600160a01b03821660009081526003602052604081205490819003610c435760405162461bcd60e51b815260206004820152601660248201527f4f45562070726f78792062616c616e6365207a65726f000000000000000000006044820152606401610707565b6001600160a01b0383811660008181526003602090815260408083209290925581519386168452830184905290917f0472be967f9a37138dfea1875af44784cafb79f92044ab33d7d6958eddd9ca6c910160405180910390a26000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610ce9576040519150601f19603f3d011682016040523d82523d6000602084013e610cee565b606091505b5050905080610d3f5760405162461bcd60e51b815260206004820152601360248201527f5769746864726177616c207265766572746564000000000000000000000000006044820152606401610707565b50505050565b60006004600083604051602001610d5e91815260200190565b604051602081830303815290604052805190602001208152602001908152602001600020549050919050565b81610dd75760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f0000000000000000000000000000000000006044820152606401610707565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610ed057506040517f91d148540000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed0919061315e565b610f1c5760405162461bcd60e51b815260206004820152601b60248201527f53656e6465722063616e6e6f74207365742064415049206e616d6500000000006044820152606401610707565b806004600084604051602001610f3491815260200190565b60408051601f1981840301815291815281516020928301208352828201939093529082016000209290925551338152839183917ff3a9aac9b6ac0f842cb5d9b3491cd5fc1b6a6778d97fd9529f587339865294f5910160405180910390a35050565b60008061092183611b7d565b6060818067ffffffffffffffff811115610fbe57610fbe612bed565b604051908082528060200260200182016040528015610ff157816020015b6060815260200190600190039081610fdc5790505b50915060005b8181101561111b57600030868684818110611014576110146130a0565b905060200281019061102691906130b6565b6040516110349291906130fd565b600060405180830381855af49150503d806000811461106f576040519150601f19603f3d011682016040523d82523d6000602084013e611074565b606091505b50858481518110611087576110876130a0565b60209081029190910101529050806111125760008483815181106110ad576110ad6130a0565b602002602001015190506000815111156110ca5780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e6700000000006044820152606401610707565b50600101610ff7565b505092915050565b60008061092183611bf5565b60008061092183611ccd565b8442610e1001811061118f5760405162461bcd60e51b815260206004820152601360248201527f54696d657374616d70206e6f742076616c6964000000000000000000000000006044820152606401610707565b6001600160a01b03891660009081526002602090815260408083208b8452909152902054600160e01b900463ffffffff16861161120e5760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f74207570646174652074696d657374616d70000000000000006044820152606401610707565b600046308b8b8b8b8b8b33346040516020016112339a99989796959493929190613180565b604051602081830303815290604052805190602001209050600061128c87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d9f92505050565b9050878460018111156114615760008167ffffffffffffffff8111156112b4576112b4612bed565b6040519080825280602002602001820160405280156112dd578160200160208202803683370190505b5090506000805b8381101561135057600061131b888c8c85818110611304576113046130a0565b905060200281019061131691906130b6565b611ea2565b85848151811061132d5761132d6130a0565b602090810291909101015290508015611347576001909201915b506001016112e4565b5061135c6002846131ff565b81116113aa5760405162461bcd60e51b815260206004820152601560248201527f4e6f7420656e6f756768207369676e61747572657300000000000000000000006044820152606401610707565b6113b382611864565b8e146114015760405162461bcd60e51b815260206004820152601660248201527f426561636f6e20736574204944206d69736d61746368000000000000000000006044820152606401610707565b8c8f6001600160a01b03168f7fdd29860e0772a39dea2ff0520d79f8efdffe48c903d6bbbc0c2cc65dc6568a7f8888604051611452929190601b9290920b825263ffffffff16602082015260400190565b60405180910390a450506115cb565b8060010361158357600080611483868a8a6000818110611304576113046130a0565b91509150816114d45760405162461bcd60e51b815260206004820152601160248201527f4d697373696e67207369676e61747572650000000000000000000000000000006044820152606401610707565b808e146115235760405162461bcd60e51b815260206004820152601260248201527f426561636f6e204944206d69736d6174636800000000000000000000000000006044820152606401610707565b50508a8d6001600160a01b03168d7fc856aaa4e639403f366ad68f07eb69bad4c044a35b0369c4ef1ea3a427a6a0ee8686604051611576929190601b9290920b825263ffffffff16602082015260400190565b60405180910390a46115cb565b60405162461bcd60e51b815260206004820152601b60248201527f446964206e6f74207370656369667920616e7920426561636f6e7300000000006044820152606401610707565b604051806040016040528084601b0b81526020018363ffffffff16815250600260008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060008201518160000160006101000a8154816001600160e01b030219169083601b0b6001600160e01b03160217905550602082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555090505034600360008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546116ae9190613213565b909155505050505050505050505050505050565b80516000908190600181116117195760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e73006044820152606401610707565b60008167ffffffffffffffff81111561173457611734612bed565b60405190808252806020026020018201604052801561175d578160200160208202803683370190505b50905060008267ffffffffffffffff81111561177b5761177b612bed565b6040519080825280602002602001820160405280156117a4578160200160208202803683370190505b50905060005b83811015611845576000600160008984815181106117ca576117ca6130a0565b602090810291909101810151825281019190915260400160002080548551919250601b0b90859084908110611801576118016130a0565b602090810291909101015280548351600160e01b90910463ffffffff1690849084908110611831576118316130a0565b6020908102919091010152506001016117aa565b5061184f82611fa4565b945061185a81611fa4565b9350505050915091565b6000816040516020016118779190613234565b604051602081830303815290604052805190602001209050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01611877565b60008060006118de85856120fd565b915091506118eb81612142565b5090505b92915050565b60008342610e1001811061194b5760405162461bcd60e51b815260206004820152601360248201527f54696d657374616d70206e6f742076616c6964000000000000000000000000006044820152606401610707565b61198a84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d9f92505050565b600087815260016020526040902054909250600160e01b900463ffffffff1685116119f75760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f74207570646174652074696d657374616d70000000000000006044820152606401610707565b50604080518082018252601b83900b815263ffffffff95861660208083019182526000988952600190529190962095519051909416600160e01b026001600160e01b039094169390931790935550919050565b600081815260046020526040812054819080611aa85760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f74207365740000000000000000000000000000006044820152606401610707565b336000908152600260209081526040808320848452825280832060019092529091208054825463ffffffff600160e01b92839004811692909104161115611b06578154601b81900b9550600160e01b900463ffffffff169350611b1f565b8054601b81900b9550600160e01b900463ffffffff1693505b60008463ffffffff1611611b755760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610707565b505050915091565b60008181526001602052604090208054601b81900b91600160e01b90910463ffffffff169081611bef5760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610707565b50915091565b600081815260046020526040812054819080611c535760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f74207365740000000000000000000000000000006044820152606401610707565b60008181526001602052604090208054601b81900b9450600160e01b900463ffffffff16925082611cc65760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610707565b5050915091565b336000908152600260209081526040808320848452825280832060019092528220805482548493929163ffffffff600160e01b918290048116919092049091161115611d30578154601b81900b9450600160e01b900463ffffffff169250611d49565b8054601b81900b9450600160e01b900463ffffffff1692505b60008363ffffffff1611611cc65760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610707565b60008151602014611df25760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f72726563740000000000000000006044820152606401610707565b600082806020019051810190611e089190613278565b90507fffffffff800000000000000000000000000000000000000000000000000000008112801590611e5657507b7fffffffffffffffffffffffffffffffffffffffffffffffffffffff8113155b6118ef5760405162461bcd60e51b815260206004820152601760248201527f56616c7565207479706563617374696e67206572726f720000000000000000006044820152606401610707565b600080808080611eb486880188613291565b925092509250611f0683836040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b93508051600014611f9957826001600160a01b0316611f3e826108178b866040516020016107fc929190918252602082015260400190565b6001600160a01b031614611f945760405162461bcd60e51b815260206004820152601260248201527f5369676e6174757265206d69736d6174636800000000000000000000000000006044820152606401610707565b600194505b505050935093915050565b80516000906009811161207d57611fba836122aa565b611fc5600282613342565b600103611ff85782611fd86002836131ff565b81518110611fe857611fe86130a0565b6020026020010151915050919050565b8060000361200857612008613356565b612076836001600284040381518110612023576120236130a0565b6020026020010151846002848161203c5761203c6131e9565b048151811061204d5761204d6130a0565b6020026020010151600182811d82821d01838316919091160160ff81901c838318160192915050565b9392505050565b612088600282613342565b6001036120a45782611fd88161209f6002856131ff565b6127bc565b6000806120b785600160028604036127e9565b80925081935050506120ee8583815181106120d4576120d46130a0565b602002602001015186838151811061204d5761204d6130a0565b95945050505050565b50919050565b60008082516041036121335760208301516040840151606085015160001a6121278782858561281e565b9450945050505061213b565b506000905060025b9250929050565b60008160048111156121565761215661336c565b0361215e5750565b60018160048111156121725761217261336c565b036121bf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610707565b60028160048111156121d3576121d361336c565b036122205760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610707565b60038160048111156122345761223461336c565b036122a75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610707565b50565b805160098111156122fd5760405162461bcd60e51b815260206004820152601660248201527f417272617920746f6f206c6f6e6720746f20736f7274000000000000000000006044820152606401610707565b600681101561240857600481101561235757806003036123425761232482600060016128e2565b61233182600160026128e2565b61233e82600060016128e2565b5050565b8060020361233e5761233e82600060016128e2565b806005036123d45761236c82600160026128e2565b61237982600360046128e2565b61238682600160036128e2565b61239382600060026128e2565b6123a082600260046128e2565b6123ad82600060036128e2565b6123ba82600060016128e2565b6123c782600260036128e2565b61233e82600160026128e2565b6123e182600060016128e2565b6123ee82600260036128e2565b6123fb82600160036128e2565b6123c782600060026128e2565b600881101561258557806007036124e95761242682600160026128e2565b61243382600360046128e2565b61244082600560066128e2565b61244d82600060026128e2565b61245a82600460066128e2565b61246782600360056128e2565b61247482600260066128e2565b61248182600160056128e2565b61248e82600060046128e2565b61249b82600260056128e2565b6124a882600060036128e2565b6124b582600260046128e2565b6124c282600160036128e2565b6124cf82600060016128e2565b6124dc82600260036128e2565b61233e82600460056128e2565b6124f682600060016128e2565b61250382600260036128e2565b61251082600460056128e2565b61251d82600160036128e2565b61252a82600360056128e2565b61253782600160036128e2565b61254482600260046128e2565b61255182600060026128e2565b61255e82600260046128e2565b61256b82600360046128e2565b61257882600160026128e2565b61233e82600260036128e2565b806009036126b85761259a82600160086128e2565b6125a782600260076128e2565b6125b482600360066128e2565b6125c182600460056128e2565b6125ce82600160046128e2565b6125db82600560086128e2565b6125e882600060026128e2565b6125f582600660076128e2565b61260282600260066128e2565b61260f82600760086128e2565b61261c82600060036128e2565b61262982600460056128e2565b61263682600060016128e2565b61264382600360056128e2565b61265082600660076128e2565b61265d82600260046128e2565b61266a82600160036128e2565b61267782600560076128e2565b61268482600460066128e2565b61269182600160026128e2565b61269e82600360046128e2565b6126ab82600560066128e2565b6124cf82600760086128e2565b6126c582600060076128e2565b6126d282600160066128e2565b6126df82600260056128e2565b6126ec82600360046128e2565b6126f982600060036128e2565b61270682600460076128e2565b61271382600160026128e2565b61272082600560066128e2565b61272d82600060016128e2565b61273a82600260036128e2565b61274782600460056128e2565b61275482600660076128e2565b61276182600360056128e2565b61276e82600260046128e2565b61277b82600160026128e2565b61278882600360046128e2565b61279582600560066128e2565b6127a282600260036128e2565b6127af82600460056128e2565b61233e82600360046128e2565b8151600090806127ce576127ce613356565b6127e084600060018403866000612990565b50949350505050565b815160009081906001811161280057612800613356565b61281285600060018403876001612990565b90969095509350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561285557506000905060036128d9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156128a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128d2576000600192509250506128d9565b9150600090505b94509492505050565b8281815181106128f4576128f46130a0565b602002602001015183838151811061290e5761290e6130a0565b6020026020010151131561298b5782818151811061292e5761292e6130a0565b6020026020010151838381518110612948576129486130a0565b6020026020010151848481518110612962576129626130a0565b6020026020010185848151811061297b5761297b6130a0565b6020908102919091010191909152525b505050565b6000808486036129a557508290506000612a5c565b60006129b2888888612a66565b9050808510156129d5576129cd888860018403886000612990565b5092506129f2565b808511156129ee576129cd888260010188886000612990565b8092505b8315612a5a57875160018401925060028401905b80821015612a5757898481518110612a2057612a206130a0565b60200260200101518a8381518110612a3a57612a3a6130a0565b60200260200101511215612a4c578193505b600190910190612a06565b50505b505b9550959350505050565b6000818303612a76575081612076565b6000848481518110612a8a57612a8a6130a0565b6020026020010151905060008490508360010192505b855160019091019081108015612ace575081868281518110612ac457612ac46130a0565b6020026020010151125b612aa0575b82806001900393505081868481518110612aef57612aef6130a0565b602002602001015113612ad357828110612b7a57858381518110612b1557612b156130a0565b6020026020010151868681518110612b2f57612b2f6130a0565b6020026020010151878781518110612b4957612b496130a0565b60200260200101888681518110612b6257612b626130a0565b60200260200101828152508281525050505050612076565b858381518110612b8c57612b8c6130a0565b6020026020010151868281518110612ba657612ba66130a0565b6020026020010151878381518110612bc057612bc06130a0565b60200260200101888681518110612bd957612bd96130a0565b602090810291909101019190915252612aa0565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c2c57612c2c612bed565b604052919050565b60006020808385031215612c4757600080fd5b823567ffffffffffffffff80821115612c5f57600080fd5b818501915085601f830112612c7357600080fd5b813581811115612c8557612c85612bed565b8060051b9150612c96848301612c03565b8181529183018401918481019088841115612cb057600080fd5b938501935b83851015612cce57843582529385019390850190612cb5565b98975050505050505050565b6001600160a01b03811681146122a757600080fd5b60008083601f840112612d0157600080fd5b50813567ffffffffffffffff811115612d1957600080fd5b60208301915083602082850101111561213b57600080fd5b600080600080600080600060a0888a031215612d4c57600080fd5b8735612d5781612cda565b96506020880135955060408801359450606088013567ffffffffffffffff80821115612d8257600080fd5b612d8e8b838c01612cef565b909650945060808a0135915080821115612da757600080fd5b50612db48a828b01612cef565b989b979a50959850939692959293505050565b600060208284031215612dd957600080fd5b5035919050565b60008083601f840112612df257600080fd5b50813567ffffffffffffffff811115612e0a57600080fd5b6020830191508360208260051b850101111561213b57600080fd5b60008060208385031215612e3857600080fd5b823567ffffffffffffffff811115612e4f57600080fd5b61281285828601612de0565b6000815180845260005b81811015612e8157602081850181015186830182015201612e65565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612ee9578284038952612ed7848351612e5b565b98850198935090840190600101612ebf565b5091979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612f31578151151584529284019290840190600101612f13565b50505083810382850152612f458186612ea1565b9695505050505050565b6020815260006120766020830184612e5b565b600060208284031215612f7457600080fd5b813561207681612cda565b60008060408385031215612f9257600080fd5b50508035926020909101359150565b6020815260006120766020830184612ea1565b60008060008060008060008060c0898b031215612fd057600080fd5b8835612fdb81612cda565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff8082111561300d57600080fd5b6130198c838d01612cef565b909650945060a08b013591508082111561303257600080fd5b5061303f8b828c01612de0565b999c989b5096995094979396929594505050565b6000806040838503121561306657600080fd5b823561307181612cda565b946020939093013593505050565b84815283602082015281836040830137600091016040019081529392505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126130cd57600080fd5b83018035915067ffffffffffffffff8211156130e857600080fd5b60200191503681900382131561213b57600080fd5b8183823760009101908152919050565b600181811c9082168061312157607f821691505b6020821081036120f757634e487b7160e01b600052602260045260246000fd5b60006020828403121561315357600080fd5b815161207681612cda565b60006020828403121561317057600080fd5b8151801515811461207657600080fd5b8a815260006bffffffffffffffffffffffff19808c60601b166020840152808b60601b166034840152896048840152886068840152876088840152858760a885013760609490941b909316930160a881019390935260bc8301525060dc01979650505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261320e5761320e6131e9565b500490565b808201808211156118ef57634e487b7160e01b600052601160045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561326c57835183529284019291840191600101613250565b50909695505050505050565b60006020828403121561328a57600080fd5b5051919050565b6000806000606084860312156132a657600080fd5b83356132b181612cda565b92506020848101359250604085013567ffffffffffffffff808211156132d657600080fd5b818701915087601f8301126132ea57600080fd5b8135818111156132fc576132fc612bed565b61330e601f8201601f19168501612c03565b9150808252888482850101111561332457600080fd5b80848401858401376000848284010152508093505050509250925092565b600082613351576133516131e9565b500690565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220693313c61a998d79d0e9b250367bd14ac439bd3d1d1f36bf50317fc99059456d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_accessControlRegistry": "AccessControlRegistry contract address",
          "_adminRoleDescription": "Admin role description",
          "_manager": "Manager address"
        }
      },
      "containsBytecode(address)": {
        "details": "An account not containing any bytecode does not indicate that it is an EOA or it will not contain any bytecode in the future. Contract construction and `SELFDESTRUCT` updates the bytecode at the end of the transaction.",
        "returns": {
          "_0": "If the account contains bytecode"
        }
      },
      "dapiNameToDataFeedId(bytes32)": {
        "params": {
          "dapiName": "dAPI name"
        },
        "returns": {
          "_0": "Data feed ID"
        }
      },
      "getBalance(address)": {
        "params": {
          "account": "Account address"
        },
        "returns": {
          "_0": "Account balance"
        }
      },
      "getBlockBasefee()": {
        "returns": {
          "_0": "Current block basefee"
        }
      },
      "getBlockNumber()": {
        "returns": {
          "_0": "Current block number"
        }
      },
      "getBlockTimestamp()": {
        "returns": {
          "_0": "Current block timestamp"
        }
      },
      "getChainId()": {
        "returns": {
          "_0": "Chain ID"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls"
        }
      },
      "readDataFeedWithDapiNameHash(bytes32)": {
        "params": {
          "dapiNameHash": "dAPI name hash"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "readDataFeedWithDapiNameHashAsOevProxy(bytes32)": {
        "params": {
          "dapiNameHash": "dAPI name hash"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "readDataFeedWithId(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "readDataFeedWithIdAsOevProxy(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "setDapiName(bytes32,bytes32)": {
        "details": "While a data feed ID refers to a specific Beacon or Beacon set, dAPI names provide a more abstract interface for convenience. This means a dAPI name that was pointing to a Beacon can be pointed to a Beacon set, then another Beacon set, etc.",
        "params": {
          "dapiName": "Human-readable dAPI name",
          "dataFeedId": "Data feed ID the dAPI name will point to"
        }
      },
      "tryMulticall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls",
          "successes": "Array of success conditions of batched calls"
        }
      },
      "updateBeaconSetWithBeacons(bytes32[])": {
        "details": "As an oddity, this function still works if some of the IDs in `beaconIds` belong to Beacon sets rather than Beacons. This can be used to implement hierarchical Beacon sets.",
        "params": {
          "beaconIds": "Beacon IDs"
        },
        "returns": {
          "beaconSetId": "Beacon set ID"
        }
      },
      "updateBeaconWithSignedData(address,bytes32,uint256,bytes,bytes)": {
        "details": "The signed data here is intentionally very general for practical reasons. It is less demanding on the signer to have data signed once and use that everywhere.",
        "params": {
          "airnode": "Airnode address",
          "data": "Update data (an `int256` encoded in contract ABI)",
          "signature": "Template ID, timestamp and the update data signed by the Airnode",
          "templateId": "Template ID",
          "timestamp": "Signature timestamp"
        },
        "returns": {
          "beaconId": "Updated Beacon ID"
        }
      },
      "updateOevProxyDataFeedWithSignedData(address,bytes32,bytes32,uint256,bytes,bytes[])": {
        "details": "For when the data feed being updated is a Beacon set, an absolute majority of the Airnodes that power the respective Beacons must sign the aggregated value and timestamp. While doing so, the Airnodes should refer to data signed to update an absolute majority of the respective Beacons. The Airnodes should require the data to be fresh enough (e.g., at most 2 minutes-old), and tightly distributed around the resulting aggregation (e.g., within 1% deviation), and reject to provide an OEV proxy data feed update signature if these are not satisfied.",
        "params": {
          "data": "Update data (an `int256` encoded in contract ABI)",
          "dataFeedId": "Data feed ID",
          "oevProxy": "OEV proxy that reads the data feed",
          "packedOevUpdateSignatures": "Packed OEV update signatures, which include the Airnode address, template ID and these signed with the OEV update hash",
          "timestamp": "Signature timestamp",
          "updateId": "Update ID"
        }
      },
      "withdraw(address)": {
        "details": "This does not require the caller to be the beneficiary because we expect that in most cases, the OEV beneficiary will be a contract that will not be able to make arbitrary calls. Our choice can be worked around by implementing a beneficiary proxy.",
        "params": {
          "oevProxy": "OEV proxy"
        }
      }
    },
    "title": "First version of the contract that API3 uses to serve data feeds",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DAPI_NAME_SETTER_ROLE_DESCRIPTION()": {
        "notice": "dAPI name setter role description"
      },
      "accessControlRegistry()": {
        "notice": "AccessControlRegistry contract address"
      },
      "adminRole()": {
        "notice": "Admin role"
      },
      "adminRoleDescription()": {
        "notice": "Admin role description"
      },
      "containsBytecode(address)": {
        "notice": "Returns if the account contains bytecode"
      },
      "dapiNameHashToDataFeedId(bytes32)": {
        "notice": "dAPI name hash mapped to the data feed ID"
      },
      "dapiNameSetterRole()": {
        "notice": "dAPI name setter role"
      },
      "dapiNameToDataFeedId(bytes32)": {
        "notice": "Returns the data feed ID the dAPI name is set to"
      },
      "getBalance(address)": {
        "notice": "Returns the account balance"
      },
      "getBlockBasefee()": {
        "notice": "Returns the current block basefee"
      },
      "getBlockNumber()": {
        "notice": "Returns the current block number"
      },
      "getBlockTimestamp()": {
        "notice": "Returns the current block timestamp"
      },
      "getChainId()": {
        "notice": "Returns the chain ID"
      },
      "manager()": {
        "notice": "Address of the manager that manages the related AccessControlRegistry roles"
      },
      "multicall(bytes[])": {
        "notice": "Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts"
      },
      "oevProxyToBalance(address)": {
        "notice": "Accumulated OEV auction proceeds for the specific proxy"
      },
      "readDataFeedWithDapiNameHash(bytes32)": {
        "notice": "Reads the data feed with dAPI name hash"
      },
      "readDataFeedWithDapiNameHashAsOevProxy(bytes32)": {
        "notice": "Reads the data feed as the OEV proxy with dAPI name hash"
      },
      "readDataFeedWithId(bytes32)": {
        "notice": "Reads the data feed with ID"
      },
      "readDataFeedWithIdAsOevProxy(bytes32)": {
        "notice": "Reads the data feed as the OEV proxy with ID"
      },
      "setDapiName(bytes32,bytes32)": {
        "notice": "Sets the data feed ID the dAPI name points to"
      },
      "tryMulticall(bytes[])": {
        "notice": "Batches calls to the inheriting contract but does not revert if any of the batched calls reverts"
      },
      "updateBeaconSetWithBeacons(bytes32[])": {
        "notice": "Updates the Beacon set using the current values of its Beacons"
      },
      "updateBeaconWithSignedData(address,bytes32,uint256,bytes,bytes)": {
        "notice": "Updates a Beacon using data signed by the Airnode"
      },
      "updateOevProxyDataFeedWithSignedData(address,bytes32,bytes32,uint256,bytes,bytes[])": {
        "notice": "Updates a data feed that the OEV proxy reads using the aggregation signed by the absolute majority of the respective Airnodes for the specific bid"
      },
      "withdraw(address)": {
        "notice": "Withdraws the balance of the OEV proxy to the respective beneficiary account"
      }
    },
    "notice": "Api3ServerV1 serves data feeds in the form of Beacons, Beacon sets, dAPIs, with optional OEV support for all of these. The base Beacons are only updateable using signed data, and the Beacon sets are updateable based on the Beacons, optionally using PSP. OEV proxy Beacons and Beacon sets are updateable using OEV-signed data. Api3ServerV1 does not support Beacons to be updated using RRP or PSP.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/api3-server-v1/Api3ServerV1.sol:Api3ServerV1",
        "label": "adminRoleDescription",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 4593,
        "contract": "contracts/api3-server-v1/Api3ServerV1.sol:Api3ServerV1",
        "label": "_dataFeeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(DataFeed)4587_storage)"
      },
      {
        "astId": 6681,
        "contract": "contracts/api3-server-v1/Api3ServerV1.sol:Api3ServerV1",
        "label": "_oevProxyToIdToDataFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(DataFeed)4587_storage))"
      },
      {
        "astId": 6687,
        "contract": "contracts/api3-server-v1/Api3ServerV1.sol:Api3ServerV1",
        "label": "oevProxyToBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4415,
        "contract": "contracts/api3-server-v1/Api3ServerV1.sol:Api3ServerV1",
        "label": "dapiNameHashToDataFeedId",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int224": {
        "encoding": "inplace",
        "label": "int224",
        "numberOfBytes": "28"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(DataFeed)4587_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct DataFeedServer.DataFeed))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(DataFeed)4587_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(DataFeed)4587_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DataFeedServer.DataFeed)",
        "numberOfBytes": "32",
        "value": "t_struct(DataFeed)4587_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DataFeed)4587_storage": {
        "encoding": "inplace",
        "label": "struct DataFeedServer.DataFeed",
        "members": [
          {
            "astId": 4584,
            "contract": "contracts/api3-server-v1/Api3ServerV1.sol:Api3ServerV1",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_int224"
          },
          {
            "astId": 4586,
            "contract": "contracts/api3-server-v1/Api3ServerV1.sol:Api3ServerV1",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
