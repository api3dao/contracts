{
  "address": "0xb45fe2838F47DCCEe00F635785EAF0c723F742E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "functionCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "tryMulticall",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe233ec9bec47d7568151182035f183002c95f425daa13d1bcfec9408d197024f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": null,
    "transactionIndex": 27,
    "gasUsed": "580132",
    "logsBloom": "0x
    "blockHash": "0x794c11d07d0fff6b063a9be75712cb6fa7ca22fe5b05e98c81c15ffce6a079ab",
    "transactionHash": "0xe233ec9bec47d7568151182035f183002c95f425daa13d1bcfec9408d197024f",
    "logs": [],
    "blockNumber": 27570965,
    "cumulativeGasUsed": "3953877",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "72c5a86a7689575c8d6e2d518b788031",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"functionCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"tryMulticall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"functionCall(address,bytes)\":{\"params\":{\"data\":\"Calldata of the external call\",\"target\":\"Target address of the external call\"},\"returns\":{\"_0\":\"Returndata of the external call\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\"}},\"tryMulticall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\",\"successes\":\"Array of success conditions of batched calls\"}}},\"title\":\"Contract that simulates external calls in single or batched form\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"functionCall(address,bytes)\":{\"notice\":\"eth_call'ed while impersonating address-zero with zero gas price to simulate an external call\"},\"multicall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts\"},\"tryMulticall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract but does not revert if any of the batched calls reverts\"}},\"notice\":\"This contract requires address-zero to be impersonated and zero gas price to be used while making external calls to ensure that it is only used for simulating outcomes rather than sending transactions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/ExternalMulticallSimulator.sol\":\"ExternalMulticallSimulator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/utils/ExternalMulticallSimulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../utils/SelfMulticall.sol\\\";\\nimport \\\"./interfaces/IExternalMulticallSimulator.sol\\\";\\nimport \\\"../vendor/@openzeppelin/contracts@4.9.5/utils/Address.sol\\\";\\n\\n/// @title Contract that simulates external calls in single or batched form\\n/// @notice This contract requires address-zero to be impersonated and zero gas\\n/// price to be used while making external calls to ensure that it is only used\\n/// for simulating outcomes rather than sending transactions\\ncontract ExternalMulticallSimulator is\\n    SelfMulticall,\\n    IExternalMulticallSimulator\\n{\\n    /// @notice eth_call'ed while impersonating address-zero with zero gas\\n    /// price to simulate an external call\\n    /// @param target Target address of the external call\\n    /// @param data Calldata of the external call\\n    /// @return Returndata of the external call\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) external override returns (bytes memory) {\\n        require(msg.sender == address(0), \\\"Sender address not zero\\\");\\n        require(tx.gasprice == 0, \\\"Tx gas price not zero\\\");\\n        return Address.functionCall(target, data);\\n    }\\n}\\n\",\"keccak256\":\"0xc4df6fdc38866827a00965926868b5607c7c24fab308fa7548c9749757f12bef\",\"license\":\"MIT\"},\"contracts/utils/SelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISelfMulticall.sol\\\";\\n\\n/// @title Contract that enables calls to the inheriting contract to be batched\\n/// @notice Implements two ways of batching, one requires none of the calls to\\n/// revert and the other tolerates individual calls reverting\\n/// @dev This implementation uses delegatecall for individual function calls.\\n/// Since delegatecall is a message call, it can only be made to functions that\\n/// are externally visible. This means that a contract cannot multicall its own\\n/// functions that use internal/private visibility modifiers.\\n/// Refer to OpenZeppelin's Multicall.sol for a similar implementation.\\ncontract SelfMulticall is ISelfMulticall {\\n    /// @notice Batches calls to the inheriting contract and reverts as soon as\\n    /// one of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function multicall(\\n        bytes[] calldata data\\n    ) external override returns (bytes[] memory returndata) {\\n        uint256 callCount = data.length;\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            bool success;\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (success, returndata[ind]) = address(this).delegatecall(data[ind]);\\n            if (!success) {\\n                bytes memory returndataWithRevertData = returndata[ind];\\n                if (returndataWithRevertData.length > 0) {\\n                    // Adapted from OpenZeppelin's Address.sol\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        let returndata_size := mload(returndataWithRevertData)\\n                        revert(\\n                            add(32, returndataWithRevertData),\\n                            returndata_size\\n                        )\\n                    }\\n                } else {\\n                    revert(\\\"Multicall: No revert string\\\");\\n                }\\n            }\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Batches calls to the inheriting contract but does not revert if\\n    /// any of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return successes Array of success conditions of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function tryMulticall(\\n        bytes[] calldata data\\n    )\\n        external\\n        override\\n        returns (bool[] memory successes, bytes[] memory returndata)\\n    {\\n        uint256 callCount = data.length;\\n        successes = new bool[](callCount);\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (successes[ind], returndata[ind]) = address(this).delegatecall(\\n                data[ind]\\n            );\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb466760f7b5d05a91fb168224952f29db9aa3308f0b83535fd697f3c30281740\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IExternalMulticallSimulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISelfMulticall.sol\\\";\\n\\ninterface IExternalMulticallSimulator is ISelfMulticall {\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd1a831f0c38432327f9b6b1d959c40b7ff50a545fee9456cc783c23f70510323\",\"license\":\"MIT\"},\"contracts/utils/interfaces/ISelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISelfMulticall {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory returndata);\\n\\n    function tryMulticall(\\n        bytes[] calldata data\\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\\n}\\n\",\"keccak256\":\"0x50b27284f0d5acd8b340836c09d252138ebf059f426e5d90d3f7221e1b7d0817\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.9.5/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610985806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063437b911614610046578063a0b5ffb014610070578063ac9650d814610090575b600080fd5b610059610054366004610636565b6100b0565b60405161006792919061074d565b60405180910390f35b61008361007e3660046107bc565b610216565b6040516100679190610899565b6100a361009e366004610636565b6102ca565b60405161006791906108ac565b606080828067ffffffffffffffff8111156100cd576100cd6107a6565b6040519080825280602002602001820160405280156100f6578160200160208202803683370190505b5092508067ffffffffffffffff811115610112576101126107a6565b60405190808252806020026020018201604052801561014557816020015b60608152602001906001900390816101305790505b50915060005b8181101561020d5730868683818110610166576101666108bf565b905060200281019061017891906108d5565b604051610186929190610923565b600060405180830381855af49150503d80600081146101c1576040519150601f19603f3d011682016040523d82523d6000602084013e6101c6565b606091505b508583815181106101d9576101d96108bf565b602002602001018584815181106101f2576101f26108bf565b6020908102919091010191909152901515905260010161014b565b50509250929050565b6060331561026b5760405162461bcd60e51b815260206004820152601760248201527f53656e6465722061646472657373206e6f74207a65726f00000000000000000060448201526064015b60405180910390fd5b3a156102b95760405162461bcd60e51b815260206004820152601560248201527f547820676173207072696365206e6f74207a65726f00000000000000000000006044820152606401610262565b6102c3838361044b565b9392505050565b6060818067ffffffffffffffff8111156102e6576102e66107a6565b60405190808252806020026020018201604052801561031957816020015b60608152602001906001900390816103045790505b50915060005b818110156104435760003086868481811061033c5761033c6108bf565b905060200281019061034e91906108d5565b60405161035c929190610923565b600060405180830381855af49150503d8060008114610397576040519150601f19603f3d011682016040523d82523d6000602084013e61039c565b606091505b508584815181106103af576103af6108bf565b602090810291909101015290508061043a5760008483815181106103d5576103d56108bf565b602002602001015190506000815111156103f25780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e6700000000006044820152606401610262565b5060010161031f565b505092915050565b60606102c3838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506060824710156105025760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610262565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161052b9190610933565b60006040518083038185875af1925050503d8060008114610568576040519150601f19603f3d011682016040523d82523d6000602084013e61056d565b606091505b509150915061057e8783838761058b565b925050505b949350505050565b606083156106075782516000036106005773ffffffffffffffffffffffffffffffffffffffff85163b6106005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610262565b5081610583565b610583838381511561061c5781518083602001fd5b8060405162461bcd60e51b81526004016102629190610899565b6000806020838503121561064957600080fd5b823567ffffffffffffffff8082111561066157600080fd5b818501915085601f83011261067557600080fd5b81358181111561068457600080fd5b8660208260051b850101111561069957600080fd5b60209290920196919550909350505050565b60005b838110156106c65781810151838201526020016106ae565b50506000910152565b600081518084526106e78160208601602086016106ab565b601f01601f19169290920160200192915050565b6000815180845260208085019450848260051b860182860160005b8581101561074057838303895261072e8383516106cf565b98850198925090840190600101610716565b5090979650505050505050565b604080825283519082018190526000906020906060840190828701845b8281101561078857815115158452928401929084019060010161076a565b5050508381038285015261079c81866106fb565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156107cf57600080fd5b823573ffffffffffffffffffffffffffffffffffffffff811681146107f357600080fd5b9150602083013567ffffffffffffffff8082111561081057600080fd5b818501915085601f83011261082457600080fd5b813581811115610836576108366107a6565b604051601f8201601f19908116603f0116810190838211818310171561085e5761085e6107a6565b8160405282815288602084870101111561087757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020815260006102c360208301846106cf565b6020815260006102c360208301846106fb565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126108ec57600080fd5b83018035915067ffffffffffffffff82111561090757600080fd5b60200191503681900382131561091c57600080fd5b9250929050565b8183823760009101908152919050565b600082516109458184602087016106ab565b919091019291505056fea2646970667358221220fb75d29fed8c3df8cc65fe0d3dc29549df89db33cd475cb87f46b57462c17d8864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063437b911614610046578063a0b5ffb014610070578063ac9650d814610090575b600080fd5b610059610054366004610636565b6100b0565b60405161006792919061074d565b60405180910390f35b61008361007e3660046107bc565b610216565b6040516100679190610899565b6100a361009e366004610636565b6102ca565b60405161006791906108ac565b606080828067ffffffffffffffff8111156100cd576100cd6107a6565b6040519080825280602002602001820160405280156100f6578160200160208202803683370190505b5092508067ffffffffffffffff811115610112576101126107a6565b60405190808252806020026020018201604052801561014557816020015b60608152602001906001900390816101305790505b50915060005b8181101561020d5730868683818110610166576101666108bf565b905060200281019061017891906108d5565b604051610186929190610923565b600060405180830381855af49150503d80600081146101c1576040519150601f19603f3d011682016040523d82523d6000602084013e6101c6565b606091505b508583815181106101d9576101d96108bf565b602002602001018584815181106101f2576101f26108bf565b6020908102919091010191909152901515905260010161014b565b50509250929050565b6060331561026b5760405162461bcd60e51b815260206004820152601760248201527f53656e6465722061646472657373206e6f74207a65726f00000000000000000060448201526064015b60405180910390fd5b3a156102b95760405162461bcd60e51b815260206004820152601560248201527f547820676173207072696365206e6f74207a65726f00000000000000000000006044820152606401610262565b6102c3838361044b565b9392505050565b6060818067ffffffffffffffff8111156102e6576102e66107a6565b60405190808252806020026020018201604052801561031957816020015b60608152602001906001900390816103045790505b50915060005b818110156104435760003086868481811061033c5761033c6108bf565b905060200281019061034e91906108d5565b60405161035c929190610923565b600060405180830381855af49150503d8060008114610397576040519150601f19603f3d011682016040523d82523d6000602084013e61039c565b606091505b508584815181106103af576103af6108bf565b602090810291909101015290508061043a5760008483815181106103d5576103d56108bf565b602002602001015190506000815111156103f25780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e6700000000006044820152606401610262565b5060010161031f565b505092915050565b60606102c3838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506060824710156105025760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610262565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161052b9190610933565b60006040518083038185875af1925050503d8060008114610568576040519150601f19603f3d011682016040523d82523d6000602084013e61056d565b606091505b509150915061057e8783838761058b565b925050505b949350505050565b606083156106075782516000036106005773ffffffffffffffffffffffffffffffffffffffff85163b6106005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610262565b5081610583565b610583838381511561061c5781518083602001fd5b8060405162461bcd60e51b81526004016102629190610899565b6000806020838503121561064957600080fd5b823567ffffffffffffffff8082111561066157600080fd5b818501915085601f83011261067557600080fd5b81358181111561068457600080fd5b8660208260051b850101111561069957600080fd5b60209290920196919550909350505050565b60005b838110156106c65781810151838201526020016106ae565b50506000910152565b600081518084526106e78160208601602086016106ab565b601f01601f19169290920160200192915050565b6000815180845260208085019450848260051b860182860160005b8581101561074057838303895261072e8383516106cf565b98850198925090840190600101610716565b5090979650505050505050565b604080825283519082018190526000906020906060840190828701845b8281101561078857815115158452928401929084019060010161076a565b5050508381038285015261079c81866106fb565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156107cf57600080fd5b823573ffffffffffffffffffffffffffffffffffffffff811681146107f357600080fd5b9150602083013567ffffffffffffffff8082111561081057600080fd5b818501915085601f83011261082457600080fd5b813581811115610836576108366107a6565b604051601f8201601f19908116603f0116810190838211818310171561085e5761085e6107a6565b8160405282815288602084870101111561087757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020815260006102c360208301846106cf565b6020815260006102c360208301846106fb565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126108ec57600080fd5b83018035915067ffffffffffffffff82111561090757600080fd5b60200191503681900382131561091c57600080fd5b9250929050565b8183823760009101908152919050565b600082516109458184602087016106ab565b919091019291505056fea2646970667358221220fb75d29fed8c3df8cc65fe0d3dc29549df89db33cd475cb87f46b57462c17d8864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "functionCall(address,bytes)": {
        "params": {
          "data": "Calldata of the external call",
          "target": "Target address of the external call"
        },
        "returns": {
          "_0": "Returndata of the external call"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls"
        }
      },
      "tryMulticall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls",
          "successes": "Array of success conditions of batched calls"
        }
      }
    },
    "title": "Contract that simulates external calls in single or batched form",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "functionCall(address,bytes)": {
        "notice": "eth_call'ed while impersonating address-zero with zero gas price to simulate an external call"
      },
      "multicall(bytes[])": {
        "notice": "Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts"
      },
      "tryMulticall(bytes[])": {
        "notice": "Batches calls to the inheriting contract but does not revert if any of the batched calls reverts"
      }
    },
    "notice": "This contract requires address-zero to be impersonated and zero gas price to be used while making external calls to ensure that it is only used for simulating outcomes rather than sending transactions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
