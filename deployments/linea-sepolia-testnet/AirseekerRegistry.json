{
  "address": "0x7B42df2563E128Ae3F68e2CFB1904808F61C8F12",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "api3ServerV1_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "ActivatedDapiName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "ActivatedDataFeedId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "DeactivatedDapiName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "DeactivatedDataFeedId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "dataFeedDetails",
          "type": "bytes"
        }
      ],
      "name": "RegisteredDataFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "updateParameters",
          "type": "bytes"
        }
      ],
      "name": "UpdatedDapiNameUpdateParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "updateParameters",
          "type": "bytes"
        }
      ],
      "name": "UpdatedDataFeedIdUpdateParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "signedApiUrl",
          "type": "string"
        }
      ],
      "name": "UpdatedSignedApiUrl",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_BEACON_COUNT_IN_SET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_SIGNED_API_URL_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_UPDATE_PARAMETERS_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeDapiNameCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "activeDataFeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "dataFeedDetails",
          "type": "bytes"
        },
        {
          "internalType": "int224",
          "name": "dataFeedValue",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "dataFeedTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "int224[]",
          "name": "beaconValues",
          "type": "int224[]"
        },
        {
          "internalType": "uint32[]",
          "name": "beaconTimestamps",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes",
          "name": "updateParameters",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "signedApiUrls",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeDataFeedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeDataFeedIdCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "airnodeToSignedApiUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "api3ServerV1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "containsBytecode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "dapiNameToUpdateParameters",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "updateParameters",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "dataFeedIdToDetails",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "dataFeedIdToUpdateParameters",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "updateParameters",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "dataFeedIsRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockBasefee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "dataFeedDetails",
          "type": "bytes"
        }
      ],
      "name": "registerDataFeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "setDapiNameToBeActivated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "setDapiNameToBeDeactivated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "updateParameters",
          "type": "bytes"
        }
      ],
      "name": "setDapiNameUpdateParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "setDataFeedIdToBeActivated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "setDataFeedIdToBeDeactivated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "updateParameters",
          "type": "bytes"
        }
      ],
      "name": "setDataFeedIdUpdateParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "signedApiUrl",
          "type": "string"
        }
      ],
      "name": "setSignedApiUrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "tryMulticall",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc4f0f90b291020801787c665f101e23d9d495cb6d5495314e6f065e3588a46f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "2414243",
    "logsBloom": "0x
    "blockHash": "0xaff9235c7a5cee4da27383f356ca9767ea59bdbed01b2e30199880b4d1a10ffc",
    "transactionHash": "0xfc4f0f90b291020801787c665f101e23d9d495cb6d5495314e6f065e3588a46f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5055235,
        "transactionHash": "0xfc4f0f90b291020801787c665f101e23d9d495cb6d5495314e6f065e3588a46f",
        "address": "0x7B42df2563E128Ae3F68e2CFB1904808F61C8F12",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f5c77bb36a16118ccc9ca83ddee8a01b6c01811"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaff9235c7a5cee4da27383f356ca9767ea59bdbed01b2e30199880b4d1a10ffc"
      }
    ],
    "blockNumber": 5055235,
    "cumulativeGasUsed": "2435243",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x3f5C77BB36a16118ccC9Ca83ddEe8A01b6C01811", "0x709944a48cAf83535e43471680fDA4905FB3920a"],
  "numDeployments": 1,
  "solcInputHash": "de732d772112aad69480d1de96d03ebc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"api3ServerV1_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"ActivatedDapiName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"ActivatedDataFeedId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"DeactivatedDapiName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"DeactivatedDataFeedId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataFeedDetails\",\"type\":\"bytes\"}],\"name\":\"RegisteredDataFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"updateParameters\",\"type\":\"bytes\"}],\"name\":\"UpdatedDapiNameUpdateParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"updateParameters\",\"type\":\"bytes\"}],\"name\":\"UpdatedDataFeedIdUpdateParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signedApiUrl\",\"type\":\"string\"}],\"name\":\"UpdatedSignedApiUrl\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_BEACON_COUNT_IN_SET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_SIGNED_API_URL_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_UPDATE_PARAMETERS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeDapiNameCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"activeDataFeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataFeedDetails\",\"type\":\"bytes\"},{\"internalType\":\"int224\",\"name\":\"dataFeedValue\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"dataFeedTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int224[]\",\"name\":\"beaconValues\",\"type\":\"int224[]\"},{\"internalType\":\"uint32[]\",\"name\":\"beaconTimestamps\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"updateParameters\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"signedApiUrls\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeDataFeedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeDataFeedIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airnodeToSignedApiUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3ServerV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"containsBytecode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"dapiNameToUpdateParameters\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"updateParameters\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dataFeedIdToDetails\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"dataFeedIdToUpdateParameters\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"updateParameters\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"dataFeedIsRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dataFeedDetails\",\"type\":\"bytes\"}],\"name\":\"registerDataFeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"setDapiNameToBeActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"setDapiNameToBeDeactivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"updateParameters\",\"type\":\"bytes\"}],\"name\":\"setDapiNameUpdateParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"setDataFeedIdToBeActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"setDataFeedIdToBeDeactivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"updateParameters\",\"type\":\"bytes\"}],\"name\":\"setDataFeedIdUpdateParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"signedApiUrl\",\"type\":\"string\"}],\"name\":\"setSignedApiUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"tryMulticall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"activeDapiNameCount()\":{\"returns\":{\"_0\":\"Active dAPI name count\"}},\"activeDataFeed(uint256)\":{\"details\":\"Airseeker uses this function to get all the data it needs about an active data feed with a single RPC call. Since active data feed IDs and dAPI names are kept in respective EnumerableSet types, addition and removal of items to these may change the order of the remaining items. Therefore, do not depend on an index to address a specific data feed consistently.\",\"params\":{\"index\":\"Index\"},\"returns\":{\"beaconTimestamps\":\"Beacon timestamps read from Api3ServerV1\",\"beaconValues\":\"Beacon values read from Api3ServerV1\",\"dapiName\":\"dAPI name (`bytes32(0)` if the active data feed is identified by a data feed ID)\",\"dataFeedDetails\":\"Data feed details\",\"dataFeedId\":\"Data feed ID\",\"dataFeedTimestamp\":\"Data feed timestamp read from Api3ServerV1\",\"dataFeedValue\":\"Data feed value read from Api3ServerV1\",\"signedApiUrls\":\"Signed API URLs of the Beacon Airnodes\",\"updateParameters\":\"Update parameters\"}},\"activeDataFeedCount()\":{\"returns\":{\"_0\":\"Active data feed count\"}},\"activeDataFeedIdCount()\":{\"returns\":{\"_0\":\"Active data feed ID count\"}},\"constructor\":{\"params\":{\"api3ServerV1_\":\"Api3ServerV1 contract address\",\"owner_\":\"Owner address\"}},\"containsBytecode(address)\":{\"details\":\"An account not containing any bytecode does not indicate that it is an EOA or it will not contain any bytecode in the future. Contract construction and `SELFDESTRUCT` updates the bytecode at the end of the transaction.\",\"returns\":{\"_0\":\"If the account contains bytecode\"}},\"dapiNameToUpdateParameters(bytes32)\":{\"params\":{\"dapiName\":\"dAPI name\"},\"returns\":{\"updateParameters\":\"Update parameters\"}},\"dataFeedIdToUpdateParameters(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"},\"returns\":{\"updateParameters\":\"Update parameters\"}},\"dataFeedIsRegistered(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"},\"returns\":{\"_0\":\"If the data feed with ID is registered\"}},\"getBalance(address)\":{\"params\":{\"account\":\"Account address\"},\"returns\":{\"_0\":\"Account balance\"}},\"getBlockBasefee()\":{\"returns\":{\"_0\":\"Current block basefee\"}},\"getBlockNumber()\":{\"returns\":{\"_0\":\"Current block number\"}},\"getBlockTimestamp()\":{\"returns\":{\"_0\":\"Current block timestamp\"}},\"getChainId()\":{\"returns\":{\"_0\":\"Chain ID\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\"}},\"owner()\":{\"returns\":{\"_0\":\"Owner address\"}},\"registerDataFeed(bytes)\":{\"params\":{\"dataFeedDetails\":\"Data feed details\"},\"returns\":{\"dataFeedId\":\"Data feed ID\"}},\"setDapiNameToBeActivated(bytes32)\":{\"params\":{\"dapiName\":\"dAPI name\"}},\"setDapiNameToBeDeactivated(bytes32)\":{\"params\":{\"dapiName\":\"dAPI name\"}},\"setDapiNameUpdateParameters(bytes32,bytes)\":{\"params\":{\"dapiName\":\"dAPI name\",\"updateParameters\":\"Update parameters\"}},\"setDataFeedIdToBeActivated(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"}},\"setDataFeedIdToBeDeactivated(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"}},\"setDataFeedIdUpdateParameters(bytes32,bytes)\":{\"params\":{\"dataFeedId\":\"Data feed ID\",\"updateParameters\":\"Update parameters\"}},\"setSignedApiUrl(address,string)\":{\"params\":{\"airnode\":\"Airnode address\",\"signedApiUrl\":\"Signed API URL\"}},\"tryMulticall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\",\"successes\":\"Array of success conditions of batched calls\"}}},\"stateVariables\":{\"MAXIMUM_BEACON_COUNT_IN_SET\":{\"details\":\"Api3ServerV1 introduces the concept of a Beacon, which is a single-source data feed. Api3ServerV1 allows Beacons to be read individually, or arbitrary combinations of them to be aggregated on-chain to form multiple-source data feeds, which are called Beacon sets. This contract does not support Beacon sets that consist of more than `MAXIMUM_BEACON_COUNT_IN_SET` Beacons to be registered.\"},\"airnodeToSignedApiUrl\":{\"details\":\"An Airseeker can be configured to refer to additional signed APIs than the ones whose URLs are stored in this contract for redundancy\"}},\"title\":\"A contract where active data feeds and their specs are registered by the contract owner for the respective Airseeker to refer to\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAXIMUM_BEACON_COUNT_IN_SET()\":{\"notice\":\"Maximum number of Beacons in a Beacon set that can be registered\"},\"MAXIMUM_SIGNED_API_URL_LENGTH()\":{\"notice\":\"Maximum signed API URL length\"},\"MAXIMUM_UPDATE_PARAMETERS_LENGTH()\":{\"notice\":\"Maximum encoded update parameters length\"},\"activeDapiNameCount()\":{\"notice\":\"Returns the number of active data feeds identified by a dAPI name\"},\"activeDataFeed(uint256)\":{\"notice\":\"In an imaginary array consisting of the active data feed IDs and active dAPI names, picks the index-th identifier, and returns all data about the respective data feed that is available. Whenever data is not available (including the case where index does not correspond to an active data feed), returns empty values.\"},\"activeDataFeedCount()\":{\"notice\":\"Returns the number of active data feeds identified by a data feed ID or dAPI name\"},\"activeDataFeedIdCount()\":{\"notice\":\"Returns the number of active data feeds identified by a data feed ID\"},\"airnodeToSignedApiUrl(address)\":{\"notice\":\"Airnode address to signed API URL\"},\"api3ServerV1()\":{\"notice\":\"Api3ServerV1 contract address\"},\"containsBytecode(address)\":{\"notice\":\"Returns if the account contains bytecode\"},\"dapiNameToUpdateParameters(bytes32)\":{\"notice\":\"dAPI name to update parameters\"},\"dataFeedIdToDetails(bytes32)\":{\"notice\":\"Data feed ID to encoded details\"},\"dataFeedIdToUpdateParameters(bytes32)\":{\"notice\":\"Data feed ID to update parameters\"},\"dataFeedIsRegistered(bytes32)\":{\"notice\":\"Returns if the data feed with ID is registered\"},\"getBalance(address)\":{\"notice\":\"Returns the account balance\"},\"getBlockBasefee()\":{\"notice\":\"Returns the current block basefee\"},\"getBlockNumber()\":{\"notice\":\"Returns the current block number\"},\"getBlockTimestamp()\":{\"notice\":\"Returns the current block timestamp\"},\"getChainId()\":{\"notice\":\"Returns the chain ID\"},\"multicall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts\"},\"owner()\":{\"notice\":\"Returns the owner address\"},\"registerDataFeed(bytes)\":{\"notice\":\"Registers the data feed. In the case that the data feed is a Beacon, the details should be the ABI-encoded Airnode address and template ID. In the case that the data feed is a Beacon set, the details should be the ABI-encoded Airnode addresses array and template IDs array.\"},\"renounceOwnership()\":{\"notice\":\"Overriden to be disabled\"},\"setDapiNameToBeActivated(bytes32)\":{\"notice\":\"Called by the owner to set the dAPI name to be activated\"},\"setDapiNameToBeDeactivated(bytes32)\":{\"notice\":\"Called by the owner to set the dAPI name to be deactivated\"},\"setDapiNameUpdateParameters(bytes32,bytes)\":{\"notice\":\"Called by the owner to set the dAPI name update parameters. The update parameters must be encoded in a format that Airseeker expects.\"},\"setDataFeedIdToBeActivated(bytes32)\":{\"notice\":\"Called by the owner to set the data feed ID to be activated\"},\"setDataFeedIdToBeDeactivated(bytes32)\":{\"notice\":\"Called by the owner to set the data feed ID to be deactivated\"},\"setDataFeedIdUpdateParameters(bytes32,bytes)\":{\"notice\":\"Called by the owner to set the data feed ID update parameters. The update parameters must be encoded in a format that Airseeker expects.\"},\"setSignedApiUrl(address,string)\":{\"notice\":\"Called by the owner to set the signed API URL for the Airnode. The signed API must implement the specific interface that Airseeker expects.\"},\"transferOwnership(address)\":{\"notice\":\"Overriden to be disabled\"},\"tryMulticall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract but does not revert if any of the batched calls reverts\"}},\"notice\":\"Airseeker is an application that pushes API provider-signed data to chain when certain conditions are met so that the data feeds served on the Api3ServerV1 contract are updated according to the respective specs. In other words, this contract is an on-chain configuration file for an Airseeker (or multiple Airseekers in a setup with redundancy). The Airseeker must know which data feeds are active (and thus need to be updated), the constituting Airnode (the oracle node that API providers operate to sign data) addresses and request template IDs, what the respective on-chain data feed values are, what the update parameters are, and the URL of the signed APIs (from which Airseeker can fetch signed data) that are hosted by the respective API providers. The contract owner is responsible with leaving the state of this contract in a way that Airseeker expects. For example, if a dAPI name is activated without registering the respective data feed, the Airseeker will not have access to the data that it needs to execute updates.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/api3-server-v1/AirseekerRegistry.sol\":\"AirseekerRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/access/interfaces/IAccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is ISelfMulticall {\\n    function accessControlRegistry() external view returns (address);\\n\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd71aae2566c019a9b2da5e1ec51421a62898495fa6fd08e2cc39451511dda334\",\"license\":\"MIT\"},\"contracts/access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IAccessControlRegistryAdminnedWithManager is\\n    IAccessControlRegistryAdminned\\n{\\n    function manager() external view returns (address);\\n\\n    function adminRole() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x8a8e1756fca81175305755b7a311536132e88173f60b2ac0fdeef92a6236afc5\",\"license\":\"MIT\"},\"contracts/access/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x7fdae1b6079bd51604f096a075a9abf4eacba5d332319b38cbeb1cca0c1745f6\",\"license\":\"MIT\"},\"contracts/api3-server-v1/AirseekerRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\nimport \\\"../vendor/@openzeppelin/contracts@5.0.2/access/Ownable.sol\\\";\\nimport \\\"../utils/ExtendedSelfMulticall.sol\\\";\\nimport \\\"./interfaces/IAirseekerRegistry.sol\\\";\\nimport \\\"../vendor/@openzeppelin/contracts@5.0.2/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IApi3ServerV1.sol\\\";\\n\\n/// @title A contract where active data feeds and their specs are registered by\\n/// the contract owner for the respective Airseeker to refer to\\n/// @notice Airseeker is an application that pushes API provider-signed data to\\n/// chain when certain conditions are met so that the data feeds served on the\\n/// Api3ServerV1 contract are updated according to the respective specs. In\\n/// other words, this contract is an on-chain configuration file for an\\n/// Airseeker (or multiple Airseekers in a setup with redundancy).\\n/// The Airseeker must know which data feeds are active (and thus need to be\\n/// updated), the constituting Airnode (the oracle node that API providers\\n/// operate to sign data) addresses and request template IDs, what the\\n/// respective on-chain data feed values are, what the update parameters are,\\n/// and the URL of the signed APIs (from which Airseeker can fetch signed data)\\n/// that are hosted by the respective API providers.\\n/// The contract owner is responsible with leaving the state of this contract\\n/// in a way that Airseeker expects. For example, if a dAPI name is activated\\n/// without registering the respective data feed, the Airseeker will not have\\n/// access to the data that it needs to execute updates.\\ncontract AirseekerRegistry is\\n    Ownable,\\n    ExtendedSelfMulticall,\\n    IAirseekerRegistry\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /// @notice Maximum number of Beacons in a Beacon set that can be\\n    /// registered\\n    /// @dev Api3ServerV1 introduces the concept of a Beacon, which is a\\n    /// single-source data feed. Api3ServerV1 allows Beacons to be read\\n    /// individually, or arbitrary combinations of them to be aggregated\\n    /// on-chain to form multiple-source data feeds, which are called Beacon\\n    /// sets. This contract does not support Beacon sets that consist of more\\n    /// than `MAXIMUM_BEACON_COUNT_IN_SET` Beacons to be registered.\\n    uint256 public constant override MAXIMUM_BEACON_COUNT_IN_SET = 21;\\n\\n    /// @notice Maximum encoded update parameters length\\n    uint256 public constant override MAXIMUM_UPDATE_PARAMETERS_LENGTH = 1024;\\n\\n    /// @notice Maximum signed API URL length\\n    uint256 public constant override MAXIMUM_SIGNED_API_URL_LENGTH = 256;\\n\\n    /// @notice Api3ServerV1 contract address\\n    address public immutable override api3ServerV1;\\n\\n    /// @notice Airnode address to signed API URL\\n    /// @dev An Airseeker can be configured to refer to additional signed APIs\\n    /// than the ones whose URLs are stored in this contract for redundancy\\n    mapping(address => string) public override airnodeToSignedApiUrl;\\n\\n    /// @notice Data feed ID to encoded details\\n    mapping(bytes32 => bytes) public override dataFeedIdToDetails;\\n\\n    // Api3ServerV1 uses Beacon IDs (see the `deriveBeaconId()` implementation)\\n    // and Beacon set IDs (see the `deriveBeaconSetId()` implementation) to\\n    // address data feeds. We use data feed ID as a general term to refer to a\\n    // Beacon ID/Beacon set ID.\\n    // A data feed ID is immutable (i.e., it always points to the same Beacon\\n    // or Beacon set). Api3ServerV1 allows a dAPI name to be pointed to a data\\n    // feed ID by privileged accounts to implement a mutable data feed\\n    // addressing scheme.\\n    // If the data feed ID or dAPI name should be used to read a data feed\\n    // depends on the use case. To support both schemes, AirseekerRegistry\\n    // allows data feeds specs to be defined with either the data feed ID or\\n    // the dAPI name.\\n    EnumerableSet.Bytes32Set private activeDataFeedIds;\\n\\n    EnumerableSet.Bytes32Set private activeDapiNames;\\n\\n    // Considering that the update parameters are typically reused between data\\n    // feeds, a hash map is used to avoid storing the same update parameters\\n    // redundantly\\n    mapping(bytes32 => bytes32) private dataFeedIdToUpdateParametersHash;\\n\\n    mapping(bytes32 => bytes32) private dapiNameToUpdateParametersHash;\\n\\n    mapping(bytes32 => bytes) private updateParametersHashToValue;\\n\\n    // Length of `abi.encode(address, bytes32)`\\n    uint256 private constant DATA_FEED_DETAILS_LENGTH_FOR_SINGLE_BEACON =\\n        32 + 32;\\n\\n    // Length of `abi.encode(address[2], bytes32[2])`\\n    uint256\\n        private constant DATA_FEED_DETAILS_LENGTH_FOR_BEACON_SET_WITH_TWO_BEACONS =\\n        32 + 32 + (32 + 2 * 32) + (32 + 2 * 32);\\n\\n    // Length of\\n    // `abi.encode(address[MAXIMUM_BEACON_COUNT_IN_SET], bytes32[MAXIMUM_BEACON_COUNT_IN_SET])`\\n    uint256 private constant MAXIMUM_DATA_FEED_DETAILS_LENGTH =\\n        32 +\\n            32 +\\n            (32 + MAXIMUM_BEACON_COUNT_IN_SET * 32) +\\n            (32 + MAXIMUM_BEACON_COUNT_IN_SET * 32);\\n\\n    /// @dev Reverts if the data feed ID is zero\\n    /// @param dataFeedId Data feed ID\\n    modifier onlyNonZeroDataFeedId(bytes32 dataFeedId) {\\n        require(dataFeedId != bytes32(0), \\\"Data feed ID zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Reverts if the dAPI name is zero\\n    /// @param dapiName dAPI name\\n    modifier onlyNonZeroDapiName(bytes32 dapiName) {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        _;\\n    }\\n\\n    /// @dev Reverts if the update parameters are too long\\n    /// @param updateParameters Update parameters\\n    modifier onlyValidUpdateParameters(bytes calldata updateParameters) {\\n        require(\\n            updateParameters.length <= MAXIMUM_UPDATE_PARAMETERS_LENGTH,\\n            \\\"Update parameters too long\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param owner_ Owner address\\n    /// @param api3ServerV1_ Api3ServerV1 contract address\\n    constructor(address owner_, address api3ServerV1_) Ownable(owner_) {\\n        require(api3ServerV1_ != address(0), \\\"Api3ServerV1 address zero\\\");\\n        api3ServerV1 = api3ServerV1_;\\n    }\\n\\n    /// @notice Returns the owner address\\n    /// @return Owner address\\n    function owner() public view override(Ownable, IOwnable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    /// @notice Overriden to be disabled\\n    function renounceOwnership() public pure override(Ownable, IOwnable) {\\n        revert(\\\"Ownership cannot be renounced\\\");\\n    }\\n\\n    /// @notice Overriden to be disabled\\n    function transferOwnership(\\n        address\\n    ) public pure override(Ownable, IOwnable) {\\n        revert(\\\"Ownership cannot be transferred\\\");\\n    }\\n\\n    /// @notice Called by the owner to set the data feed ID to be activated\\n    /// @param dataFeedId Data feed ID\\n    function setDataFeedIdToBeActivated(\\n        bytes32 dataFeedId\\n    ) external override onlyOwner onlyNonZeroDataFeedId(dataFeedId) {\\n        if (activeDataFeedIds.add(dataFeedId)) {\\n            emit ActivatedDataFeedId(dataFeedId);\\n        }\\n    }\\n\\n    /// @notice Called by the owner to set the dAPI name to be activated\\n    /// @param dapiName dAPI name\\n    function setDapiNameToBeActivated(\\n        bytes32 dapiName\\n    ) external override onlyOwner onlyNonZeroDapiName(dapiName) {\\n        if (activeDapiNames.add(dapiName)) {\\n            emit ActivatedDapiName(dapiName);\\n        }\\n    }\\n\\n    /// @notice Called by the owner to set the data feed ID to be deactivated\\n    /// @param dataFeedId Data feed ID\\n    function setDataFeedIdToBeDeactivated(\\n        bytes32 dataFeedId\\n    ) external override onlyOwner onlyNonZeroDataFeedId(dataFeedId) {\\n        if (activeDataFeedIds.remove(dataFeedId)) {\\n            emit DeactivatedDataFeedId(dataFeedId);\\n        }\\n    }\\n\\n    /// @notice Called by the owner to set the dAPI name to be deactivated\\n    /// @param dapiName dAPI name\\n    function setDapiNameToBeDeactivated(\\n        bytes32 dapiName\\n    ) external override onlyOwner onlyNonZeroDapiName(dapiName) {\\n        if (activeDapiNames.remove(dapiName)) {\\n            emit DeactivatedDapiName(dapiName);\\n        }\\n    }\\n\\n    /// @notice Called by the owner to set the data feed ID update parameters.\\n    /// The update parameters must be encoded in a format that Airseeker\\n    /// expects.\\n    /// @param dataFeedId Data feed ID\\n    /// @param updateParameters Update parameters\\n    function setDataFeedIdUpdateParameters(\\n        bytes32 dataFeedId,\\n        bytes calldata updateParameters\\n    )\\n        external\\n        override\\n        onlyOwner\\n        onlyNonZeroDataFeedId(dataFeedId)\\n        onlyValidUpdateParameters(updateParameters)\\n    {\\n        bytes32 updateParametersHash = keccak256(updateParameters);\\n        if (\\n            dataFeedIdToUpdateParametersHash[dataFeedId] != updateParametersHash\\n        ) {\\n            dataFeedIdToUpdateParametersHash[dataFeedId] = updateParametersHash;\\n            if (\\n                updateParametersHashToValue[updateParametersHash].length !=\\n                updateParameters.length\\n            ) {\\n                updateParametersHashToValue[\\n                    updateParametersHash\\n                ] = updateParameters;\\n            }\\n            emit UpdatedDataFeedIdUpdateParameters(\\n                dataFeedId,\\n                updateParameters\\n            );\\n        }\\n    }\\n\\n    /// @notice Called by the owner to set the dAPI name update parameters.\\n    /// The update parameters must be encoded in a format that Airseeker\\n    /// expects.\\n    /// @param dapiName dAPI name\\n    /// @param updateParameters Update parameters\\n    function setDapiNameUpdateParameters(\\n        bytes32 dapiName,\\n        bytes calldata updateParameters\\n    )\\n        external\\n        override\\n        onlyOwner\\n        onlyNonZeroDapiName(dapiName)\\n        onlyValidUpdateParameters(updateParameters)\\n    {\\n        bytes32 updateParametersHash = keccak256(updateParameters);\\n        if (dapiNameToUpdateParametersHash[dapiName] != updateParametersHash) {\\n            dapiNameToUpdateParametersHash[dapiName] = updateParametersHash;\\n            if (\\n                updateParametersHashToValue[updateParametersHash].length !=\\n                updateParameters.length\\n            ) {\\n                updateParametersHashToValue[\\n                    updateParametersHash\\n                ] = updateParameters;\\n            }\\n            emit UpdatedDapiNameUpdateParameters(dapiName, updateParameters);\\n        }\\n    }\\n\\n    /// @notice Called by the owner to set the signed API URL for the Airnode.\\n    /// The signed API must implement the specific interface that Airseeker\\n    /// expects.\\n    /// @param airnode Airnode address\\n    /// @param signedApiUrl Signed API URL\\n    function setSignedApiUrl(\\n        address airnode,\\n        string calldata signedApiUrl\\n    ) external override onlyOwner {\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(\\n            abi.encodePacked(signedApiUrl).length <=\\n                MAXIMUM_SIGNED_API_URL_LENGTH,\\n            \\\"Signed API URL too long\\\"\\n        );\\n        if (\\n            keccak256(abi.encodePacked(airnodeToSignedApiUrl[airnode])) !=\\n            keccak256(abi.encodePacked(signedApiUrl))\\n        ) {\\n            airnodeToSignedApiUrl[airnode] = signedApiUrl;\\n            emit UpdatedSignedApiUrl(airnode, signedApiUrl);\\n        }\\n    }\\n\\n    /// @notice Registers the data feed. In the case that the data feed is a\\n    /// Beacon, the details should be the ABI-encoded Airnode address and\\n    /// template ID. In the case that the data feed is a Beacon set, the\\n    /// details should be the ABI-encoded Airnode addresses array and template\\n    /// IDs array.\\n    /// @param dataFeedDetails Data feed details\\n    /// @return dataFeedId Data feed ID\\n    function registerDataFeed(\\n        bytes calldata dataFeedDetails\\n    ) external override returns (bytes32 dataFeedId) {\\n        uint256 dataFeedDetailsLength = dataFeedDetails.length;\\n        if (\\n            dataFeedDetailsLength == DATA_FEED_DETAILS_LENGTH_FOR_SINGLE_BEACON\\n        ) {\\n            // dataFeedId maps to a Beacon\\n            (address airnode, bytes32 templateId) = abi.decode(\\n                dataFeedDetails,\\n                (address, bytes32)\\n            );\\n            require(airnode != address(0), \\\"Airnode address zero\\\");\\n            dataFeedId = deriveBeaconId(airnode, templateId);\\n        } else if (\\n            dataFeedDetailsLength >=\\n            DATA_FEED_DETAILS_LENGTH_FOR_BEACON_SET_WITH_TWO_BEACONS\\n        ) {\\n            require(\\n                dataFeedDetailsLength <= MAXIMUM_DATA_FEED_DETAILS_LENGTH,\\n                \\\"Data feed details too long\\\"\\n            );\\n            (address[] memory airnodes, bytes32[] memory templateIds) = abi\\n                .decode(dataFeedDetails, (address[], bytes32[]));\\n            require(\\n                abi.encode(airnodes, templateIds).length ==\\n                    dataFeedDetailsLength,\\n                \\\"Data feed details trail\\\"\\n            );\\n            uint256 beaconCount = airnodes.length;\\n            require(\\n                beaconCount == templateIds.length,\\n                \\\"Parameter length mismatch\\\"\\n            );\\n            bytes32[] memory beaconIds = new bytes32[](beaconCount);\\n            for (uint256 ind = 0; ind < beaconCount; ind++) {\\n                require(airnodes[ind] != address(0), \\\"Airnode address zero\\\");\\n                beaconIds[ind] = deriveBeaconId(\\n                    airnodes[ind],\\n                    templateIds[ind]\\n                );\\n            }\\n            dataFeedId = deriveBeaconSetId(beaconIds);\\n        } else {\\n            revert(\\\"Data feed details too short\\\");\\n        }\\n        if (dataFeedIdToDetails[dataFeedId].length != dataFeedDetailsLength) {\\n            dataFeedIdToDetails[dataFeedId] = dataFeedDetails;\\n            emit RegisteredDataFeed(dataFeedId, dataFeedDetails);\\n        }\\n    }\\n\\n    /// @notice In an imaginary array consisting of the active data feed IDs\\n    /// and active dAPI names, picks the index-th identifier, and returns all\\n    /// data about the respective data feed that is available. Whenever data is\\n    /// not available (including the case where index does not correspond to an\\n    /// active data feed), returns empty values.\\n    /// @dev Airseeker uses this function to get all the data it needs about an\\n    /// active data feed with a single RPC call.\\n    /// Since active data feed IDs and dAPI names are kept in respective\\n    /// EnumerableSet types, addition and removal of items to these may change\\n    /// the order of the remaining items. Therefore, do not depend on an index\\n    /// to address a specific data feed consistently.\\n    /// @param index Index\\n    /// @return dataFeedId Data feed ID\\n    /// @return dapiName dAPI name (`bytes32(0)` if the active data feed is\\n    /// identified by a data feed ID)\\n    /// @return dataFeedDetails Data feed details\\n    /// @return dataFeedValue Data feed value read from Api3ServerV1\\n    /// @return dataFeedTimestamp Data feed timestamp read from Api3ServerV1\\n    /// @return beaconValues Beacon values read from Api3ServerV1\\n    /// @return beaconTimestamps Beacon timestamps read from Api3ServerV1\\n    /// @return updateParameters Update parameters\\n    /// @return signedApiUrls Signed API URLs of the Beacon Airnodes\\n    function activeDataFeed(\\n        uint256 index\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            bytes32 dataFeedId,\\n            bytes32 dapiName,\\n            bytes memory dataFeedDetails,\\n            int224 dataFeedValue,\\n            uint32 dataFeedTimestamp,\\n            int224[] memory beaconValues,\\n            uint32[] memory beaconTimestamps,\\n            bytes memory updateParameters,\\n            string[] memory signedApiUrls\\n        )\\n    {\\n        uint256 activeDataFeedIdsLength = activeDataFeedIdCount();\\n        if (index < activeDataFeedIdsLength) {\\n            dataFeedId = activeDataFeedIds.at(index);\\n            updateParameters = dataFeedIdToUpdateParameters(dataFeedId);\\n        } else if (index < activeDataFeedIdsLength + activeDapiNames.length()) {\\n            dapiName = activeDapiNames.at(index - activeDataFeedIdsLength);\\n            dataFeedId = IApi3ServerV1(api3ServerV1).dapiNameHashToDataFeedId(\\n                keccak256(abi.encodePacked(dapiName))\\n            );\\n            updateParameters = dapiNameToUpdateParameters(dapiName);\\n        }\\n        if (dataFeedId != bytes32(0)) {\\n            dataFeedDetails = dataFeedIdToDetails[dataFeedId];\\n            (dataFeedValue, dataFeedTimestamp) = IApi3ServerV1(api3ServerV1)\\n                .dataFeeds(dataFeedId);\\n        }\\n        if (dataFeedDetails.length != 0) {\\n            if (\\n                dataFeedDetails.length ==\\n                DATA_FEED_DETAILS_LENGTH_FOR_SINGLE_BEACON\\n            ) {\\n                beaconValues = new int224[](1);\\n                beaconTimestamps = new uint32[](1);\\n                signedApiUrls = new string[](1);\\n                (address airnode, bytes32 templateId) = abi.decode(\\n                    dataFeedDetails,\\n                    (address, bytes32)\\n                );\\n                (beaconValues[0], beaconTimestamps[0]) = IApi3ServerV1(\\n                    api3ServerV1\\n                ).dataFeeds(deriveBeaconId(airnode, templateId));\\n                signedApiUrls[0] = airnodeToSignedApiUrl[airnode];\\n            } else {\\n                (address[] memory airnodes, bytes32[] memory templateIds) = abi\\n                    .decode(dataFeedDetails, (address[], bytes32[]));\\n                uint256 beaconCount = airnodes.length;\\n                beaconValues = new int224[](beaconCount);\\n                beaconTimestamps = new uint32[](beaconCount);\\n                signedApiUrls = new string[](beaconCount);\\n                for (uint256 ind = 0; ind < beaconCount; ind++) {\\n                    (beaconValues[ind], beaconTimestamps[ind]) = IApi3ServerV1(\\n                        api3ServerV1\\n                    ).dataFeeds(\\n                            deriveBeaconId(airnodes[ind], templateIds[ind])\\n                        );\\n                    signedApiUrls[ind] = airnodeToSignedApiUrl[airnodes[ind]];\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the number of active data feeds identified by a data\\n    /// feed ID or dAPI name\\n    /// @return Active data feed count\\n    function activeDataFeedCount() external view override returns (uint256) {\\n        return activeDataFeedIdCount() + activeDapiNameCount();\\n    }\\n\\n    /// @notice Returns the number of active data feeds identified by a data\\n    /// feed ID\\n    /// @return Active data feed ID count\\n    function activeDataFeedIdCount() public view override returns (uint256) {\\n        return activeDataFeedIds.length();\\n    }\\n\\n    /// @notice Returns the number of active data feeds identified by a dAPI\\n    /// name\\n    /// @return Active dAPI name count\\n    function activeDapiNameCount() public view override returns (uint256) {\\n        return activeDapiNames.length();\\n    }\\n\\n    /// @notice Data feed ID to update parameters\\n    /// @param dataFeedId Data feed ID\\n    /// @return updateParameters Update parameters\\n    function dataFeedIdToUpdateParameters(\\n        bytes32 dataFeedId\\n    ) public view override returns (bytes memory updateParameters) {\\n        updateParameters = updateParametersHashToValue[\\n            dataFeedIdToUpdateParametersHash[dataFeedId]\\n        ];\\n    }\\n\\n    /// @notice dAPI name to update parameters\\n    /// @param dapiName dAPI name\\n    /// @return updateParameters Update parameters\\n    function dapiNameToUpdateParameters(\\n        bytes32 dapiName\\n    ) public view override returns (bytes memory updateParameters) {\\n        updateParameters = updateParametersHashToValue[\\n            dapiNameToUpdateParametersHash[dapiName]\\n        ];\\n    }\\n\\n    /// @notice Returns if the data feed with ID is registered\\n    /// @param dataFeedId Data feed ID\\n    /// @return If the data feed with ID is registered\\n    function dataFeedIsRegistered(\\n        bytes32 dataFeedId\\n    ) external view override returns (bool) {\\n        return dataFeedIdToDetails[dataFeedId].length != 0;\\n    }\\n\\n    /// @notice Derives the Beacon ID from the Airnode address and template ID\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @return beaconId Beacon ID\\n    function deriveBeaconId(\\n        address airnode,\\n        bytes32 templateId\\n    ) private pure returns (bytes32 beaconId) {\\n        beaconId = keccak256(abi.encodePacked(airnode, templateId));\\n    }\\n\\n    /// @notice Derives the Beacon set ID from the Beacon IDs\\n    /// @param beaconIds Beacon IDs\\n    /// @return beaconSetId Beacon set ID\\n    function deriveBeaconSetId(\\n        bytes32[] memory beaconIds\\n    ) private pure returns (bytes32 beaconSetId) {\\n        beaconSetId = keccak256(abi.encode(beaconIds));\\n    }\\n}\\n\",\"keccak256\":\"0x8c4a9b6c85900ee11d62fc213810ad9e1e936a6f1768f90164d195ffd01ade0a\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IAirseekerRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/interfaces/IOwnable.sol\\\";\\nimport \\\"../../utils/interfaces/IExtendedSelfMulticall.sol\\\";\\n\\ninterface IAirseekerRegistry is IOwnable, IExtendedSelfMulticall {\\n    event ActivatedDataFeedId(bytes32 indexed dataFeedId);\\n\\n    event ActivatedDapiName(bytes32 indexed dapiName);\\n\\n    event DeactivatedDataFeedId(bytes32 indexed dataFeedId);\\n\\n    event DeactivatedDapiName(bytes32 indexed dapiName);\\n\\n    event UpdatedDataFeedIdUpdateParameters(\\n        bytes32 indexed dataFeedId,\\n        bytes updateParameters\\n    );\\n\\n    event UpdatedDapiNameUpdateParameters(\\n        bytes32 indexed dapiName,\\n        bytes updateParameters\\n    );\\n\\n    event UpdatedSignedApiUrl(address indexed airnode, string signedApiUrl);\\n\\n    event RegisteredDataFeed(bytes32 indexed dataFeedId, bytes dataFeedDetails);\\n\\n    function setDataFeedIdToBeActivated(bytes32 dataFeedId) external;\\n\\n    function setDapiNameToBeActivated(bytes32 dapiName) external;\\n\\n    function setDataFeedIdToBeDeactivated(bytes32 dataFeedId) external;\\n\\n    function setDapiNameToBeDeactivated(bytes32 dapiName) external;\\n\\n    function setDataFeedIdUpdateParameters(\\n        bytes32 dataFeedId,\\n        bytes calldata updateParameters\\n    ) external;\\n\\n    function setDapiNameUpdateParameters(\\n        bytes32 dapiName,\\n        bytes calldata updateParameters\\n    ) external;\\n\\n    function setSignedApiUrl(\\n        address airnode,\\n        string calldata signedApiUrl\\n    ) external;\\n\\n    function registerDataFeed(\\n        bytes calldata dataFeedDetails\\n    ) external returns (bytes32 dataFeedId);\\n\\n    function activeDataFeed(\\n        uint256 index\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 dataFeedId,\\n            bytes32 dapiName,\\n            bytes memory dataFeedDetails,\\n            int224 dataFeedValue,\\n            uint32 dataFeedTimestamp,\\n            int224[] memory beaconValues,\\n            uint32[] memory beaconTimestamps,\\n            bytes memory updateParameters,\\n            string[] memory signedApiUrls\\n        );\\n\\n    function activeDataFeedCount() external view returns (uint256);\\n\\n    function activeDataFeedIdCount() external view returns (uint256);\\n\\n    function activeDapiNameCount() external view returns (uint256);\\n\\n    function dataFeedIdToUpdateParameters(\\n        bytes32 dataFeedId\\n    ) external view returns (bytes memory updateParameters);\\n\\n    function dapiNameToUpdateParameters(\\n        bytes32 dapiName\\n    ) external view returns (bytes memory updateParameters);\\n\\n    function dataFeedIsRegistered(\\n        bytes32 dataFeedId\\n    ) external view returns (bool);\\n\\n    function MAXIMUM_BEACON_COUNT_IN_SET() external view returns (uint256);\\n\\n    function MAXIMUM_UPDATE_PARAMETERS_LENGTH() external view returns (uint256);\\n\\n    function MAXIMUM_SIGNED_API_URL_LENGTH() external view returns (uint256);\\n\\n    function api3ServerV1() external view returns (address);\\n\\n    function airnodeToSignedApiUrl(\\n        address airnode\\n    ) external view returns (string memory signedApiUrl);\\n\\n    function dataFeedIdToDetails(\\n        bytes32 dataFeedId\\n    ) external view returns (bytes memory dataFeedDetails);\\n}\\n\",\"keccak256\":\"0xdbc7e84e55802570ee304651b9827c72d001f1755792f69acca5da648792044d\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IApi3ServerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDapiServer.sol\\\";\\nimport \\\"./IBeaconUpdatesWithSignedData.sol\\\";\\n\\ninterface IApi3ServerV1 is IOevDapiServer, IBeaconUpdatesWithSignedData {\\n    function readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHash(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithIdAsOevProxy(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHashAsOevProxy(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function dataFeeds(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function oevProxyToIdToDataFeed(\\n        address proxy,\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n}\\n\",\"keccak256\":\"0xea2c05eaf2a19c93a9c9b08243fcabd8d7fcf0e4d422f7c687aef693126c1809\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IBeaconUpdatesWithSignedData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IBeaconUpdatesWithSignedData is IDataFeedServer {\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 templateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bytes32 beaconId);\\n}\\n\",\"keccak256\":\"0xe2b2530081508baf1323d4c145a688ffd548cf318a8cb67c9ccb4abe1ac81c6e\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IDapiServer is\\n    IAccessControlRegistryAdminnedWithManager,\\n    IDataFeedServer\\n{\\n    event SetDapiName(\\n        bytes32 indexed dataFeedId,\\n        bytes32 indexed dapiName,\\n        address sender\\n    );\\n\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\\n\\n    function dapiNameToDataFeedId(\\n        bytes32 dapiName\\n    ) external view returns (bytes32);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    function dapiNameSetterRole() external view returns (bytes32);\\n\\n    function dapiNameHashToDataFeedId(\\n        bytes32 dapiNameHash\\n    ) external view returns (bytes32 dataFeedId);\\n}\\n\",\"keccak256\":\"0x1cf1d7637e2ee1b4f5b99345730183447db78ceb8ce2117cf145d4d375194e71\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IDataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/IExtendedSelfMulticall.sol\\\";\\n\\ninterface IDataFeedServer is IExtendedSelfMulticall {\\n    event UpdatedBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithBeacons(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    function updateBeaconSetWithBeacons(\\n        bytes32[] memory beaconIds\\n    ) external returns (bytes32 beaconSetId);\\n}\\n\",\"keccak256\":\"0x208f751f71b16d454cafd9188095178fdc776ee0376a85362f6022e7a4f010a3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IOevDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDataFeedServer.sol\\\";\\nimport \\\"./IDapiServer.sol\\\";\\n\\ninterface IOevDapiServer is IOevDataFeedServer, IDapiServer {}\\n\",\"keccak256\":\"0xf4082c33979785131358a217a8c5cf498a53c04318868eb1cb68e934c33226e3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IOevDataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IOevDataFeedServer is IDataFeedServer {\\n    event UpdatedOevProxyBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedOevProxyBeaconSetWithSignedData(\\n        bytes32 indexed beaconSetId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event Withdrew(\\n        address indexed oevProxy,\\n        address oevBeneficiary,\\n        uint256 amount\\n    );\\n\\n    function updateOevProxyDataFeedWithSignedData(\\n        address oevProxy,\\n        bytes32 dataFeedId,\\n        bytes32 updateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes[] calldata packedOevUpdateSignatures\\n    ) external payable;\\n\\n    function withdraw(address oevProxy) external;\\n\\n    function oevProxyToBalance(\\n        address oevProxy\\n    ) external view returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x2d162c576bfe5554767bb48758314c3e6f2c509f73203f0e166d1ac5168a1218\",\"license\":\"MIT\"},\"contracts/utils/ExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./SelfMulticall.sol\\\";\\nimport \\\"./interfaces/IExtendedSelfMulticall.sol\\\";\\n\\n/// @title Contract that extends SelfMulticall to fetch some of the global\\n/// variables\\n/// @notice Available global variables are limited to the ones that Airnode\\n/// tends to need\\ncontract ExtendedSelfMulticall is SelfMulticall, IExtendedSelfMulticall {\\n    /// @notice Returns the chain ID\\n    /// @return Chain ID\\n    function getChainId() external view override returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /// @notice Returns the account balance\\n    /// @param account Account address\\n    /// @return Account balance\\n    function getBalance(\\n        address account\\n    ) external view override returns (uint256) {\\n        return account.balance;\\n    }\\n\\n    /// @notice Returns if the account contains bytecode\\n    /// @dev An account not containing any bytecode does not indicate that it\\n    /// is an EOA or it will not contain any bytecode in the future.\\n    /// Contract construction and `SELFDESTRUCT` updates the bytecode at the\\n    /// end of the transaction.\\n    /// @return If the account contains bytecode\\n    function containsBytecode(\\n        address account\\n    ) external view override returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    /// @notice Returns the current block number\\n    /// @return Current block number\\n    function getBlockNumber() external view override returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @notice Returns the current block timestamp\\n    /// @return Current block timestamp\\n    function getBlockTimestamp() external view override returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice Returns the current block basefee\\n    /// @return Current block basefee\\n    function getBlockBasefee() external view override returns (uint256) {\\n        return block.basefee;\\n    }\\n}\\n\",\"keccak256\":\"0xada4020386f51e076953a110accf21efc53b82858bb88fc6725591556d86574b\",\"license\":\"MIT\"},\"contracts/utils/SelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISelfMulticall.sol\\\";\\n\\n/// @title Contract that enables calls to the inheriting contract to be batched\\n/// @notice Implements two ways of batching, one requires none of the calls to\\n/// revert and the other tolerates individual calls reverting\\n/// @dev This implementation uses delegatecall for individual function calls.\\n/// Since delegatecall is a message call, it can only be made to functions that\\n/// are externally visible. This means that a contract cannot multicall its own\\n/// functions that use internal/private visibility modifiers.\\n/// Refer to OpenZeppelin's Multicall.sol for a similar implementation.\\ncontract SelfMulticall is ISelfMulticall {\\n    /// @notice Batches calls to the inheriting contract and reverts as soon as\\n    /// one of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function multicall(\\n        bytes[] calldata data\\n    ) external override returns (bytes[] memory returndata) {\\n        uint256 callCount = data.length;\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            bool success;\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (success, returndata[ind]) = address(this).delegatecall(data[ind]);\\n            if (!success) {\\n                bytes memory returndataWithRevertData = returndata[ind];\\n                if (returndataWithRevertData.length > 0) {\\n                    // Adapted from OpenZeppelin's Address.sol\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        let returndata_size := mload(returndataWithRevertData)\\n                        revert(\\n                            add(32, returndataWithRevertData),\\n                            returndata_size\\n                        )\\n                    }\\n                } else {\\n                    revert(\\\"Multicall: No revert string\\\");\\n                }\\n            }\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Batches calls to the inheriting contract but does not revert if\\n    /// any of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return successes Array of success conditions of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function tryMulticall(\\n        bytes[] calldata data\\n    )\\n        external\\n        override\\n        returns (bool[] memory successes, bytes[] memory returndata)\\n    {\\n        uint256 callCount = data.length;\\n        successes = new bool[](callCount);\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (successes[ind], returndata[ind]) = address(this).delegatecall(\\n                data[ind]\\n            );\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb466760f7b5d05a91fb168224952f29db9aa3308f0b83535fd697f3c30281740\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISelfMulticall.sol\\\";\\n\\ninterface IExtendedSelfMulticall is ISelfMulticall {\\n    function getChainId() external view returns (uint256);\\n\\n    function getBalance(address account) external view returns (uint256);\\n\\n    function containsBytecode(address account) external view returns (bool);\\n\\n    function getBlockNumber() external view returns (uint256);\\n\\n    function getBlockTimestamp() external view returns (uint256);\\n\\n    function getBlockBasefee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaefe61a623c920d3e39c4779535e280378b44202d11c29a2c96f46f2fe5f420d\",\"license\":\"MIT\"},\"contracts/utils/interfaces/ISelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISelfMulticall {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory returndata);\\n\\n    function tryMulticall(\\n        bytes[] calldata data\\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\\n}\\n\",\"keccak256\":\"0x50b27284f0d5acd8b340836c09d252138ebf059f426e5d90d3f7221e1b7d0817\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@5.0.2/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063796b89b91161010f578063be3cc74d116100a2578063ddb2575211610071578063ddb2575214610420578063f2fde38b14610433578063f8b2cb4f14610446578063fba8f22f1461046157600080fd5b8063be3cc74d146103ca578063d23bab14146103dd578063d3cc6647146103f0578063d4a66d921461041857600080fd5b80638f634751116100de5780638f6347511461037c57806391af241114610384578063ac9650d814610397578063b07a0c2f146103b757600080fd5b8063796b89b91461033f5780637a821819146103455780637ca50e85146103585780638da5cb5b1461036b57600080fd5b806342cbb15c116101875780635d868194116101565780635d868194146103095780636e85b69a1461031c578063715018a61461032f578063773f2edc1461033757600080fd5b806342cbb15c146102af578063437b9116146102b55780634dcc19fe146102d65780635989eaeb146102dc57600080fd5b80632d6a744e116101c35780632d6a744e146102595780633408e4701461029857806336b7840d1461029e5780633aad52b9146102a757600080fd5b8063074244ce146101f5578063085df6ab146102115780631761c219146102315780632412a9cb14610246575b600080fd5b6101fe61010081565b6040519081526020015b60405180910390f35b61022461021f366004611f0d565b610474565b6040516102089190611f77565b61024461023f366004611fd3565b61050e565b005b61024461025436600461201f565b610679565b6102807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610208565b466101fe565b6101fe61040081565b6101fe601581565b436101fe565b6102c86102c3366004612038565b610700565b60405161020892919061210b565b486101fe565b6102f96102ea366004611f0d565b6001600160a01b03163b151590565b6040519015158152602001610208565b6101fe610317366004612165565b610866565b61022461032a36600461201f565b610ce2565b610244610cfb565b6101fe610d43565b426101fe565b6102f961035336600461201f565b610d54565b61022461036636600461201f565b610d76565b6000546001600160a01b0316610280565b6101fe610e25565b61024461039236600461201f565b610e41565b6103aa6103a5366004612038565b610ec9565b60405161020891906121a7565b6102446103c536600461201f565b61104a565b6102446103d836600461201f565b6110d3565b6102446103eb366004611fd3565b611159565b6104036103fe36600461201f565b6112aa565b604051610208999897969594939291906121fc565b6101fe611ab3565b61022461042e36600461201f565b611abf565b610244610441366004611f0d565b611ae9565b6101fe610454366004611f0d565b6001600160a01b03163190565b61024461046f3660046122ba565b611b31565b6001602052600090815260409020805461048d906122f6565b80601f01602080910402602001604051908101604052809291908181526020018280546104b9906122f6565b80156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b505050505081565b610516611cda565b828061055d5760405162461bcd60e51b8152602060048201526011602482015270446174612066656564204944207a65726f60781b60448201526064015b60405180910390fd5b82826104008111156105b15760405162461bcd60e51b815260206004820152601a60248201527f55706461746520706172616d657465727320746f6f206c6f6e670000000000006044820152606401610554565b600085856040516105c3929190612330565b6040518091039020905080600760008981526020019081526020016000205414610670576000878152600760209081526040808320849055838352600990915290208054869190610613906122f6565b9050146106355760008181526009602052604090206106338688836123a4565b505b867f0aea1ab3b222f6786a08c16b8f93ba421dfe07d2511afa7250ec3e9163b0b420878760405161066792919061248d565b60405180910390a25b50505050505050565b610681611cda565b80806106c05760405162461bcd60e51b815260206004820152600e60248201526d64415049206e616d65207a65726f60901b6044820152606401610554565b6106cb600583611d22565b156106fc5760405182907ff9f5c4d39275e5bd5f3c5c8c55bc35400693aeb978d180b545f88580dc4e1e7790600090a25b5050565b606080828067ffffffffffffffff81111561071d5761071d612340565b604051908082528060200260200182016040528015610746578160200160208202803683370190505b5092508067ffffffffffffffff81111561076257610762612340565b60405190808252806020026020018201604052801561079557816020015b60608152602001906001900390816107805790505b50915060005b8181101561085d57308686838181106107b6576107b66124a9565b90506020028101906107c891906124bf565b6040516107d6929190612330565b600060405180830381855af49150503d8060008114610811576040519150601f19603f3d011682016040523d82523d6000602084013e610816565b606091505b50858381518110610829576108296124a9565b60200260200101858481518110610842576108426124a9565b6020908102919091010191909152901515905260010161079b565b50509250929050565b600081603f1981016109255760008061088185870187612506565b90925090506001600160a01b0382166108dc5760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f0000000000000000000000006044820152606401610554565b60408051606084901b6bffffffffffffffffffffffff19166020808301919091526034808301859052835180840390910181526054909201909252805191012093505050610c63565b6101008110610c1b5761093a60156020612548565b61094590602061255f565b61095160156020612548565b61095c90602061255f565b61096790604061255f565b610971919061255f565b8111156109c05760405162461bcd60e51b815260206004820152601a60248201527f4461746120666565642064657461696c7320746f6f206c6f6e670000000000006044820152606401610554565b6000806109cf85870187612634565b915091508282826040516020016109e7929190612731565b6040516020818303038152906040525114610a445760405162461bcd60e51b815260206004820152601760248201527f4461746120666565642064657461696c7320747261696c0000000000000000006044820152606401610554565b815181518114610a965760405162461bcd60e51b815260206004820152601960248201527f506172616d65746572206c656e677468206d69736d61746368000000000000006044820152606401610554565b60008167ffffffffffffffff811115610ab157610ab1612340565b604051908082528060200260200182016040528015610ada578160200160208202803683370190505b50905060005b82811015610c065760006001600160a01b0316858281518110610b0557610b056124a9565b60200260200101516001600160a01b031603610b635760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f0000000000000000000000006044820152606401610554565b610be1858281518110610b7857610b786124a9565b6020026020010151858381518110610b9257610b926124a9565b60200260200101516040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b828281518110610bf357610bf36124a9565b6020908102919091010152600101610ae0565b50610c1081611d37565b955050505050610c63565b60405162461bcd60e51b815260206004820152601b60248201527f4461746120666565642064657461696c7320746f6f2073686f727400000000006044820152606401610554565b60008281526002602052604090208054829190610c7f906122f6565b905014610cdb576000828152600260205260409020610c9f8486836123a4565b50817f4fe18adb29a4bae727e770ff666414a639679c10704d95f308a220b9a1b7477c8585604051610cd292919061248d565b60405180910390a25b5092915050565b6002602052600090815260409020805461048d906122f6565b60405162461bcd60e51b815260206004820152601d60248201527f4f776e6572736869702063616e6e6f742062652072656e6f756e6365640000006044820152606401610554565b6000610d4f6003611d67565b905090565b60008181526002602052604081208054610d6d906122f6565b15159392505050565b600081815260076020908152604080832054835260099091529020805460609190610da0906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610dcc906122f6565b8015610e195780601f10610dee57610100808354040283529160200191610e19565b820191906000526020600020905b815481529060010190602001808311610dfc57829003601f168201915b50505050509050919050565b6000610e2f611ab3565b610e37610d43565b610d4f919061255f565b610e49611cda565b8080610e8b5760405162461bcd60e51b8152602060048201526011602482015270446174612066656564204944207a65726f60781b6044820152606401610554565b610e96600383611d22565b156106fc5760405182907e58637e39931c35fef05bbfd96b3881a0301ada925534f93fbfd5544df032cd90600090a25050565b6060818067ffffffffffffffff811115610ee557610ee5612340565b604051908082528060200260200182016040528015610f1857816020015b6060815260200190600190039081610f035790505b50915060005b8181101561104257600030868684818110610f3b57610f3b6124a9565b9050602002810190610f4d91906124bf565b604051610f5b929190612330565b600060405180830381855af49150503d8060008114610f96576040519150601f19603f3d011682016040523d82523d6000602084013e610f9b565b606091505b50858481518110610fae57610fae6124a9565b6020908102919091010152905080611039576000848381518110610fd457610fd46124a9565b60200260200101519050600081511115610ff15780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e6700000000006044820152606401610554565b50600101610f1e565b505092915050565b611052611cda565b80806110945760405162461bcd60e51b8152602060048201526011602482015270446174612066656564204944207a65726f60781b6044820152606401610554565b61109f600383611d71565b156106fc5760405182907f0b7c1d36481aee25427040847eb1bb0fe4419a9daf1a3daa7a2ed118a20128bf90600090a25050565b6110db611cda565b808061111a5760405162461bcd60e51b815260206004820152600e60248201526d64415049206e616d65207a65726f60901b6044820152606401610554565b611125600583611d71565b156106fc5760405182907f240586c4e7a24b6151c6cbee3daebf773eae2e14f003cf24b204cc164c3066a790600090a25050565b611161611cda565b82806111a05760405162461bcd60e51b815260206004820152600e60248201526d64415049206e616d65207a65726f60901b6044820152606401610554565b82826104008111156111f45760405162461bcd60e51b815260206004820152601a60248201527f55706461746520706172616d657465727320746f6f206c6f6e670000000000006044820152606401610554565b60008585604051611206929190612330565b6040518091039020905080600860008981526020019081526020016000205414610670576000878152600860209081526040808320849055838352600990915290208054869190611256906122f6565b9050146112785760008181526009602052604090206112768688836123a4565b505b867f3ebb9b0f7d1ab582553a43d38e03a3533602282ff4fc10f5073d0b67d990dbfd878760405161066792919061248d565b600080606060008060608060608060006112c2610d43565b9050808b10156112e9576112d760038c611d7d565b99506112e28a610d76565b92506113e0565b6112f36005611d67565b6112fd908261255f565b8b10156113e057611319611311828d612788565b600590611d7d565b98507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663472c22f18a60405160200161135d91815260200190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161139191815260200190565b602060405180830381865afa1580156113ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d2919061279b565b99506113dd89611abf565b92505b89156115285760008a815260026020526040902080546113ff906122f6565b80601f016020809104026020016040519081016040528092919081815260200182805461142b906122f6565b80156114785780601f1061144d57610100808354040283529160200191611478565b820191906000526020600020905b81548152906001019060200180831161145b57829003601f168201915b50506040517f67a7cfb7000000000000000000000000000000000000000000000000000000008152600481018f9052939b50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316926367a7cfb7925060240190506040805180830381865afa1580156114fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152291906127b4565b90975095505b875115611aa55760408851036117a8576040805160018082528183019092529060208083019080368337505060408051600180825281830190925292975090506020808301908036833701905050604080516001808252818301909252919550816020015b606081526020019060019003908161158d579050509150600080898060200190518101906115bb91906127fd565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367a7cfb761163a84846040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b6040518263ffffffff1660e01b815260040161165891815260200190565b6040805180830381865afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169891906127b4565b886000815181106116ab576116ab6124a9565b60200260200101886000815181106116c5576116c56124a9565b63ffffffff909316602093840291909101830152601b9290920b9091526001600160a01b03831660009081526001909152604090208054611705906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054611731906122f6565b801561177e5780601f106117535761010080835404028352916020019161177e565b820191906000526020600020905b81548152906001019060200180831161176157829003601f168201915b505050505084600081518110611796576117966124a9565b60200260200101819052505050611aa5565b600080898060200190518101906117bf9190612889565b815191935091508067ffffffffffffffff8111156117df576117df612340565b604051908082528060200260200182016040528015611808578160200160208202803683370190505b5097508067ffffffffffffffff81111561182457611824612340565b60405190808252806020026020018201604052801561184d578160200160208202803683370190505b5096508067ffffffffffffffff81111561186957611869612340565b60405190808252806020026020018201604052801561189c57816020015b60608152602001906001900390816118875790505b50945060005b81811015611aa0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367a7cfb76119088684815181106118ee576118ee6124a9565b6020026020010151868581518110610b9257610b926124a9565b6040518263ffffffff1660e01b815260040161192691815260200190565b6040805180830381865afa158015611942573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196691906127b4565b8a8381518110611978576119786124a9565b602002602001018a8481518110611991576119916124a9565b602002602001018263ffffffff1663ffffffff1681525082601b0b601b0b8152505050600160008583815181106119ca576119ca6124a9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080546119fd906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054611a29906122f6565b8015611a765780601f10611a4b57610100808354040283529160200191611a76565b820191906000526020600020905b815481529060010190602001808311611a5957829003601f168201915b5050505050868281518110611a8d57611a8d6124a9565b60209081029190910101526001016118a2565b505050505b509193959799909294969850565b6000610d4f6005611d67565b600081815260086020908152604080832054835260099091529020805460609190610da0906122f6565b60405162461bcd60e51b815260206004820152601f60248201527f4f776e6572736869702063616e6e6f74206265207472616e73666572726564006044820152606401610554565b611b39611cda565b6001600160a01b038316611b8f5760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f0000000000000000000000006044820152606401610554565b6101008282604051602001611ba5929190612330565b604051602081830303815290604052511115611c035760405162461bcd60e51b815260206004820152601760248201527f5369676e6564204150492055524c20746f6f206c6f6e670000000000000000006044820152606401610554565b8181604051602001611c16929190612330565b60408051601f1981840301815282825280516020918201206001600160a01b038716600090815260018352929092209192611c5292910161294c565b6040516020818303038152906040528051906020012014611cd5576001600160a01b0383166000908152600160205260409020611c908284836123a4565b50826001600160a01b03167f1de1502db80e21e5a66f15b7adabc8c7c32f1fa1a0b7c51dbe01f4e50fe65c498383604051611ccc92919061248d565b60405180910390a25b505050565b6000546001600160a01b03163314611d20576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610554565b565b6000611d2e8383611d89565b90505b92915050565b600081604051602001611d4a91906129c1565b604051602081830303815290604052805190602001209050919050565b6000611d31825490565b6000611d2e8383611e7c565b6000611d2e8383611ecb565b60008181526001830160205260408120548015611e72576000611dad600183612788565b8554909150600090611dc190600190612788565b9050808214611e26576000866000018281548110611de157611de16124a9565b9060005260206000200154905080876000018481548110611e0457611e046124a9565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e3757611e376129d4565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611d31565b6000915050611d31565b6000818152600183016020526040812054611ec357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611d31565b506000611d31565b6000826000018281548110611ee257611ee26124a9565b9060005260206000200154905092915050565b6001600160a01b0381168114611f0a57600080fd5b50565b600060208284031215611f1f57600080fd5b8135611f2a81611ef5565b9392505050565b6000815180845260005b81811015611f5757602081850181015186830182015201611f3b565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d2e6020830184611f31565b60008083601f840112611f9c57600080fd5b50813567ffffffffffffffff811115611fb457600080fd5b602083019150836020828501011115611fcc57600080fd5b9250929050565b600080600060408486031215611fe857600080fd5b83359250602084013567ffffffffffffffff81111561200657600080fd5b61201286828701611f8a565b9497909650939450505050565b60006020828403121561203157600080fd5b5035919050565b6000806020838503121561204b57600080fd5b823567ffffffffffffffff81111561206257600080fd5b8301601f8101851361207357600080fd5b803567ffffffffffffffff81111561208a57600080fd5b8560208260051b840101111561209f57600080fd5b6020919091019590945092505050565b600082825180855260208501945060208160051b8301016020850160005b838110156120ff57601f198584030188526120e9838351611f31565b60209889019890935091909101906001016120cd565b50909695505050505050565b6040808252835190820181905260009060208501906060840190835b818110156121475783511515835260209384019390920191600101612127565b5050838103602085015261215b81866120af565b9695505050505050565b6000806020838503121561217857600080fd5b823567ffffffffffffffff81111561218f57600080fd5b61219b85828601611f8a565b90969095509350505050565b602081526000611d2e60208301846120af565b600081518084526020840193506020830160005b828110156121f257815163ffffffff168652602095860195909101906001016121ce565b5093949350505050565b8981528860208201526101206040820152600061221d61012083018a611f31565b601b89900b606084015263ffffffff8816608084015282810360a08401528651808252602080890192019060005b8181101561226c578351601b0b83526020938401939092019160010161224b565b505083810360c085015261228081886121ba565b91505082810360e08401526122958186611f31565b90508281036101008401526122aa81856120af565b9c9b505050505050505050505050565b6000806000604084860312156122cf57600080fd5b83356122da81611ef5565b9250602084013567ffffffffffffffff81111561200657600080fd5b600181811c9082168061230a57607f821691505b60208210810361232a57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b634e487b7160e01b600052604160045260246000fd5b601f821115611cd557806000526020600020601f840160051c8101602085101561237d5750805b601f840160051c820191505b8181101561239d5760008155600101612389565b5050505050565b67ffffffffffffffff8311156123bc576123bc612340565b6123d0836123ca83546122f6565b83612356565b6000601f84116001811461240457600085156123ec5750838201355b600019600387901b1c1916600186901b17835561239d565b600083815260209020601f19861690835b828110156124355786850135825560209485019460019092019101612415565b50868210156124525760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006124a1602083018486612464565b949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126124d657600080fd5b83018035915067ffffffffffffffff8211156124f157600080fd5b602001915036819003821315611fcc57600080fd5b6000806040838503121561251957600080fd5b823561252481611ef5565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611d3157611d31612532565b80820180821115611d3157611d31612532565b604051601f8201601f1916810167ffffffffffffffff8111828210171561259b5761259b612340565b604052919050565b600067ffffffffffffffff8211156125bd576125bd612340565b5060051b60200190565b600082601f8301126125d857600080fd5b81356125eb6125e6826125a3565b612572565b8082825260208201915060208360051b86010192508583111561260d57600080fd5b602085015b8381101561262a578035835260209283019201612612565b5095945050505050565b6000806040838503121561264757600080fd5b823567ffffffffffffffff81111561265e57600080fd5b8301601f8101851361266f57600080fd5b803561267d6125e6826125a3565b8082825260208201915060208360051b85010192508783111561269f57600080fd5b6020840193505b828410156126ca5783356126b981611ef5565b8252602093840193909101906126a6565b9450505050602083013567ffffffffffffffff8111156126e957600080fd5b6126f5858286016125c7565b9150509250929050565b600081518084526020840193506020830160005b828110156121f2578151865260209586019590910190600101612713565b6040808252835190820181905260009060208501906060840190835b818110156127745783516001600160a01b031683526020938401939092019160010161274d565b5050838103602085015261215b81866126ff565b81810381811115611d3157611d31612532565b6000602082840312156127ad57600080fd5b5051919050565b600080604083850312156127c757600080fd5b825180601b0b81146127d857600080fd5b602084015190925063ffffffff811681146127f257600080fd5b809150509250929050565b6000806040838503121561281057600080fd5b825161281b81611ef5565b6020939093015192949293505050565b600082601f83011261283c57600080fd5b815161284a6125e6826125a3565b8082825260208201915060208360051b86010192508583111561286c57600080fd5b602085015b8381101561262a578051835260209283019201612871565b6000806040838503121561289c57600080fd5b825167ffffffffffffffff8111156128b357600080fd5b8301601f810185136128c457600080fd5b80516128d26125e6826125a3565b8082825260208201915060208360051b8501019250878311156128f457600080fd5b6020840193505b8284101561291f57835161290e81611ef5565b8252602093840193909101906128fb565b80955050505050602083015167ffffffffffffffff81111561294057600080fd5b6126f58582860161282b565b600080835461295a816122f6565b6001821680156129715760018114612986576129b6565b60ff19831686528115158202860193506129b6565b86600052602060002060005b838110156129ae57815488820152600190910190602001612992565b505081860193505b509195945050505050565b602081526000611d2e60208301846126ff565b634e487b7160e01b600052603160045260246000fdfea264697066735822122053f2748f5faa2186176f50becc1d9d3be61b0dbf659987c55628173423e5126964736f6c634300081b0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "activeDapiNameCount()": {
        "returns": {
          "_0": "Active dAPI name count"
        }
      },
      "activeDataFeed(uint256)": {
        "details": "Airseeker uses this function to get all the data it needs about an active data feed with a single RPC call. Since active data feed IDs and dAPI names are kept in respective EnumerableSet types, addition and removal of items to these may change the order of the remaining items. Therefore, do not depend on an index to address a specific data feed consistently.",
        "params": {
          "index": "Index"
        },
        "returns": {
          "beaconTimestamps": "Beacon timestamps read from Api3ServerV1",
          "beaconValues": "Beacon values read from Api3ServerV1",
          "dapiName": "dAPI name (`bytes32(0)` if the active data feed is identified by a data feed ID)",
          "dataFeedDetails": "Data feed details",
          "dataFeedId": "Data feed ID",
          "dataFeedTimestamp": "Data feed timestamp read from Api3ServerV1",
          "dataFeedValue": "Data feed value read from Api3ServerV1",
          "signedApiUrls": "Signed API URLs of the Beacon Airnodes",
          "updateParameters": "Update parameters"
        }
      },
      "activeDataFeedCount()": {
        "returns": {
          "_0": "Active data feed count"
        }
      },
      "activeDataFeedIdCount()": {
        "returns": {
          "_0": "Active data feed ID count"
        }
      },
      "constructor": {
        "params": {
          "api3ServerV1_": "Api3ServerV1 contract address",
          "owner_": "Owner address"
        }
      },
      "containsBytecode(address)": {
        "details": "An account not containing any bytecode does not indicate that it is an EOA or it will not contain any bytecode in the future. Contract construction and `SELFDESTRUCT` updates the bytecode at the end of the transaction.",
        "returns": {
          "_0": "If the account contains bytecode"
        }
      },
      "dapiNameToUpdateParameters(bytes32)": {
        "params": {
          "dapiName": "dAPI name"
        },
        "returns": {
          "updateParameters": "Update parameters"
        }
      },
      "dataFeedIdToUpdateParameters(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        },
        "returns": {
          "updateParameters": "Update parameters"
        }
      },
      "dataFeedIsRegistered(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        },
        "returns": {
          "_0": "If the data feed with ID is registered"
        }
      },
      "getBalance(address)": {
        "params": {
          "account": "Account address"
        },
        "returns": {
          "_0": "Account balance"
        }
      },
      "getBlockBasefee()": {
        "returns": {
          "_0": "Current block basefee"
        }
      },
      "getBlockNumber()": {
        "returns": {
          "_0": "Current block number"
        }
      },
      "getBlockTimestamp()": {
        "returns": {
          "_0": "Current block timestamp"
        }
      },
      "getChainId()": {
        "returns": {
          "_0": "Chain ID"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls"
        }
      },
      "owner()": {
        "returns": {
          "_0": "Owner address"
        }
      },
      "registerDataFeed(bytes)": {
        "params": {
          "dataFeedDetails": "Data feed details"
        },
        "returns": {
          "dataFeedId": "Data feed ID"
        }
      },
      "setDapiNameToBeActivated(bytes32)": {
        "params": {
          "dapiName": "dAPI name"
        }
      },
      "setDapiNameToBeDeactivated(bytes32)": {
        "params": {
          "dapiName": "dAPI name"
        }
      },
      "setDapiNameUpdateParameters(bytes32,bytes)": {
        "params": {
          "dapiName": "dAPI name",
          "updateParameters": "Update parameters"
        }
      },
      "setDataFeedIdToBeActivated(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        }
      },
      "setDataFeedIdToBeDeactivated(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        }
      },
      "setDataFeedIdUpdateParameters(bytes32,bytes)": {
        "params": {
          "dataFeedId": "Data feed ID",
          "updateParameters": "Update parameters"
        }
      },
      "setSignedApiUrl(address,string)": {
        "params": {
          "airnode": "Airnode address",
          "signedApiUrl": "Signed API URL"
        }
      },
      "tryMulticall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls",
          "successes": "Array of success conditions of batched calls"
        }
      }
    },
    "stateVariables": {
      "MAXIMUM_BEACON_COUNT_IN_SET": {
        "details": "Api3ServerV1 introduces the concept of a Beacon, which is a single-source data feed. Api3ServerV1 allows Beacons to be read individually, or arbitrary combinations of them to be aggregated on-chain to form multiple-source data feeds, which are called Beacon sets. This contract does not support Beacon sets that consist of more than `MAXIMUM_BEACON_COUNT_IN_SET` Beacons to be registered."
      },
      "airnodeToSignedApiUrl": {
        "details": "An Airseeker can be configured to refer to additional signed APIs than the ones whose URLs are stored in this contract for redundancy"
      }
    },
    "title": "A contract where active data feeds and their specs are registered by the contract owner for the respective Airseeker to refer to",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAXIMUM_BEACON_COUNT_IN_SET()": {
        "notice": "Maximum number of Beacons in a Beacon set that can be registered"
      },
      "MAXIMUM_SIGNED_API_URL_LENGTH()": {
        "notice": "Maximum signed API URL length"
      },
      "MAXIMUM_UPDATE_PARAMETERS_LENGTH()": {
        "notice": "Maximum encoded update parameters length"
      },
      "activeDapiNameCount()": {
        "notice": "Returns the number of active data feeds identified by a dAPI name"
      },
      "activeDataFeed(uint256)": {
        "notice": "In an imaginary array consisting of the active data feed IDs and active dAPI names, picks the index-th identifier, and returns all data about the respective data feed that is available. Whenever data is not available (including the case where index does not correspond to an active data feed), returns empty values."
      },
      "activeDataFeedCount()": {
        "notice": "Returns the number of active data feeds identified by a data feed ID or dAPI name"
      },
      "activeDataFeedIdCount()": {
        "notice": "Returns the number of active data feeds identified by a data feed ID"
      },
      "airnodeToSignedApiUrl(address)": {
        "notice": "Airnode address to signed API URL"
      },
      "api3ServerV1()": {
        "notice": "Api3ServerV1 contract address"
      },
      "containsBytecode(address)": {
        "notice": "Returns if the account contains bytecode"
      },
      "dapiNameToUpdateParameters(bytes32)": {
        "notice": "dAPI name to update parameters"
      },
      "dataFeedIdToDetails(bytes32)": {
        "notice": "Data feed ID to encoded details"
      },
      "dataFeedIdToUpdateParameters(bytes32)": {
        "notice": "Data feed ID to update parameters"
      },
      "dataFeedIsRegistered(bytes32)": {
        "notice": "Returns if the data feed with ID is registered"
      },
      "getBalance(address)": {
        "notice": "Returns the account balance"
      },
      "getBlockBasefee()": {
        "notice": "Returns the current block basefee"
      },
      "getBlockNumber()": {
        "notice": "Returns the current block number"
      },
      "getBlockTimestamp()": {
        "notice": "Returns the current block timestamp"
      },
      "getChainId()": {
        "notice": "Returns the chain ID"
      },
      "multicall(bytes[])": {
        "notice": "Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts"
      },
      "owner()": {
        "notice": "Returns the owner address"
      },
      "registerDataFeed(bytes)": {
        "notice": "Registers the data feed. In the case that the data feed is a Beacon, the details should be the ABI-encoded Airnode address and template ID. In the case that the data feed is a Beacon set, the details should be the ABI-encoded Airnode addresses array and template IDs array."
      },
      "renounceOwnership()": {
        "notice": "Overriden to be disabled"
      },
      "setDapiNameToBeActivated(bytes32)": {
        "notice": "Called by the owner to set the dAPI name to be activated"
      },
      "setDapiNameToBeDeactivated(bytes32)": {
        "notice": "Called by the owner to set the dAPI name to be deactivated"
      },
      "setDapiNameUpdateParameters(bytes32,bytes)": {
        "notice": "Called by the owner to set the dAPI name update parameters. The update parameters must be encoded in a format that Airseeker expects."
      },
      "setDataFeedIdToBeActivated(bytes32)": {
        "notice": "Called by the owner to set the data feed ID to be activated"
      },
      "setDataFeedIdToBeDeactivated(bytes32)": {
        "notice": "Called by the owner to set the data feed ID to be deactivated"
      },
      "setDataFeedIdUpdateParameters(bytes32,bytes)": {
        "notice": "Called by the owner to set the data feed ID update parameters. The update parameters must be encoded in a format that Airseeker expects."
      },
      "setSignedApiUrl(address,string)": {
        "notice": "Called by the owner to set the signed API URL for the Airnode. The signed API must implement the specific interface that Airseeker expects."
      },
      "transferOwnership(address)": {
        "notice": "Overriden to be disabled"
      },
      "tryMulticall(bytes[])": {
        "notice": "Batches calls to the inheriting contract but does not revert if any of the batched calls reverts"
      }
    },
    "notice": "Airseeker is an application that pushes API provider-signed data to chain when certain conditions are met so that the data feeds served on the Api3ServerV1 contract are updated according to the respective specs. In other words, this contract is an on-chain configuration file for an Airseeker (or multiple Airseekers in a setup with redundancy). The Airseeker must know which data feeds are active (and thus need to be updated), the constituting Airnode (the oracle node that API providers operate to sign data) addresses and request template IDs, what the respective on-chain data feed values are, what the update parameters are, and the URL of the signed APIs (from which Airseeker can fetch signed data) that are hosted by the respective API providers. The contract owner is responsible with leaving the state of this contract in a way that Airseeker expects. For example, if a dAPI name is activated without registering the respective data feed, the Airseeker will not have access to the data that it needs to execute updates.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13488,
        "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 903,
        "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
        "label": "airnodeToSignedApiUrl",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 909,
        "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
        "label": "dataFeedIdToDetails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 912,
        "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
        "label": "activeDataFeedIds",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Bytes32Set)19019_storage"
      },
      {
        "astId": 915,
        "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
        "label": "activeDapiNames",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Bytes32Set)19019_storage"
      },
      {
        "astId": 919,
        "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
        "label": "dataFeedIdToUpdateParametersHash",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 923,
        "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
        "label": "dapiNameToUpdateParametersHash",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 927,
        "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
        "label": "updateParametersHashToValue",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)19019_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 19018,
            "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)18825_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)18825_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 18820,
            "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 18824,
            "contract": "contracts/api3-server-v1/AirseekerRegistry.sol:AirseekerRegistry",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
